// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleEligibilityScheduleRequest and their operations over its parent. </summary>
    public partial class RoleEligibilityScheduleRequestCollection : ArmCollection, IEnumerable<RoleEligibilityScheduleRequest>, IAsyncEnumerable<RoleEligibilityScheduleRequest>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleEligibilityScheduleRequestsRestOperations _roleEligibilityScheduleRequestsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleEligibilityScheduleRequestCollection"/> class for mocking. </summary>
        protected RoleEligibilityScheduleRequestCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleEligibilityScheduleRequestCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleEligibilityScheduleRequestCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleEligibilityScheduleRequestsRestClient = new RoleEligibilityScheduleRequestsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// <summary> Creates a role eligibility schedule request. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name of the role eligibility to create. It can be any valid GUID. </param>
        /// <param name="parameters"> Parameters for the role eligibility schedule request. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual RoleEligibilityScheduleRequestCreateOperation CreateOrUpdate(string roleEligibilityScheduleRequestName, RoleEligibilityScheduleRequestData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleEligibilityScheduleRequestsRestClient.Create(Id, roleEligibilityScheduleRequestName, parameters, cancellationToken);
                var operation = new RoleEligibilityScheduleRequestCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a role eligibility schedule request. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name of the role eligibility to create. It can be any valid GUID. </param>
        /// <param name="parameters"> Parameters for the role eligibility schedule request. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<RoleEligibilityScheduleRequestCreateOperation> CreateOrUpdateAsync(string roleEligibilityScheduleRequestName, RoleEligibilityScheduleRequestData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleEligibilityScheduleRequestsRestClient.CreateAsync(Id, roleEligibilityScheduleRequestName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new RoleEligibilityScheduleRequestCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified role eligibility schedule request. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public virtual Response<RoleEligibilityScheduleRequest> Get(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.Get");
            scope.Start();
            try
            {
                var response = _roleEligibilityScheduleRequestsRestClient.Get(Id, roleEligibilityScheduleRequestName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleEligibilityScheduleRequest(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified role eligibility schedule request. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public async virtual Task<Response<RoleEligibilityScheduleRequest>> GetAsync(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleEligibilityScheduleRequestsRestClient.GetAsync(Id, roleEligibilityScheduleRequestName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleEligibilityScheduleRequest(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public virtual Response<RoleEligibilityScheduleRequest> GetIfExists(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleEligibilityScheduleRequestsRestClient.Get(Id, roleEligibilityScheduleRequestName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleEligibilityScheduleRequest>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleEligibilityScheduleRequest(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public async virtual Task<Response<RoleEligibilityScheduleRequest>> GetIfExistsAsync(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleEligibilityScheduleRequestsRestClient.GetAsync(Id, roleEligibilityScheduleRequestName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleEligibilityScheduleRequest>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleEligibilityScheduleRequest(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleEligibilityScheduleRequestName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleEligibilityScheduleRequestName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleEligibilityScheduleRequestName, CancellationToken cancellationToken = default)
        {
            if (roleEligibilityScheduleRequestName == null)
            {
                throw new ArgumentNullException(nameof(roleEligibilityScheduleRequestName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleEligibilityScheduleRequestName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets role eligibility schedule requests for a scope. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role eligibility schedule requests requested by the current user. Use $filter=asTarget() to return all role eligibility schedule requests created for the current user. Use $filter=asApprover() to return all role eligibility schedule requests where the current user is an approver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleEligibilityScheduleRequest" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleEligibilityScheduleRequest> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<RoleEligibilityScheduleRequest> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleEligibilityScheduleRequestsRestClient.ListForScope(Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleEligibilityScheduleRequest(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RoleEligibilityScheduleRequest> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleEligibilityScheduleRequestsRestClient.ListForScopeNextPage(nextLink, Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleEligibilityScheduleRequest(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets role eligibility schedule requests for a scope. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role eligibility schedule requests requested by the current user. Use $filter=asTarget() to return all role eligibility schedule requests created for the current user. Use $filter=asApprover() to return all role eligibility schedule requests where the current user is an approver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleEligibilityScheduleRequest" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleEligibilityScheduleRequest> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<RoleEligibilityScheduleRequest>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleEligibilityScheduleRequestsRestClient.ListForScopeAsync(Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleEligibilityScheduleRequest(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RoleEligibilityScheduleRequest>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleEligibilityScheduleRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleEligibilityScheduleRequestsRestClient.ListForScopeNextPageAsync(nextLink, Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleEligibilityScheduleRequest(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<RoleEligibilityScheduleRequest> IEnumerable<RoleEligibilityScheduleRequest>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleEligibilityScheduleRequest> IAsyncEnumerable<RoleEligibilityScheduleRequest>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleEligibilityScheduleRequest, RoleEligibilityScheduleRequestData> Construct() { }
    }
}
