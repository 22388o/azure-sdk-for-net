// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    public static partial class SubscriptionExtensions
    {
        #region AccessReviewScheduleDefinition
        /// <summary> Gets an object representing a AccessReviewScheduleDefinitionCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AccessReviewScheduleDefinitionCollection" /> object. </returns>
        public static AccessReviewScheduleDefinitionCollection GetAccessReviewScheduleDefinitions(this Subscription subscription)
        {
            return new AccessReviewScheduleDefinitionCollection(subscription);
        }
        #endregion

        #region AccessReviewDefaultSettings
        /// <summary> Gets an object representing a AccessReviewDefaultSettings along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AccessReviewDefaultSettings" /> object. </returns>
        public static AccessReviewDefaultSettings GetAccessReviewDefaultSettings(this Subscription subscription)
        {
            return new AccessReviewDefaultSettings(subscription, new ResourceIdentifier(subscription.Id + "/providers/Microsoft.Authorization/accessReviewScheduleSettings/default"));
        }
        #endregion

        #region DenyAssignment
        /// <summary> Gets an object representing a DenyAssignmentCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DenyAssignmentCollection" /> object. </returns>
        public static DenyAssignmentCollection GetDenyAssignments(this Subscription subscription)
        {
            return new DenyAssignmentCollection(subscription);
        }
        #endregion

        #region RoleAssignment
        /// <summary> Gets an object representing a RoleAssignmentCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleAssignmentCollection" /> object. </returns>
        public static RoleAssignmentCollection GetRoleAssignments(this Subscription subscription)
        {
            return new RoleAssignmentCollection(subscription);
        }
        #endregion

        #region RoleDefinition
        /// <summary> Gets an object representing a RoleDefinitionCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleDefinitionCollection" /> object. </returns>
        public static RoleDefinitionCollection GetRoleDefinitions(this Subscription subscription)
        {
            return new RoleDefinitionCollection(subscription);
        }
        #endregion

        #region RoleAssignmentSchedule
        /// <summary> Gets an object representing a RoleAssignmentScheduleCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleAssignmentScheduleCollection" /> object. </returns>
        public static RoleAssignmentScheduleCollection GetRoleAssignmentSchedules(this Subscription subscription)
        {
            return new RoleAssignmentScheduleCollection(subscription);
        }
        #endregion

        #region RoleAssignmentScheduleInstance
        /// <summary> Gets an object representing a RoleAssignmentScheduleInstanceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleAssignmentScheduleInstanceCollection" /> object. </returns>
        public static RoleAssignmentScheduleInstanceCollection GetRoleAssignmentScheduleInstances(this Subscription subscription)
        {
            return new RoleAssignmentScheduleInstanceCollection(subscription);
        }
        #endregion

        #region RoleAssignmentScheduleRequest
        /// <summary> Gets an object representing a RoleAssignmentScheduleRequestCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleAssignmentScheduleRequestCollection" /> object. </returns>
        public static RoleAssignmentScheduleRequestCollection GetRoleAssignmentScheduleRequests(this Subscription subscription)
        {
            return new RoleAssignmentScheduleRequestCollection(subscription);
        }
        #endregion

        #region RoleEligibilitySchedule
        /// <summary> Gets an object representing a RoleEligibilityScheduleCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleEligibilityScheduleCollection" /> object. </returns>
        public static RoleEligibilityScheduleCollection GetRoleEligibilitySchedules(this Subscription subscription)
        {
            return new RoleEligibilityScheduleCollection(subscription);
        }
        #endregion

        #region RoleEligibilityScheduleInstance
        /// <summary> Gets an object representing a RoleEligibilityScheduleInstanceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleEligibilityScheduleInstanceCollection" /> object. </returns>
        public static RoleEligibilityScheduleInstanceCollection GetRoleEligibilityScheduleInstances(this Subscription subscription)
        {
            return new RoleEligibilityScheduleInstanceCollection(subscription);
        }
        #endregion

        #region RoleEligibilityScheduleRequest
        /// <summary> Gets an object representing a RoleEligibilityScheduleRequestCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleEligibilityScheduleRequestCollection" /> object. </returns>
        public static RoleEligibilityScheduleRequestCollection GetRoleEligibilityScheduleRequests(this Subscription subscription)
        {
            return new RoleEligibilityScheduleRequestCollection(subscription);
        }
        #endregion

        #region RoleManagementPolicy
        /// <summary> Gets an object representing a RoleManagementPolicyCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleManagementPolicyCollection" /> object. </returns>
        public static RoleManagementPolicyCollection GetRoleManagementPolicies(this Subscription subscription)
        {
            return new RoleManagementPolicyCollection(subscription);
        }
        #endregion

        #region RoleManagementPolicyAssignment
        /// <summary> Gets an object representing a RoleManagementPolicyAssignmentCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RoleManagementPolicyAssignmentCollection" /> object. </returns>
        public static RoleManagementPolicyAssignmentCollection GetRoleManagementPolicyAssignments(this Subscription subscription)
        {
            return new RoleManagementPolicyAssignmentCollection(subscription);
        }
        #endregion

        private static RoleAssignmentMetricsRestOperations GetRoleAssignmentMetricsRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new RoleAssignmentMetricsRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        /// <summary> Get role assignment usage metrics for a subscription. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<RoleAssignmentMetricsResult>> GetMetricsForSubscriptionRoleAssignmentMetricAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return await subscription.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("SubscriptionExtensions.GetMetricsForSubscriptionRoleAssignmentMetric");
                scope.Start();
                try
                {
                    var restOperations = GetRoleAssignmentMetricsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.GetMetricsForSubscriptionAsync(subscription.Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Get role assignment usage metrics for a subscription. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<RoleAssignmentMetricsResult> GetMetricsForSubscriptionRoleAssignmentMetric(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return subscription.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("SubscriptionExtensions.GetMetricsForSubscriptionRoleAssignmentMetric");
                scope.Start();
                try
                {
                    var restOperations = GetRoleAssignmentMetricsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.GetMetricsForSubscription(subscription.Id.SubscriptionId, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }
    }
}
