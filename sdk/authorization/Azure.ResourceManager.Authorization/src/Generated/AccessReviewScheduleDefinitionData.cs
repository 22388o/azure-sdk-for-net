// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing the AccessReviewScheduleDefinition data model. </summary>
    public partial class AccessReviewScheduleDefinitionData : Resource
    {
        /// <summary> Initializes a new instance of AccessReviewScheduleDefinitionData. </summary>
        internal AccessReviewScheduleDefinitionData()
        {
            Reviewers = new ChangeTrackingList<AccessReviewReviewer>();
            Instances = new ChangeTrackingList<AccessReviewInstanceData>();
        }

        /// <summary> Initializes a new instance of AccessReviewScheduleDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="displayName"> The display name for the schedule definition. </param>
        /// <param name="status"> This read-only field specifies the status of an accessReview. </param>
        /// <param name="descriptionForAdmins"> The description provided by the access review creator and visible to admins. </param>
        /// <param name="descriptionForReviewers"> The description provided by the access review creator to be shown to reviewers. </param>
        /// <param name="reviewers"> This is the collection of reviewers. </param>
        /// <param name="reviewersType"> This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review. </param>
        /// <param name="instances"> This is the collection of instances returned when one does an expand on it. </param>
        /// <param name="resourceId"> ResourceId in which this review is getting created. </param>
        /// <param name="roleDefinitionId"> This is used to indicate the role being reviewed. </param>
        /// <param name="principalTypePropertiesScopePrincipalType"> The identity type user/servicePrincipal to review. </param>
        /// <param name="mailNotificationsEnabled"> Flag to indicate whether sending mails to reviewers and the review creator is enabled. </param>
        /// <param name="reminderNotificationsEnabled"> Flag to indicate whether sending reminder emails to reviewers are enabled. </param>
        /// <param name="defaultDecisionEnabled"> Flag to indicate whether reviewers are required to provide a justification when reviewing access. </param>
        /// <param name="justificationRequiredOnApproval"> Flag to indicate whether the reviewer is required to pass justification when recording a decision. </param>
        /// <param name="defaultDecision"> This specifies the behavior for the autoReview feature when an access review completes. </param>
        /// <param name="autoApplyDecisionsEnabled"> Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. </param>
        /// <param name="recommendationsEnabled"> Flag to indicate whether showing recommendations to reviewers is enabled. </param>
        /// <param name="instanceDurationInDays"> The duration in days for an instance. </param>
        /// <param name="typePropertiesSettingsRecurrenceRangeType"> The recurrence range type. The possible values are: endDate, noEnd, numbered. </param>
        /// <param name="numberOfOccurrences"> The number of times to repeat the access review. Required and must be positive if type is numbered. </param>
        /// <param name="startDate"> The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. </param>
        /// <param name="endDate"> The DateTime when the review is scheduled to end. Required if type is endDate. </param>
        /// <param name="typePropertiesSettingsRecurrencePatternType"> The recurrence type : weekly, monthly, etc. </param>
        /// <param name="interval"> The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. </param>
        /// <param name="principalId"> The identity id. </param>
        /// <param name="principalTypePropertiesCreatedByPrincipalType"> The identity type : user/servicePrincipal. </param>
        /// <param name="principalName"> The identity display name. </param>
        /// <param name="userPrincipalName"> The user principal name(if valid). </param>
        internal AccessReviewScheduleDefinitionData(ResourceIdentifier id, string name, ResourceType type, string displayName, AccessReviewScheduleDefinitionStatus? status, string descriptionForAdmins, string descriptionForReviewers, IReadOnlyList<AccessReviewReviewer> reviewers, AccessReviewScheduleDefinitionReviewersType? reviewersType, IReadOnlyList<AccessReviewInstanceData> instances, string resourceId, string roleDefinitionId, AccessReviewScopePrincipalType? principalTypePropertiesScopePrincipalType, bool? mailNotificationsEnabled, bool? reminderNotificationsEnabled, bool? defaultDecisionEnabled, bool? justificationRequiredOnApproval, DefaultDecisionType? defaultDecision, bool? autoApplyDecisionsEnabled, bool? recommendationsEnabled, int? instanceDurationInDays, AccessReviewRecurrenceRangeType? typePropertiesSettingsRecurrenceRangeType, int? numberOfOccurrences, DateTimeOffset? startDate, DateTimeOffset? endDate, AccessReviewRecurrencePatternType? typePropertiesSettingsRecurrencePatternType, int? interval, string principalId, AccessReviewActorIdentityType? principalTypePropertiesCreatedByPrincipalType, string principalName, string userPrincipalName) : base(id, name, type)
        {
            DisplayName = displayName;
            Status = status;
            DescriptionForAdmins = descriptionForAdmins;
            DescriptionForReviewers = descriptionForReviewers;
            Reviewers = reviewers;
            ReviewersType = reviewersType;
            Instances = instances;
            ResourceId = resourceId;
            RoleDefinitionId = roleDefinitionId;
            PrincipalTypePropertiesScopePrincipalType = principalTypePropertiesScopePrincipalType;
            MailNotificationsEnabled = mailNotificationsEnabled;
            ReminderNotificationsEnabled = reminderNotificationsEnabled;
            DefaultDecisionEnabled = defaultDecisionEnabled;
            JustificationRequiredOnApproval = justificationRequiredOnApproval;
            DefaultDecision = defaultDecision;
            AutoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
            RecommendationsEnabled = recommendationsEnabled;
            InstanceDurationInDays = instanceDurationInDays;
            TypePropertiesSettingsRecurrenceRangeType = typePropertiesSettingsRecurrenceRangeType;
            NumberOfOccurrences = numberOfOccurrences;
            StartDate = startDate;
            EndDate = endDate;
            TypePropertiesSettingsRecurrencePatternType = typePropertiesSettingsRecurrencePatternType;
            Interval = interval;
            PrincipalId = principalId;
            PrincipalTypePropertiesCreatedByPrincipalType = principalTypePropertiesCreatedByPrincipalType;
            PrincipalName = principalName;
            UserPrincipalName = userPrincipalName;
        }

        /// <summary> The display name for the schedule definition. </summary>
        public string DisplayName { get; }
        /// <summary> This read-only field specifies the status of an accessReview. </summary>
        public AccessReviewScheduleDefinitionStatus? Status { get; }
        /// <summary> The description provided by the access review creator and visible to admins. </summary>
        public string DescriptionForAdmins { get; }
        /// <summary> The description provided by the access review creator to be shown to reviewers. </summary>
        public string DescriptionForReviewers { get; }
        /// <summary> This is the collection of reviewers. </summary>
        public IReadOnlyList<AccessReviewReviewer> Reviewers { get; }
        /// <summary> This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review. </summary>
        public AccessReviewScheduleDefinitionReviewersType? ReviewersType { get; }
        /// <summary> This is the collection of instances returned when one does an expand on it. </summary>
        public IReadOnlyList<AccessReviewInstanceData> Instances { get; }
        /// <summary> ResourceId in which this review is getting created. </summary>
        public string ResourceId { get; }
        /// <summary> This is used to indicate the role being reviewed. </summary>
        public string RoleDefinitionId { get; }
        /// <summary> The identity type user/servicePrincipal to review. </summary>
        public AccessReviewScopePrincipalType? PrincipalTypePropertiesScopePrincipalType { get; }
        /// <summary> Flag to indicate whether sending mails to reviewers and the review creator is enabled. </summary>
        public bool? MailNotificationsEnabled { get; }
        /// <summary> Flag to indicate whether sending reminder emails to reviewers are enabled. </summary>
        public bool? ReminderNotificationsEnabled { get; }
        /// <summary> Flag to indicate whether reviewers are required to provide a justification when reviewing access. </summary>
        public bool? DefaultDecisionEnabled { get; }
        /// <summary> Flag to indicate whether the reviewer is required to pass justification when recording a decision. </summary>
        public bool? JustificationRequiredOnApproval { get; }
        /// <summary> This specifies the behavior for the autoReview feature when an access review completes. </summary>
        public DefaultDecisionType? DefaultDecision { get; }
        /// <summary> Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. </summary>
        public bool? AutoApplyDecisionsEnabled { get; }
        /// <summary> Flag to indicate whether showing recommendations to reviewers is enabled. </summary>
        public bool? RecommendationsEnabled { get; }
        /// <summary> The duration in days for an instance. </summary>
        public int? InstanceDurationInDays { get; }
        /// <summary> The recurrence range type. The possible values are: endDate, noEnd, numbered. </summary>
        public AccessReviewRecurrenceRangeType? TypePropertiesSettingsRecurrenceRangeType { get; }
        /// <summary> The number of times to repeat the access review. Required and must be positive if type is numbered. </summary>
        public int? NumberOfOccurrences { get; }
        /// <summary> The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. </summary>
        public DateTimeOffset? StartDate { get; }
        /// <summary> The DateTime when the review is scheduled to end. Required if type is endDate. </summary>
        public DateTimeOffset? EndDate { get; }
        /// <summary> The recurrence type : weekly, monthly, etc. </summary>
        public AccessReviewRecurrencePatternType? TypePropertiesSettingsRecurrencePatternType { get; }
        /// <summary> The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. </summary>
        public int? Interval { get; }
        /// <summary> The identity id. </summary>
        public string PrincipalId { get; }
        /// <summary> The identity type : user/servicePrincipal. </summary>
        public AccessReviewActorIdentityType? PrincipalTypePropertiesCreatedByPrincipalType { get; }
        /// <summary> The identity display name. </summary>
        public string PrincipalName { get; }
        /// <summary> The user principal name(if valid). </summary>
        public string UserPrincipalName { get; }
    }
}
