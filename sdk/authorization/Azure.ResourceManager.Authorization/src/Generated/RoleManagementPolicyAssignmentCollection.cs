// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleManagementPolicyAssignment and their operations over its parent. </summary>
    public partial class RoleManagementPolicyAssignmentCollection : ArmCollection, IEnumerable<RoleManagementPolicyAssignment>, IAsyncEnumerable<RoleManagementPolicyAssignment>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleManagementPolicyAssignmentsRestOperations _roleManagementPolicyAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleManagementPolicyAssignmentCollection"/> class for mocking. </summary>
        protected RoleManagementPolicyAssignmentCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleManagementPolicyAssignmentCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleManagementPolicyAssignmentCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleManagementPolicyAssignmentsRestClient = new RoleManagementPolicyAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_Create
        /// <summary> Create a role management policy assignment. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to upsert. </param>
        /// <param name="parameters"> Parameters for the role management policy assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual RoleManagementPolicyAssignmentCreateOperation CreateOrUpdate(string roleManagementPolicyAssignmentName, RoleManagementPolicyAssignmentData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleManagementPolicyAssignmentsRestClient.Create(Id, roleManagementPolicyAssignmentName, parameters, cancellationToken);
                var operation = new RoleManagementPolicyAssignmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_Create
        /// <summary> Create a role management policy assignment. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to upsert. </param>
        /// <param name="parameters"> Parameters for the role management policy assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<RoleManagementPolicyAssignmentCreateOperation> CreateOrUpdateAsync(string roleManagementPolicyAssignmentName, RoleManagementPolicyAssignmentData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleManagementPolicyAssignmentsRestClient.CreateAsync(Id, roleManagementPolicyAssignmentName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new RoleManagementPolicyAssignmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_Get
        /// <summary> Get the specified role management policy assignment for a resource scope. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public virtual Response<RoleManagementPolicyAssignment> Get(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = _roleManagementPolicyAssignmentsRestClient.Get(Id, roleManagementPolicyAssignmentName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleManagementPolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_Get
        /// <summary> Get the specified role management policy assignment for a resource scope. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public async virtual Task<Response<RoleManagementPolicyAssignment>> GetAsync(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleManagementPolicyAssignmentsRestClient.GetAsync(Id, roleManagementPolicyAssignmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleManagementPolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public virtual Response<RoleManagementPolicyAssignment> GetIfExists(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleManagementPolicyAssignmentsRestClient.Get(Id, roleManagementPolicyAssignmentName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleManagementPolicyAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleManagementPolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public async virtual Task<Response<RoleManagementPolicyAssignment>> GetIfExistsAsync(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleManagementPolicyAssignmentsRestClient.GetAsync(Id, roleManagementPolicyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleManagementPolicyAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleManagementPolicyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleManagementPolicyAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyAssignmentName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleManagementPolicyAssignmentName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleManagementPolicyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_ListForScope
        /// <summary> Gets role management assignment policies for a resource scope. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleManagementPolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleManagementPolicyAssignment> GetAll(CancellationToken cancellationToken = default)
        {
            Page<RoleManagementPolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleManagementPolicyAssignmentsRestClient.ListForScope(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RoleManagementPolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleManagementPolicyAssignmentsRestClient.ListForScopeNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments
        /// ContextualPath: /{scope}
        /// OperationId: RoleManagementPolicyAssignments_ListForScope
        /// <summary> Gets role management assignment policies for a resource scope. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleManagementPolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleManagementPolicyAssignment> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<RoleManagementPolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleManagementPolicyAssignmentsRestClient.ListForScopeAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RoleManagementPolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleManagementPolicyAssignmentsRestClient.ListForScopeNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<RoleManagementPolicyAssignment> IEnumerable<RoleManagementPolicyAssignment>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleManagementPolicyAssignment> IAsyncEnumerable<RoleManagementPolicyAssignment>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleManagementPolicyAssignment, RoleManagementPolicyAssignmentData> Construct() { }
    }
}
