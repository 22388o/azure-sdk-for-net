// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleDefinition and their operations over its parent. </summary>
    public partial class RoleDefinitionCollection : ArmCollection, IEnumerable<RoleDefinition>, IAsyncEnumerable<RoleDefinition>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleDefinitionsRestOperations _roleDefinitionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleDefinitionCollection"/> class for mocking. </summary>
        protected RoleDefinitionCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleDefinitionCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleDefinitionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleDefinitionsRestClient = new RoleDefinitionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// <summary> Creates or updates a role definition. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="roleDefinition"> The values for the role definition. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> or <paramref name="roleDefinition"/> is null. </exception>
        public virtual RoleDefinitionCreateOrUpdateOperation CreateOrUpdate(string roleDefinitionId, RoleDefinitionData roleDefinition, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }
            if (roleDefinition == null)
            {
                throw new ArgumentNullException(nameof(roleDefinition));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleDefinitionsRestClient.CreateOrUpdate(Id, roleDefinitionId, roleDefinition, cancellationToken);
                var operation = new RoleDefinitionCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a role definition. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="roleDefinition"> The values for the role definition. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> or <paramref name="roleDefinition"/> is null. </exception>
        public async virtual Task<RoleDefinitionCreateOrUpdateOperation> CreateOrUpdateAsync(string roleDefinitionId, RoleDefinitionData roleDefinition, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }
            if (roleDefinition == null)
            {
                throw new ArgumentNullException(nameof(roleDefinition));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleDefinitionsRestClient.CreateOrUpdateAsync(Id, roleDefinitionId, roleDefinition, cancellationToken).ConfigureAwait(false);
                var operation = new RoleDefinitionCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get role definition by name (GUID). </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public virtual Response<RoleDefinition> Get(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = _roleDefinitionsRestClient.Get(Id, roleDefinitionId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleDefinition(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get role definition by name (GUID). </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public async virtual Task<Response<RoleDefinition>> GetAsync(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleDefinitionsRestClient.GetAsync(Id, roleDefinitionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleDefinition(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public virtual Response<RoleDefinition> GetIfExists(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleDefinitionsRestClient.Get(Id, roleDefinitionId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleDefinition>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleDefinition(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public async virtual Task<Response<RoleDefinition>> GetIfExistsAsync(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleDefinitionsRestClient.GetAsync(Id, roleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleDefinition>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleDefinition(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleDefinitionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleDefinitionId"> The ID of the role definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleDefinitionId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (roleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(roleDefinitionId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all role definitions that are applicable at scope and above. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleDefinition> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<RoleDefinition> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleDefinitionsRestClient.List(Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleDefinition(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RoleDefinition> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleDefinitionsRestClient.ListNextPage(nextLink, Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleDefinition(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get all role definitions that are applicable at scope and above. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleDefinition> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<RoleDefinition>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleDefinitionsRestClient.ListAsync(Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleDefinition(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RoleDefinition>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleDefinitionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleDefinitionsRestClient.ListNextPageAsync(nextLink, Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleDefinition(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<RoleDefinition> IEnumerable<RoleDefinition>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleDefinition> IAsyncEnumerable<RoleDefinition>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleDefinition, RoleDefinitionData> Construct() { }
    }
}
