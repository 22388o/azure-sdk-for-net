// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleManagementPolicy and their operations over its parent. </summary>
    public partial class RoleManagementPolicyCollection : ArmCollection, IEnumerable<RoleManagementPolicy>, IAsyncEnumerable<RoleManagementPolicy>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleManagementPoliciesRestOperations _roleManagementPoliciesRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleManagementPolicyCollection"/> class for mocking. </summary>
        protected RoleManagementPolicyCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleManagementPolicyCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleManagementPolicyCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleManagementPoliciesRestClient = new RoleManagementPoliciesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// <summary> Get the specified role management policy for a resource scope. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public virtual Response<RoleManagementPolicy> Get(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = _roleManagementPoliciesRestClient.Get(Id, roleManagementPolicyName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleManagementPolicy(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified role management policy for a resource scope. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public async virtual Task<Response<RoleManagementPolicy>> GetAsync(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleManagementPoliciesRestClient.GetAsync(Id, roleManagementPolicyName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleManagementPolicy(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public virtual Response<RoleManagementPolicy> GetIfExists(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleManagementPoliciesRestClient.Get(Id, roleManagementPolicyName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleManagementPolicy>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleManagementPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public async virtual Task<Response<RoleManagementPolicy>> GetIfExistsAsync(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleManagementPoliciesRestClient.GetAsync(Id, roleManagementPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleManagementPolicy>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleManagementPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleManagementPolicyName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleManagementPolicyName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleManagementPolicyName, CancellationToken cancellationToken = default)
        {
            if (roleManagementPolicyName == null)
            {
                throw new ArgumentNullException(nameof(roleManagementPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleManagementPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets role management policies for a resource scope. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleManagementPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleManagementPolicy> GetAll(CancellationToken cancellationToken = default)
        {
            Page<RoleManagementPolicy> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleManagementPoliciesRestClient.ListForScope(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicy(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RoleManagementPolicy> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleManagementPoliciesRestClient.ListForScopeNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicy(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets role management policies for a resource scope. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleManagementPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleManagementPolicy> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<RoleManagementPolicy>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleManagementPoliciesRestClient.ListForScopeAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicy(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RoleManagementPolicy>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleManagementPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleManagementPoliciesRestClient.ListForScopeNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleManagementPolicy(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<RoleManagementPolicy> IEnumerable<RoleManagementPolicy>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleManagementPolicy> IAsyncEnumerable<RoleManagementPolicy>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleManagementPolicy, RoleManagementPolicyData> Construct() { }
    }
}
