// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleAssignment and their operations over its parent. </summary>
    public partial class RoleAssignmentCollection : ArmCollection, IEnumerable<RoleAssignment>, IAsyncEnumerable<RoleAssignment>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleAssignmentsRestOperations _roleAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentCollection"/> class for mocking. </summary>
        protected RoleAssignmentCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleAssignmentCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleAssignmentsRestClient = new RoleAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// <summary> Create or update a role assignment by scope and name. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="parameters"> Parameters for the role assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual RoleAssignmentCreateOperation CreateOrUpdate(string roleAssignmentName, RoleAssignmentCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.Create(Id, roleAssignmentName, parameters, cancellationToken);
                var operation = new RoleAssignmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a role assignment by scope and name. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="parameters"> Parameters for the role assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<RoleAssignmentCreateOperation> CreateOrUpdateAsync(string roleAssignmentName, RoleAssignmentCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.CreateAsync(Id, roleAssignmentName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new RoleAssignmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a role assignment by scope and name. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public virtual Response<RoleAssignment> Get(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.Get(Id, roleAssignmentName, tenantId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a role assignment by scope and name. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public async virtual Task<Response<RoleAssignment>> GetAsync(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.GetAsync(Id, roleAssignmentName, tenantId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public virtual Response<RoleAssignment> GetIfExists(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.Get(Id, roleAssignmentName, tenantId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public async virtual Task<Response<RoleAssignment>> GetIfExistsAsync(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.GetAsync(Id, roleAssignmentName, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleAssignmentName, tenantId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleAssignmentName, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleAssignmentName, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all role assignments that apply to a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleAssignment> GetAll(string filter = null, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == Subscription.ResourceType)
            {
                Page<RoleAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForSubscription(Id.SubscriptionId, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<RoleAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForSubscriptionNextPage(nextLink, Id.SubscriptionId, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == ResourceGroup.ResourceType)
            {
                Page<RoleAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<RoleAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == "")
            {
                Page<RoleAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForScope(Id, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<RoleAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForScopeNextPage(nextLink, Id, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else
            {
                Page<RoleAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForResource(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.ResourceType.Types.Last(), Id.Name, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<RoleAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _roleAssignmentsRestClient.ListForResourceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.ResourceType.Types.Last(), Id.Name, filter, tenantId, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
        }

        /// <summary> List all role assignments that apply to a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleAssignment> GetAllAsync(string filter = null, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == Subscription.ResourceType)
            {
                async Task<Page<RoleAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForSubscriptionAsync(Id.SubscriptionId, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<RoleAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForSubscriptionNextPageAsync(nextLink, Id.SubscriptionId, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == ResourceGroup.ResourceType)
            {
                async Task<Page<RoleAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<RoleAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == "")
            {
                async Task<Page<RoleAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForScopeAsync(Id, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<RoleAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForScopeNextPageAsync(nextLink, Id, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else
            {
                async Task<Page<RoleAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForResourceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.ResourceType.Types.Last(), Id.Name, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<RoleAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("RoleAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _roleAssignmentsRestClient.ListForResourceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.ResourceType.Types.Last(), Id.Name, filter, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new RoleAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
        }

        IEnumerator<RoleAssignment> IEnumerable<RoleAssignment>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleAssignment> IAsyncEnumerable<RoleAssignment>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleAssignment, RoleAssignmentData> Construct() { }
    }
}
