// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> This read-only field specifies the status of an access review instance. </summary>
    public readonly partial struct AccessReviewInstanceStatus : IEquatable<AccessReviewInstanceStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessReviewInstanceStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessReviewInstanceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string InProgressValue = "InProgress";
        private const string CompletedValue = "Completed";
        private const string AppliedValue = "Applied";
        private const string InitializingValue = "Initializing";
        private const string ApplyingValue = "Applying";
        private const string CompletingValue = "Completing";
        private const string ScheduledValue = "Scheduled";
        private const string AutoReviewingValue = "AutoReviewing";
        private const string AutoReviewedValue = "AutoReviewed";
        private const string StartingValue = "Starting";

        /// <summary> NotStarted. </summary>
        public static AccessReviewInstanceStatus NotStarted { get; } = new AccessReviewInstanceStatus(NotStartedValue);
        /// <summary> InProgress. </summary>
        public static AccessReviewInstanceStatus InProgress { get; } = new AccessReviewInstanceStatus(InProgressValue);
        /// <summary> Completed. </summary>
        public static AccessReviewInstanceStatus Completed { get; } = new AccessReviewInstanceStatus(CompletedValue);
        /// <summary> Applied. </summary>
        public static AccessReviewInstanceStatus Applied { get; } = new AccessReviewInstanceStatus(AppliedValue);
        /// <summary> Initializing. </summary>
        public static AccessReviewInstanceStatus Initializing { get; } = new AccessReviewInstanceStatus(InitializingValue);
        /// <summary> Applying. </summary>
        public static AccessReviewInstanceStatus Applying { get; } = new AccessReviewInstanceStatus(ApplyingValue);
        /// <summary> Completing. </summary>
        public static AccessReviewInstanceStatus Completing { get; } = new AccessReviewInstanceStatus(CompletingValue);
        /// <summary> Scheduled. </summary>
        public static AccessReviewInstanceStatus Scheduled { get; } = new AccessReviewInstanceStatus(ScheduledValue);
        /// <summary> AutoReviewing. </summary>
        public static AccessReviewInstanceStatus AutoReviewing { get; } = new AccessReviewInstanceStatus(AutoReviewingValue);
        /// <summary> AutoReviewed. </summary>
        public static AccessReviewInstanceStatus AutoReviewed { get; } = new AccessReviewInstanceStatus(AutoReviewedValue);
        /// <summary> Starting. </summary>
        public static AccessReviewInstanceStatus Starting { get; } = new AccessReviewInstanceStatus(StartingValue);
        /// <summary> Determines if two <see cref="AccessReviewInstanceStatus"/> values are the same. </summary>
        public static bool operator ==(AccessReviewInstanceStatus left, AccessReviewInstanceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessReviewInstanceStatus"/> values are not the same. </summary>
        public static bool operator !=(AccessReviewInstanceStatus left, AccessReviewInstanceStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessReviewInstanceStatus"/>. </summary>
        public static implicit operator AccessReviewInstanceStatus(string value) => new AccessReviewInstanceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessReviewInstanceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessReviewInstanceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
