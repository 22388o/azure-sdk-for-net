// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of AccessReviewInstance and their operations over its parent. </summary>
    public partial class AccessReviewScheduleDefinitionInstanceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AccessReviewInstancesAssignedForMyApprovalRestOperations _accessReviewInstancesAssignedForMyApprovalRestClient;

        /// <summary> Initializes a new instance of the <see cref="AccessReviewScheduleDefinitionInstanceCollection"/> class for mocking. </summary>
        protected AccessReviewScheduleDefinitionInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of AccessReviewScheduleDefinitionInstanceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AccessReviewScheduleDefinitionInstanceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _accessReviewInstancesAssignedForMyApprovalRestClient = new AccessReviewInstancesAssignedForMyApprovalRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Tenant.ResourceType;

        // Collection level operations.

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// ContextualPath: /
        /// OperationId: AccessReviewInstancesAssignedForMyApproval_GetById
        /// <summary> Get single access review instance assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<AccessReviewScheduleDefinitionInstance> Get(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _accessReviewInstancesAssignedForMyApprovalRestClient.GetById(scheduleDefinitionId, id, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessReviewScheduleDefinitionInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// ContextualPath: /
        /// OperationId: AccessReviewInstancesAssignedForMyApproval_GetById
        /// <summary> Get single access review instance assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<AccessReviewScheduleDefinitionInstance>> GetAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.GetByIdAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AccessReviewScheduleDefinitionInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<AccessReviewScheduleDefinitionInstance> GetIfExists(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _accessReviewInstancesAssignedForMyApprovalRestClient.GetById(scheduleDefinitionId, id, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<AccessReviewScheduleDefinitionInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessReviewScheduleDefinitionInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<AccessReviewScheduleDefinitionInstance>> GetIfExistsAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.GetByIdAsync(scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<AccessReviewScheduleDefinitionInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessReviewScheduleDefinitionInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(scheduleDefinitionId, id, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances
        /// ContextualPath: /
        /// OperationId: AccessReviewInstancesAssignedForMyApproval_List
        /// <summary> Get access review instances assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessReviewScheduleDefinitionInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessReviewScheduleDefinitionInstance> GetAll(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }

            Page<AccessReviewScheduleDefinitionInstance> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstancesAssignedForMyApprovalRestClient.List(scheduleDefinitionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessReviewScheduleDefinitionInstance> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstancesAssignedForMyApprovalRestClient.ListNextPage(nextLink, scheduleDefinitionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances
        /// ContextualPath: /
        /// OperationId: AccessReviewInstancesAssignedForMyApproval_List
        /// <summary> Get access review instances assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessReviewScheduleDefinitionInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessReviewScheduleDefinitionInstance> GetAllAsync(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }

            async Task<Page<AccessReviewScheduleDefinitionInstance>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.ListAsync(scheduleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessReviewScheduleDefinitionInstance>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.ListNextPageAsync(nextLink, scheduleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, AccessReviewScheduleDefinitionInstance, AccessReviewInstanceData> Construct() { }
    }
}
