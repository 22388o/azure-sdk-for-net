// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of AccessReviewInstance and their operations over its parent. </summary>
    public partial class TenantAccessReviewScheduleDefinitionInstanceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AccessReviewInstancesAssignedForMyApprovalRestOperations _accessReviewInstancesAssignedForMyApprovalRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantAccessReviewScheduleDefinitionInstanceCollection"/> class for mocking. </summary>
        protected TenantAccessReviewScheduleDefinitionInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of TenantAccessReviewScheduleDefinitionInstanceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal TenantAccessReviewScheduleDefinitionInstanceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _accessReviewInstancesAssignedForMyApprovalRestClient = new AccessReviewInstancesAssignedForMyApprovalRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Tenant.ResourceType;

        // Collection level operations.

        /// <summary> Get single access review instance assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<TenantAccessReviewScheduleDefinitionInstance> Get(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _accessReviewInstancesAssignedForMyApprovalRestClient.GetById(scheduleDefinitionId, id, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TenantAccessReviewScheduleDefinitionInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get single access review instance assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<TenantAccessReviewScheduleDefinitionInstance>> GetAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.GetByIdAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new TenantAccessReviewScheduleDefinitionInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<TenantAccessReviewScheduleDefinitionInstance> GetIfExists(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _accessReviewInstancesAssignedForMyApprovalRestClient.GetById(scheduleDefinitionId, id, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<TenantAccessReviewScheduleDefinitionInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new TenantAccessReviewScheduleDefinitionInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<TenantAccessReviewScheduleDefinitionInstance>> GetIfExistsAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.GetByIdAsync(scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<TenantAccessReviewScheduleDefinitionInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new TenantAccessReviewScheduleDefinitionInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(scheduleDefinitionId, id, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get access review instances assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TenantAccessReviewScheduleDefinitionInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TenantAccessReviewScheduleDefinitionInstance> GetAll(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }

            Page<TenantAccessReviewScheduleDefinitionInstance> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstancesAssignedForMyApprovalRestClient.List(scheduleDefinitionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantAccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TenantAccessReviewScheduleDefinitionInstance> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstancesAssignedForMyApprovalRestClient.ListNextPage(nextLink, scheduleDefinitionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantAccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get access review instances assigned for my approval. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TenantAccessReviewScheduleDefinitionInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TenantAccessReviewScheduleDefinitionInstance> GetAllAsync(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }

            async Task<Page<TenantAccessReviewScheduleDefinitionInstance>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.ListAsync(scheduleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantAccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TenantAccessReviewScheduleDefinitionInstance>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TenantAccessReviewScheduleDefinitionInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstancesAssignedForMyApprovalRestClient.ListNextPageAsync(nextLink, scheduleDefinitionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantAccessReviewScheduleDefinitionInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, TenantAccessReviewScheduleDefinitionInstance, AccessReviewInstanceData> Construct() { }
    }
}
