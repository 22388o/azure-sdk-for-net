// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleAssignmentScheduleInstance and their operations over its parent. </summary>
    public partial class RoleAssignmentScheduleInstanceCollection : ArmCollection, IEnumerable<RoleAssignmentScheduleInstance>, IAsyncEnumerable<RoleAssignmentScheduleInstance>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleAssignmentScheduleInstancesRestOperations _roleAssignmentScheduleInstancesRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentScheduleInstanceCollection"/> class for mocking. </summary>
        protected RoleAssignmentScheduleInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentScheduleInstanceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleAssignmentScheduleInstanceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleAssignmentScheduleInstancesRestClient = new RoleAssignmentScheduleInstancesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleAssignmentScheduleInstances_Get
        /// <summary> Gets the specified role assignment schedule instance. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public virtual Response<RoleAssignmentScheduleInstance> Get(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _roleAssignmentScheduleInstancesRestClient.Get(Id, roleAssignmentScheduleInstanceName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentScheduleInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}
        /// ContextualPath: /{scope}
        /// OperationId: RoleAssignmentScheduleInstances_Get
        /// <summary> Gets the specified role assignment schedule instance. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public async virtual Task<Response<RoleAssignmentScheduleInstance>> GetAsync(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleAssignmentScheduleInstancesRestClient.GetAsync(Id, roleAssignmentScheduleInstanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleAssignmentScheduleInstance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public virtual Response<RoleAssignmentScheduleInstance> GetIfExists(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleAssignmentScheduleInstancesRestClient.Get(Id, roleAssignmentScheduleInstanceName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleAssignmentScheduleInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignmentScheduleInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public async virtual Task<Response<RoleAssignmentScheduleInstance>> GetIfExistsAsync(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleAssignmentScheduleInstancesRestClient.GetAsync(Id, roleAssignmentScheduleInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleAssignmentScheduleInstance>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignmentScheduleInstance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleAssignmentScheduleInstanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentScheduleInstanceName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string roleAssignmentScheduleInstanceName, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentScheduleInstanceName == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentScheduleInstanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleAssignmentScheduleInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances
        /// ContextualPath: /{scope}
        /// OperationId: RoleAssignmentScheduleInstances_ListForScope
        /// <summary> Gets role assignment schedule instances of a role assignment schedule. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal.  Use $filter=assignedTo(&apos;{userId}&apos;) to return all role assignment schedule instances for the user. Use $filter=asTarget() to return all role assignment schedule instances created for the current user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RoleAssignmentScheduleInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RoleAssignmentScheduleInstance> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<RoleAssignmentScheduleInstance> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleAssignmentScheduleInstancesRestClient.ListForScope(Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleAssignmentScheduleInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RoleAssignmentScheduleInstance> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _roleAssignmentScheduleInstancesRestClient.ListForScopeNextPage(nextLink, Id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleAssignmentScheduleInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances
        /// ContextualPath: /{scope}
        /// OperationId: RoleAssignmentScheduleInstances_ListForScope
        /// <summary> Gets role assignment schedule instances of a role assignment schedule. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal.  Use $filter=assignedTo(&apos;{userId}&apos;) to return all role assignment schedule instances for the user. Use $filter=asTarget() to return all role assignment schedule instances created for the current user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RoleAssignmentScheduleInstance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RoleAssignmentScheduleInstance> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<RoleAssignmentScheduleInstance>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleAssignmentScheduleInstancesRestClient.ListForScopeAsync(Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleAssignmentScheduleInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RoleAssignmentScheduleInstance>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RoleAssignmentScheduleInstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _roleAssignmentScheduleInstancesRestClient.ListForScopeNextPageAsync(nextLink, Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RoleAssignmentScheduleInstance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<RoleAssignmentScheduleInstance> IEnumerable<RoleAssignmentScheduleInstance>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<RoleAssignmentScheduleInstance> IAsyncEnumerable<RoleAssignmentScheduleInstance>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleAssignmentScheduleInstance, RoleAssignmentScheduleInstanceData> Construct() { }
    }
}
