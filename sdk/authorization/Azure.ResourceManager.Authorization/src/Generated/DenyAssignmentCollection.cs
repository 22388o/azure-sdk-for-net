// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of DenyAssignment and their operations over its parent. </summary>
    public partial class DenyAssignmentCollection : ArmCollection, IEnumerable<DenyAssignment>, IAsyncEnumerable<DenyAssignment>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DenyAssignmentsRestOperations _denyAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DenyAssignmentCollection"/> class for mocking. </summary>
        protected DenyAssignmentCollection()
        {
        }

        /// <summary> Initializes a new instance of DenyAssignmentCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DenyAssignmentCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _denyAssignmentsRestClient = new DenyAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
        /// ContextualPath: /{scope}
        /// OperationId: DenyAssignments_Get
        /// <summary> Get the specified deny assignment. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<DenyAssignment> Get(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = _denyAssignmentsRestClient.Get(Id, denyAssignmentId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DenyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
        /// ContextualPath: /{scope}
        /// OperationId: DenyAssignments_Get
        /// <summary> Get the specified deny assignment. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<DenyAssignment>> GetAsync(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _denyAssignmentsRestClient.GetAsync(Id, denyAssignmentId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DenyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<DenyAssignment> GetIfExists(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _denyAssignmentsRestClient.Get(Id, denyAssignmentId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<DenyAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new DenyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<DenyAssignment>> GetIfExistsAsync(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _denyAssignmentsRestClient.GetAsync(Id, denyAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<DenyAssignment>(null, response.GetRawResponse())
                    : Response.FromValue(new DenyAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(denyAssignmentId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(denyAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
        /// OperationId: DenyAssignments_ListForResource
        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DenyAssignments_ListForResourceGroup
        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DenyAssignments_List
        /// RequestPath: /{scope}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /{scope}
        /// OperationId: DenyAssignments_ListForScope
        /// <summary> Gets deny assignments for a resource. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq &apos;{name}&apos; to search deny assignments by name at specified scope. Use $filter=principalId eq &apos;{id}&apos; to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq &apos;{id}&apos; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DenyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DenyAssignment> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == ResourceGroup.ResourceType)
            {
                Page<DenyAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<DenyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == Subscription.ResourceType)
            {
                Page<DenyAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.List(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<DenyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == "")
            {
                Page<DenyAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForScope(Id, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<DenyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForScopeNextPage(nextLink, Id, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            else
            {
                Page<DenyAssignment> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForResource(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.SubstringAfterProviderNamespace(), Id.ResourceType.Types.Last(), Id.Name, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<DenyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = _denyAssignmentsRestClient.ListForResourceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.SubstringAfterProviderNamespace(), Id.ResourceType.Types.Last(), Id.Name, filter, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
        /// OperationId: DenyAssignments_ListForResource
        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DenyAssignments_ListForResourceGroup
        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DenyAssignments_List
        /// RequestPath: /{scope}/providers/Microsoft.Authorization/denyAssignments
        /// ContextualPath: /{scope}
        /// OperationId: DenyAssignments_ListForScope
        /// <summary> Gets deny assignments for a resource. </summary>
        /// <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq &apos;{name}&apos; to search deny assignments by name at specified scope. Use $filter=principalId eq &apos;{id}&apos; to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq &apos;{id}&apos; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DenyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DenyAssignment> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == ResourceGroup.ResourceType)
            {
                async Task<Page<DenyAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<DenyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == Subscription.ResourceType)
            {
                async Task<Page<DenyAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<DenyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else if (Id.ResourceType == "")
            {
                async Task<Page<DenyAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForScopeAsync(Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<DenyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForScopeNextPageAsync(nextLink, Id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            else
            {
                async Task<Page<DenyAssignment>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForResourceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.SubstringAfterProviderNamespace(), Id.ResourceType.Types.Last(), Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<DenyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = _clientDiagnostics.CreateScope("DenyAssignmentCollection.GetAll");
                    scope.Start();
                    try
                    {
                        var response = await _denyAssignmentsRestClient.ListForResourceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.SubstringAfterProviderNamespace(), Id.ResourceType.Types.Last(), Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new DenyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
        }

        IEnumerator<DenyAssignment> IEnumerable<DenyAssignment>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DenyAssignment> IAsyncEnumerable<DenyAssignment>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, DenyAssignment, DenyAssignmentData> Construct() { }
    }
}
