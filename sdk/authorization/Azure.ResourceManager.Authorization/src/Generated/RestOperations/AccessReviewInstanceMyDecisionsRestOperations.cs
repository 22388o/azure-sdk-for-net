// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    internal partial class AccessReviewInstanceMyDecisionsRestOperations
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of AccessReviewInstanceMyDecisionsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccessReviewInstanceMyDecisionsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateListRequest(string scheduleDefinitionId, string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions", false);
            uri.AppendQuery("api-version", "2018-05-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public async Task<Response<AccessReviewDecisionListResult>> ListAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRequest(scheduleDefinitionId, id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public Response<AccessReviewDecisionListResult> List(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRequest(scheduleDefinitionId, id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetByIdRequest(string scheduleDefinitionId, string id, string decisionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions/", false);
            uri.AppendPath(decisionId, true);
            uri.AppendQuery("api-version", "2018-05-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, or <paramref name="decisionId"/> is null. </exception>
        public async Task<Response<AccessReviewDecisionData>> GetByIdAsync(string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var message = CreateGetByIdRequest(scheduleDefinitionId, id, decisionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AccessReviewDecisionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, or <paramref name="decisionId"/> is null. </exception>
        public Response<AccessReviewDecisionData> GetById(string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var message = CreateGetByIdRequest(scheduleDefinitionId, id, decisionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AccessReviewDecisionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchRequest(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionProperties properties)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions/", false);
            uri.AppendPath(decisionId, true);
            uri.AppendQuery("api-version", "2018-05-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(properties);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Record a decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="properties"> Access review decision properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, <paramref name="decisionId"/>, or <paramref name="properties"/> is null. </exception>
        public async Task<Response<AccessReviewDecisionData>> PatchAsync(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionProperties properties, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }
            if (properties == null)
            {
                throw new ArgumentNullException(nameof(properties));
            }

            using var message = CreatePatchRequest(scheduleDefinitionId, id, decisionId, properties);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Record a decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="properties"> Access review decision properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, <paramref name="decisionId"/>, or <paramref name="properties"/> is null. </exception>
        public Response<AccessReviewDecisionData> Patch(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionProperties properties, CancellationToken cancellationToken = default)
        {
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }
            if (properties == null)
            {
                throw new ArgumentNullException(nameof(properties));
            }

            using var message = CreatePatchRequest(scheduleDefinitionId, id, decisionId, properties);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string scheduleDefinitionId, string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scheduleDefinitionId"/>, or <paramref name="id"/> is null. </exception>
        public async Task<Response<AccessReviewDecisionListResult>> ListNextPageAsync(string nextLink, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListNextPageRequest(nextLink, scheduleDefinitionId, id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scheduleDefinitionId"/>, or <paramref name="id"/> is null. </exception>
        public Response<AccessReviewDecisionListResult> ListNextPage(string nextLink, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (scheduleDefinitionId == null)
            {
                throw new ArgumentNullException(nameof(scheduleDefinitionId));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListNextPageRequest(nextLink, scheduleDefinitionId, id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
