// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of AccessReviewDecision and their operations over its parent. </summary>
    public partial class AccessReviewDecisionCollection : ArmCollection, IEnumerable<AccessReviewDecision>, IAsyncEnumerable<AccessReviewDecision>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AccessReviewInstanceMyDecisionsRestOperations _accessReviewInstanceMyDecisionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AccessReviewDecisionCollection"/> class for mocking. </summary>
        protected AccessReviewDecisionCollection()
        {
        }

        /// <summary> Initializes a new instance of AccessReviewDecisionCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AccessReviewDecisionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _accessReviewInstanceMyDecisionsRestClient = new AccessReviewInstanceMyDecisionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => "Microsoft.Authorization/accessReviewScheduleDefinitions/instances";

        // Collection level operations.

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// ContextualPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// OperationId: AccessReviewInstanceMyDecisions_GetById
        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual Response<AccessReviewDecision> Get(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.Get");
            scope.Start();
            try
            {
                var response = _accessReviewInstanceMyDecisionsRestClient.GetById(Id.Parent.Name, Id.Name, decisionId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessReviewDecision(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// ContextualPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// OperationId: AccessReviewInstanceMyDecisions_GetById
        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public async virtual Task<Response<AccessReviewDecision>> GetAsync(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.Get");
            scope.Start();
            try
            {
                var response = await _accessReviewInstanceMyDecisionsRestClient.GetByIdAsync(Id.Parent.Name, Id.Name, decisionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AccessReviewDecision(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual Response<AccessReviewDecision> GetIfExists(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _accessReviewInstanceMyDecisionsRestClient.GetById(Id.Parent.Name, Id.Name, decisionId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<AccessReviewDecision>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessReviewDecision(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public async virtual Task<Response<AccessReviewDecision>> GetIfExistsAsync(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _accessReviewInstanceMyDecisionsRestClient.GetByIdAsync(Id.Parent.Name, Id.Name, decisionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<AccessReviewDecision>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessReviewDecision(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(decisionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string decisionId, CancellationToken cancellationToken = default)
        {
            if (decisionId == null)
            {
                throw new ArgumentNullException(nameof(decisionId));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(decisionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions
        /// ContextualPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// OperationId: AccessReviewInstanceMyDecisions_List
        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessReviewDecision" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessReviewDecision> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AccessReviewDecision> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstanceMyDecisionsRestClient.List(Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecision(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessReviewDecision> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewInstanceMyDecisionsRestClient.ListNextPage(nextLink, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecision(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions
        /// ContextualPath: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}
        /// OperationId: AccessReviewInstanceMyDecisions_List
        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessReviewDecision" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessReviewDecision> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AccessReviewDecision>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstanceMyDecisionsRestClient.ListAsync(Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecision(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessReviewDecision>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewInstanceMyDecisionsRestClient.ListNextPageAsync(nextLink, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecision(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<AccessReviewDecision> IEnumerable<AccessReviewDecision>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AccessReviewDecision> IAsyncEnumerable<AccessReviewDecision>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, AccessReviewDecision, AccessReviewDecisionData> Construct() { }
    }
}
