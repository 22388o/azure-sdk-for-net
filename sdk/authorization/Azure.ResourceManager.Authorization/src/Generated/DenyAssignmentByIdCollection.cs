// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of DenyAssignment and their operations over its parent. </summary>
    public partial class DenyAssignmentByIdCollection : ArmCollection
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DenyAssignmentsRestOperations _denyAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DenyAssignmentByIdCollection"/> class for mocking. </summary>
        protected DenyAssignmentByIdCollection()
        {
        }

        /// <summary> Initializes a new instance of DenyAssignmentByIdCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DenyAssignmentByIdCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _denyAssignmentsRestClient = new DenyAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Tenant.ResourceType;

        // Collection level operations.

        /// <summary> Gets a deny assignment by ID. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<DenyAssignmentById> Get(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = _denyAssignmentsRestClient.GetById(denyAssignmentId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DenyAssignmentById(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deny assignment by ID. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<DenyAssignmentById>> GetAsync(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = await _denyAssignmentsRestClient.GetByIdAsync(denyAssignmentId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DenyAssignmentById(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<DenyAssignmentById> GetIfExists(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _denyAssignmentsRestClient.GetById(denyAssignmentId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<DenyAssignmentById>(null, response.GetRawResponse())
                    : Response.FromValue(new DenyAssignmentById(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<DenyAssignmentById>> GetIfExistsAsync(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _denyAssignmentsRestClient.GetByIdAsync(denyAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<DenyAssignmentById>(null, response.GetRawResponse())
                    : Response.FromValue(new DenyAssignmentById(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(denyAssignmentId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="denyAssignmentId"> The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="denyAssignmentId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(ResourceIdentifier denyAssignmentId, CancellationToken cancellationToken = default)
        {
            if (denyAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(denyAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("DenyAssignmentByIdCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(denyAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, DenyAssignmentById, DenyAssignmentData> Construct() { }
    }
}
