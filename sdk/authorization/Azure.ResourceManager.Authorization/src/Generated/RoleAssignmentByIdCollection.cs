// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing collection of RoleAssignment and their operations over its parent. </summary>
    public partial class RoleAssignmentByIdCollection : ArmCollection
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RoleAssignmentsRestOperations _roleAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentByIdCollection"/> class for mocking. </summary>
        protected RoleAssignmentByIdCollection()
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentByIdCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal RoleAssignmentByIdCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _roleAssignmentsRestClient = new RoleAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Tenant.ResourceType;

        // Collection level operations.

        /// <summary> Create or update a role assignment by ID. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="parameters"> Parameters for the role assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="parameters"/> is null. </exception>
        public virtual RoleAssignmentCreateByIdOperation CreateOrUpdate(ResourceIdentifier roleAssignmentId, RoleAssignmentCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.CreateById(roleAssignmentId, parameters, cancellationToken);
                var operation = new RoleAssignmentCreateByIdOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a role assignment by ID. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="parameters"> Parameters for the role assignment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<RoleAssignmentCreateByIdOperation> CreateOrUpdateAsync(ResourceIdentifier roleAssignmentId, RoleAssignmentCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.CreateByIdAsync(roleAssignmentId, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new RoleAssignmentCreateByIdOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a role assignment by ID. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual Response<RoleAssignmentById> Get(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.GetById(roleAssignmentId, tenantId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentById(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a role assignment by ID. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public async virtual Task<Response<RoleAssignmentById>> GetAsync(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.GetByIdAsync(roleAssignmentId, tenantId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new RoleAssignmentById(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual Response<RoleAssignmentById> GetIfExists(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _roleAssignmentsRestClient.GetById(roleAssignmentId, tenantId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<RoleAssignmentById>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignmentById(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public async virtual Task<Response<RoleAssignmentById>> GetIfExistsAsync(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _roleAssignmentsRestClient.GetByIdAsync(roleAssignmentId, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<RoleAssignmentById>(null, response.GetRawResponse())
                    : Response.FromValue(new RoleAssignmentById(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(roleAssignmentId, tenantId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;. </param>
        /// <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(ResourceIdentifier roleAssignmentId, string tenantId = null, CancellationToken cancellationToken = default)
        {
            if (roleAssignmentId == null)
            {
                throw new ArgumentNullException(nameof(roleAssignmentId));
            }

            using var scope = _clientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(roleAssignmentId, tenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, RoleAssignmentById, RoleAssignmentData> Construct() { }
    }
}
