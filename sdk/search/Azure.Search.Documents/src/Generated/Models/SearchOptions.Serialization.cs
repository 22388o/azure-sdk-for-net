// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Search.Documents.Models;

namespace Azure.Search.Documents
{
    public partial class SearchOptions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IncludeTotalCount))
            {
                writer.WritePropertyName("count");
                writer.WriteBooleanValue(IncludeTotalCount.Value);
            }
            if (Optional.IsCollectionDefined(Facets))
            {
                writer.WritePropertyName("facets");
                writer.WriteStartArray();
                foreach (var item in Facets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsDefined(HighlightFieldsRaw))
            {
                writer.WritePropertyName("highlight");
                writer.WriteStringValue(HighlightFieldsRaw);
            }
            if (Optional.IsDefined(HighlightPostTag))
            {
                writer.WritePropertyName("highlightPostTag");
                writer.WriteStringValue(HighlightPostTag);
            }
            if (Optional.IsDefined(HighlightPreTag))
            {
                writer.WritePropertyName("highlightPreTag");
                writer.WriteStringValue(HighlightPreTag);
            }
            if (Optional.IsDefined(MinimumCoverage))
            {
                writer.WritePropertyName("minimumCoverage");
                writer.WriteNumberValue(MinimumCoverage.Value);
            }
            if (Optional.IsCollectionDefined(OrderBy))
            {
                writer.WritePropertyName("orderby");
                writer.(OrderBy);
            }
            if (Optional.IsDefined(QueryType))
            {
                writer.WritePropertyName("queryType");
                writer.WriteStringValue(QueryType.Value.ToSerialString());
            }
            if (Optional.IsDefined(ScoringStatistics))
            {
                writer.WritePropertyName("scoringStatistics");
                writer.WriteStringValue(ScoringStatistics.Value.ToSerialString());
            }
            if (Optional.IsDefined(SessionId))
            {
                writer.WritePropertyName("sessionId");
                writer.WriteStringValue(SessionId);
            }
            if (Optional.IsCollectionDefined(ScoringParameters))
            {
                writer.WritePropertyName("scoringParameters");
                writer.WriteStartArray();
                foreach (var item in ScoringParameters)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScoringProfile))
            {
                writer.WritePropertyName("scoringProfile");
                writer.WriteStringValue(ScoringProfile);
            }
            if (Optional.IsDefined(SemanticConfiguration))
            {
                writer.WritePropertyName("semanticConfiguration");
                writer.WriteStringValue(SemanticConfiguration);
            }
            if (Optional.IsDefined(SearchText))
            {
                writer.WritePropertyName("search");
                writer.WriteStringValue(SearchText);
            }
            if (Optional.IsCollectionDefined(SearchFields))
            {
                writer.WritePropertyName("searchFields");
                writer.(SearchFields);
            }
            if (Optional.IsDefined(SearchMode))
            {
                writer.WritePropertyName("searchMode");
                writer.WriteStringValue(SearchMode.Value.ToSerialString());
            }
            if (Optional.IsDefined(QueryLanguage))
            {
                writer.WritePropertyName("queryLanguage");
                writer.WriteStringValue(QueryLanguage.Value.ToString());
            }
            if (Optional.IsDefined(Speller))
            {
                writer.WritePropertyName("speller");
                writer.WriteStringValue(Speller.Value.ToString());
            }
            if (Optional.IsDefined(Answers))
            {
                writer.WritePropertyName("answers");
                writer.WriteStringValue(Answers.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Select))
            {
                writer.WritePropertyName("select");
                writer.(Select);
            }
            if (Optional.IsDefined(Skip))
            {
                writer.WritePropertyName("skip");
                writer.WriteNumberValue(Skip.Value);
            }
            if (Optional.IsDefined(Top))
            {
                writer.WritePropertyName("top");
                writer.WriteNumberValue(Top.Value);
            }
            if (Optional.IsDefined(Captions))
            {
                writer.WritePropertyName("captions");
                writer.WriteStringValue(Captions.Value.ToString());
            }
            if (Optional.IsCollectionDefined(SemanticFields))
            {
                writer.WritePropertyName("semanticFields");
                writer.(SemanticFields);
            }
            writer.WriteEndObject();
        }

        internal static SearchOptions DeserializeSearchOptions(JsonElement element)
        {
            Optional<bool> count = default;
            Optional<IList<string>> facets = default;
            Optional<string> filter = default;
            Optional<string> highlight = default;
            Optional<string> highlightPostTag = default;
            Optional<string> highlightPreTag = default;
            Optional<double> minimumCoverage = default;
            Optional<IList<string>> orderby = default;
            Optional<SearchQueryType> queryType = default;
            Optional<ScoringStatistics> scoringStatistics = default;
            Optional<string> sessionId = default;
            Optional<IList<string>> scoringParameters = default;
            Optional<string> scoringProfile = default;
            Optional<string> semanticConfiguration = default;
            Optional<string> search = default;
            Optional<IList<string>> searchFields = default;
            Optional<SearchMode> searchMode = default;
            Optional<QueryLanguage> queryLanguage = default;
            Optional<QuerySpellerType> speller = default;
            Optional<QueryAnswerType> answers = default;
            Optional<IList<string>> select = default;
            Optional<int> skip = default;
            Optional<int> top = default;
            Optional<QueryCaptionType> captions = default;
            Optional<IList<string>> semanticFields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("count"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    count = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    facets = array;
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlight"))
                {
                    highlight = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPostTag"))
                {
                    highlightPostTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPreTag"))
                {
                    highlightPreTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumCoverage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minimumCoverage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("orderby"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    orderby = property.Value.();
                    continue;
                }
                if (property.NameEquals("queryType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queryType = property.Value.GetString().ToSearchQueryType();
                    continue;
                }
                if (property.NameEquals("scoringStatistics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scoringStatistics = property.Value.GetString().ToScoringStatistics();
                    continue;
                }
                if (property.NameEquals("sessionId"))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scoringParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    scoringParameters = array;
                    continue;
                }
                if (property.NameEquals("scoringProfile"))
                {
                    scoringProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("semanticConfiguration"))
                {
                    semanticConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("search"))
                {
                    search = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchFields"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchFields = property.Value.();
                    continue;
                }
                if (property.NameEquals("searchMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchMode = property.Value.GetString().ToSearchMode();
                    continue;
                }
                if (property.NameEquals("queryLanguage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queryLanguage = new QueryLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("speller"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    speller = new QuerySpellerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("answers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    answers = new QueryAnswerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("select"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    select = property.Value.();
                    continue;
                }
                if (property.NameEquals("skip"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    skip = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("top"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    top = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("captions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    captions = new QueryCaptionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("semanticFields"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    semanticFields = property.Value.();
                    continue;
                }
            }
            return new SearchOptions(Optional.ToNullable(count), Optional.ToList(facets), filter.Value, highlight.Value, highlightPostTag.Value, highlightPreTag.Value, Optional.ToNullable(minimumCoverage), Optional.ToList(orderby), Optional.ToNullable(queryType), Optional.ToNullable(scoringStatistics), sessionId.Value, Optional.ToList(scoringParameters), scoringProfile.Value, semanticConfiguration.Value, search.Value, Optional.ToList(searchFields), Optional.ToNullable(searchMode), Optional.ToNullable(queryLanguage), Optional.ToNullable(speller), Optional.ToNullable(answers), Optional.ToList(select), Optional.ToNullable(skip), Optional.ToNullable(top), Optional.ToNullable(captions), Optional.ToList(semanticFields));
        }
    }
}
