// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> Send test notifications to a set of provided receivers. </summary>
    public partial class ActionGroupPostTestNotificationsOperation : Operation<TestNotificationResponse>, IOperationSource<TestNotificationResponse>
    {
        private readonly OperationInternals<TestNotificationResponse> _operation;

        /// <summary> Initializes a new instance of ActionGroupPostTestNotificationsOperation for mocking. </summary>
        protected ActionGroupPostTestNotificationsOperation()
        {
        }

        internal ActionGroupPostTestNotificationsOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Azure.Response response)
        {
            _operation = new OperationInternals<TestNotificationResponse>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "ActionGroupPostTestNotificationsOperation");
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override TestNotificationResponse Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Azure.Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Azure.Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Azure.Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<TestNotificationResponse>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<TestNotificationResponse>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        TestNotificationResponse IOperationSource<TestNotificationResponse>.CreateResult(Azure.Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return TestNotificationResponse.DeserializeTestNotificationResponse(document.RootElement);
        }

        async ValueTask<TestNotificationResponse> IOperationSource<TestNotificationResponse>.CreateResultAsync(Azure.Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return TestNotificationResponse.DeserializeTestNotificationResponse(document.RootElement);
        }
    }
}
