// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Monitor.Models;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class representing collection of DataCollectionRuleAssociationProxyOnlyResource and their operations over its parent. </summary>
    public partial class DataCollectionRuleAssociationProxyOnlyResourceCollection : ArmCollection, IEnumerable<DataCollectionRuleAssociationProxyOnlyResource>, IAsyncEnumerable<DataCollectionRuleAssociationProxyOnlyResource>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DataCollectionRuleAssociationsRestOperations _dataCollectionRuleAssociationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DataCollectionRuleAssociationProxyOnlyResourceCollection"/> class for mocking. </summary>
        protected DataCollectionRuleAssociationProxyOnlyResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of DataCollectionRuleAssociationProxyOnlyResourceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DataCollectionRuleAssociationProxyOnlyResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _dataCollectionRuleAssociationsRestClient = new DataCollectionRuleAssociationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.Root.ResourceType;

        /// <summary> Verify that the input resource Id is a valid collection for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void ValidateResourceType(ResourceIdentifier identifier)
        {
        }

        // Collection level operations.

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Create
        /// <summary> Creates or updates an association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="body"> The payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual DataCollectionRuleAssociationCreateOperation CreateOrUpdate(string associationName, DataCollectionRuleAssociationProxyOnlyResourceData body = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Create(Id, associationName, body, cancellationToken);
                var operation = new DataCollectionRuleAssociationCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Create
        /// <summary> Creates or updates an association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="body"> The payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<DataCollectionRuleAssociationCreateOperation> CreateOrUpdateAsync(string associationName, DataCollectionRuleAssociationProxyOnlyResourceData body = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.CreateAsync(Id, associationName, body, cancellationToken).ConfigureAwait(false);
                var operation = new DataCollectionRuleAssociationCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Get
        /// <summary> Returns the specified association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<DataCollectionRuleAssociationProxyOnlyResource> Get(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Get(Id, associationName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataCollectionRuleAssociationProxyOnlyResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Get
        /// <summary> Returns the specified association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<DataCollectionRuleAssociationProxyOnlyResource>> GetAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.GetAsync(Id, associationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DataCollectionRuleAssociationProxyOnlyResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<DataCollectionRuleAssociationProxyOnlyResource> GetIfExists(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Get(Id, associationName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<DataCollectionRuleAssociationProxyOnlyResource>(null, response.GetRawResponse())
                    : Response.FromValue(new DataCollectionRuleAssociationProxyOnlyResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<DataCollectionRuleAssociationProxyOnlyResource>> GetIfExistsAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.GetAsync(Id, associationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<DataCollectionRuleAssociationProxyOnlyResource>(null, response.GetRawResponse())
                    : Response.FromValue(new DataCollectionRuleAssociationProxyOnlyResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(associationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(associationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_ListByResource
        /// <summary> Lists associations for the specified resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionRuleAssociationProxyOnlyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataCollectionRuleAssociationProxyOnlyResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<DataCollectionRuleAssociationProxyOnlyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataCollectionRuleAssociationsRestClient.ListByResource(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociationProxyOnlyResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataCollectionRuleAssociationProxyOnlyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataCollectionRuleAssociationsRestClient.ListByResourceNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociationProxyOnlyResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_ListByResource
        /// <summary> Lists associations for the specified resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionRuleAssociationProxyOnlyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataCollectionRuleAssociationProxyOnlyResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DataCollectionRuleAssociationProxyOnlyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataCollectionRuleAssociationsRestClient.ListByResourceAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociationProxyOnlyResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataCollectionRuleAssociationProxyOnlyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationProxyOnlyResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataCollectionRuleAssociationsRestClient.ListByResourceNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociationProxyOnlyResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<DataCollectionRuleAssociationProxyOnlyResource> IEnumerable<DataCollectionRuleAssociationProxyOnlyResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DataCollectionRuleAssociationProxyOnlyResource> IAsyncEnumerable<DataCollectionRuleAssociationProxyOnlyResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, DataCollectionRuleAssociationProxyOnlyResource, DataCollectionRuleAssociationProxyOnlyResourceData> Construct() { }
    }
}
