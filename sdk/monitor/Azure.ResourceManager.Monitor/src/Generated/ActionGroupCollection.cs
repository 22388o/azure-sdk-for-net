// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class representing collection of ActionGroup and their operations over its parent. </summary>
    public partial class ActionGroupCollection : ArmCollection, IEnumerable<ActionGroup>, IAsyncEnumerable<ActionGroup>
    {
        private readonly ClientDiagnostics _actionGroupClientDiagnostics;
        private readonly ActionGroupsRestOperations _actionGroupRestClient;

        /// <summary> Initializes a new instance of the <see cref="ActionGroupCollection"/> class for mocking. </summary>
        protected ActionGroupCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ActionGroupCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ActionGroupCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _actionGroupClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Monitor", ActionGroup.ResourceType.Namespace, DiagnosticOptions);
            Client.TryGetApiVersion(ActionGroup.ResourceType, out string actionGroupApiVersion);
            _actionGroupRestClient = new ActionGroupsRestOperations(_actionGroupClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, actionGroupApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroup.ResourceType), nameof(id));
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_CreateOrUpdate
        /// <summary> Create a new action group or update an existing one. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="actionGroup"> The action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> or <paramref name="actionGroup"/> is null. </exception>
        public async virtual Task<ActionGroupCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string actionGroupName, ActionGroupData actionGroup, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));
            if (actionGroup == null)
            {
                throw new ArgumentNullException(nameof(actionGroup));
            }

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _actionGroupRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, actionGroup, cancellationToken).ConfigureAwait(false);
                var operation = new ActionGroupCreateOrUpdateOperation(Client, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_CreateOrUpdate
        /// <summary> Create a new action group or update an existing one. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="actionGroup"> The action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> or <paramref name="actionGroup"/> is null. </exception>
        public virtual ActionGroupCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string actionGroupName, ActionGroupData actionGroup, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));
            if (actionGroup == null)
            {
                throw new ArgumentNullException(nameof(actionGroup));
            }

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _actionGroupRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, actionGroup, cancellationToken);
                var operation = new ActionGroupCreateOrUpdateOperation(Client, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Get an action group. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public async virtual Task<Response<ActionGroup>> GetAsync(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.Get");
            scope.Start();
            try
            {
                var response = await _actionGroupRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _actionGroupClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ActionGroup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Get an action group. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public virtual Response<ActionGroup> Get(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.Get");
            scope.Start();
            try
            {
                var response = _actionGroupRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, cancellationToken);
                if (response.Value == null)
                    throw _actionGroupClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ActionGroup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_ListByResourceGroup
        /// <summary> Get a list of all action groups in a resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ActionGroup> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ActionGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _actionGroupRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ActionGroup(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_ListByResourceGroup
        /// <summary> Get a list of all action groups in a resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ActionGroup> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ActionGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _actionGroupRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ActionGroup(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(actionGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public virtual Response<bool> Exists(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(actionGroupName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public async virtual Task<Response<ActionGroup>> GetIfExistsAsync(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _actionGroupRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ActionGroup>(null, response.GetRawResponse());
                return Response.FromValue(new ActionGroup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: ActionGroups_Get
        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="actionGroupName"> The name of the action group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="actionGroupName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="actionGroupName"/> is null. </exception>
        public virtual Response<ActionGroup> GetIfExists(string actionGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(actionGroupName, nameof(actionGroupName));

            using var scope = _actionGroupClientDiagnostics.CreateScope("ActionGroupCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _actionGroupRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, actionGroupName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ActionGroup>(null, response.GetRawResponse());
                return Response.FromValue(new ActionGroup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ActionGroup> IEnumerable<ActionGroup>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ActionGroup> IAsyncEnumerable<ActionGroup>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
