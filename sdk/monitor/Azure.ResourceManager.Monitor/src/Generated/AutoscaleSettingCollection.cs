// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class representing collection of AutoscaleSetting and their operations over its parent. </summary>
    public partial class AutoscaleSettingCollection : ArmCollection, IEnumerable<AutoscaleSetting>, IAsyncEnumerable<AutoscaleSetting>
    {
        private readonly ClientDiagnostics _autoscaleSettingClientDiagnostics;
        private readonly AutoscaleSettingsRestOperations _autoscaleSettingRestClient;

        /// <summary> Initializes a new instance of the <see cref="AutoscaleSettingCollection"/> class for mocking. </summary>
        protected AutoscaleSettingCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AutoscaleSettingCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AutoscaleSettingCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _autoscaleSettingClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Monitor", AutoscaleSetting.ResourceType.Namespace, DiagnosticOptions);
            TryGetApiVersion(AutoscaleSetting.ResourceType, out string autoscaleSettingApiVersion);
            _autoscaleSettingRestClient = new AutoscaleSettingsRestOperations(_autoscaleSettingClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, autoscaleSettingApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroup.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates an autoscale setting.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_CreateOrUpdate
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ArmOperation<AutoscaleSetting>> CreateOrUpdateAsync(bool waitForCompletion, string autoscaleSettingName, AutoscaleSettingData parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _autoscaleSettingRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new MonitorArmOperation<AutoscaleSetting>(Response.FromValue(new AutoscaleSetting(Client, response), response.GetRawResponse()));
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an autoscale setting.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_CreateOrUpdate
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ArmOperation<AutoscaleSetting> CreateOrUpdate(bool waitForCompletion, string autoscaleSettingName, AutoscaleSettingData parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _autoscaleSettingRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, parameters, cancellationToken);
                var operation = new MonitorArmOperation<AutoscaleSetting>(Response.FromValue(new AutoscaleSetting(Client, response), response.GetRawResponse()));
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an autoscale setting
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public async virtual Task<Response<AutoscaleSetting>> GetAsync(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.Get");
            scope.Start();
            try
            {
                var response = await _autoscaleSettingRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _autoscaleSettingClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AutoscaleSetting(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an autoscale setting
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public virtual Response<AutoscaleSetting> Get(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.Get");
            scope.Start();
            try
            {
                var response = _autoscaleSettingRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, cancellationToken);
                if (response.Value == null)
                    throw _autoscaleSettingClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AutoscaleSetting(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the autoscale settings for a resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings
        /// Operation Id: AutoscaleSettings_ListByResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoscaleSetting> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AutoscaleSetting>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _autoscaleSettingRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutoscaleSetting>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _autoscaleSettingRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists the autoscale settings for a resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings
        /// Operation Id: AutoscaleSettings_ListByResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoscaleSetting> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AutoscaleSetting> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _autoscaleSettingRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutoscaleSetting> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _autoscaleSettingRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(autoscaleSettingName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public virtual Response<bool> Exists(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(autoscaleSettingName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public async virtual Task<Response<AutoscaleSetting>> GetIfExistsAsync(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _autoscaleSettingRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<AutoscaleSetting>(null, response.GetRawResponse());
                return Response.FromValue(new AutoscaleSetting(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}
        /// Operation Id: AutoscaleSettings_Get
        /// </summary>
        /// <param name="autoscaleSettingName"> The autoscale setting name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoscaleSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoscaleSettingName"/> is null. </exception>
        public virtual Response<AutoscaleSetting> GetIfExists(string autoscaleSettingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoscaleSettingName, nameof(autoscaleSettingName));

            using var scope = _autoscaleSettingClientDiagnostics.CreateScope("AutoscaleSettingCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _autoscaleSettingRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, autoscaleSettingName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<AutoscaleSetting>(null, response.GetRawResponse());
                return Response.FromValue(new AutoscaleSetting(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AutoscaleSetting> IEnumerable<AutoscaleSetting>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AutoscaleSetting> IAsyncEnumerable<AutoscaleSetting>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
