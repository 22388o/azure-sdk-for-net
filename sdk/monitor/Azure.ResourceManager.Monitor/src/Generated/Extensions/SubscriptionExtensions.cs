// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    public static partial class SubscriptionExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of LogProfiles in the LogProfile. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LogProfiles and their operations over a LogProfile. </returns>
        public static LogProfileCollection GetLogProfiles(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetLogProfiles();
        }

        /// <summary>
        /// Lists the autoscale settings for a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/autoscalesettings
        /// Operation Id: AutoscaleSettings_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AutoscaleSetting> GetAutoscaleSettingsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAutoscaleSettingsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists the autoscale settings for a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/autoscalesettings
        /// Operation Id: AutoscaleSettings_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AutoscaleSetting> GetAutoscaleSettings(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAutoscaleSettings(cancellationToken);
        }

        /// <summary>
        /// List the classic metric alert rules within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/alertrules
        /// Operation Id: AlertRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertRule" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AlertRule> GetAlertRulesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAlertRulesAsync(cancellationToken);
        }

        /// <summary>
        /// List the classic metric alert rules within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/alertrules
        /// Operation Id: AlertRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertRule" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AlertRule> GetAlertRules(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAlertRules(cancellationToken);
        }

        /// <summary>
        /// Send test notifications to a set of provided receivers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/createNotifications
        /// Operation Id: ActionGroups_PostTestNotifications
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="notificationRequest"> The notification request body which includes the contact details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="notificationRequest"/> is null. </exception>
        public async static Task<ArmOperation<TestNotificationResponse>> PostTestNotificationsActionGroupAsync(this Subscription subscription, bool waitForCompletion, NotificationRequestBody notificationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(notificationRequest, nameof(notificationRequest));

            return await GetExtensionClient(subscription).PostTestNotificationsActionGroupAsync(waitForCompletion, notificationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send test notifications to a set of provided receivers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/createNotifications
        /// Operation Id: ActionGroups_PostTestNotifications
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="notificationRequest"> The notification request body which includes the contact details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="notificationRequest"/> is null. </exception>
        public static ArmOperation<TestNotificationResponse> PostTestNotificationsActionGroup(this Subscription subscription, bool waitForCompletion, NotificationRequestBody notificationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(notificationRequest, nameof(notificationRequest));

            return GetExtensionClient(subscription).PostTestNotificationsActionGroup(waitForCompletion, notificationRequest, cancellationToken);
        }

        /// <summary>
        /// Get the test notifications by the notification id
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/notificationStatus/{notificationId}
        /// Operation Id: ActionGroups_GetTestNotifications
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="notificationId"> The notification id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="notificationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="notificationId"/> is null. </exception>
        public async static Task<Response<TestNotificationDetailsResponse>> GetTestNotificationsActionGroupAsync(this Subscription subscription, string notificationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(notificationId, nameof(notificationId));

            return await GetExtensionClient(subscription).GetTestNotificationsActionGroupAsync(notificationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the test notifications by the notification id
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/notificationStatus/{notificationId}
        /// Operation Id: ActionGroups_GetTestNotifications
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="notificationId"> The notification id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="notificationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="notificationId"/> is null. </exception>
        public static Response<TestNotificationDetailsResponse> GetTestNotificationsActionGroup(this Subscription subscription, string notificationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(notificationId, nameof(notificationId));

            return GetExtensionClient(subscription).GetTestNotificationsActionGroup(notificationId, cancellationToken);
        }

        /// <summary>
        /// Get a list of all action groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/actionGroups
        /// Operation Id: ActionGroups_ListBySubscriptionId
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ActionGroup> GetActionGroupsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetActionGroupsAsync(cancellationToken);
        }

        /// <summary>
        /// Get a list of all action groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/actionGroups
        /// Operation Id: ActionGroups_ListBySubscriptionId
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ActionGroup> GetActionGroups(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetActionGroups(cancellationToken);
        }

        /// <summary>
        /// Provides the list of records from the activity logs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/eventtypes/management/values
        /// Operation Id: ActivityLogs_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> Reduces the set of data collected.&lt;br&gt;This argument is required and it also requires at least the start date/time.&lt;br&gt;The **$filter** argument is very restricted and allows only the following patterns.&lt;br&gt;- *List events for a resource group*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceGroupName eq &apos;resourceGroupName&apos;.&lt;br&gt;- *List events for resource*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceUri eq &apos;resourceURI&apos;.&lt;br&gt;- *List events for a subscription in a time range*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos;.&lt;br&gt;- *List events for a resource provider*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceProvider eq &apos;resourceProviderName&apos;.&lt;br&gt;- *List events for a correlation Id*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and correlationId eq &apos;correlationID&apos;.&lt;br&gt;&lt;br&gt;**NOTE**: No other syntax is allowed. </param>
        /// <param name="select"> Used to fetch events with only the given properties.&lt;br&gt;The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filter"/> is null. </exception>
        /// <returns> An async collection of <see cref="EventData" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EventData> GetActivityLogsAsync(this Subscription subscription, string filter, string select = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(filter, nameof(filter));

            return GetExtensionClient(subscription).GetActivityLogsAsync(filter, select, cancellationToken);
        }

        /// <summary>
        /// Provides the list of records from the activity logs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/eventtypes/management/values
        /// Operation Id: ActivityLogs_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> Reduces the set of data collected.&lt;br&gt;This argument is required and it also requires at least the start date/time.&lt;br&gt;The **$filter** argument is very restricted and allows only the following patterns.&lt;br&gt;- *List events for a resource group*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceGroupName eq &apos;resourceGroupName&apos;.&lt;br&gt;- *List events for resource*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceUri eq &apos;resourceURI&apos;.&lt;br&gt;- *List events for a subscription in a time range*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos;.&lt;br&gt;- *List events for a resource provider*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceProvider eq &apos;resourceProviderName&apos;.&lt;br&gt;- *List events for a correlation Id*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and correlationId eq &apos;correlationID&apos;.&lt;br&gt;&lt;br&gt;**NOTE**: No other syntax is allowed. </param>
        /// <param name="select"> Used to fetch events with only the given properties.&lt;br&gt;The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filter"/> is null. </exception>
        /// <returns> A collection of <see cref="EventData" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EventData> GetActivityLogs(this Subscription subscription, string filter, string select = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(filter, nameof(filter));

            return GetExtensionClient(subscription).GetActivityLogs(filter, select, cancellationToken);
        }

        /// <summary>
        /// Retrieve alert rule definitions in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts
        /// Operation Id: MetricAlerts_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MetricAlert" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<MetricAlert> GetMetricAlertsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetMetricAlertsAsync(cancellationToken);
        }

        /// <summary>
        /// Retrieve alert rule definitions in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts
        /// Operation Id: MetricAlerts_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MetricAlert" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<MetricAlert> GetMetricAlerts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetMetricAlerts(cancellationToken);
        }

        /// <summary>
        /// List the Log Search rules within a subscription group.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/scheduledQueryRules
        /// Operation Id: ScheduledQueryRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogSearchRule" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LogSearchRule> GetLogSearchRulesAsync(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetLogSearchRulesAsync(filter, cancellationToken);
        }

        /// <summary>
        /// List the Log Search rules within a subscription group.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/scheduledQueryRules
        /// Operation Id: ScheduledQueryRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogSearchRule" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LogSearchRule> GetLogSearchRules(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetLogSearchRules(filter, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all Azure Monitor PrivateLinkScopes within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes
        /// Operation Id: PrivateLinkScopes_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkScope" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PrivateLinkScope> GetPrivateLinkScopesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateLinkScopesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all Azure Monitor PrivateLinkScopes within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes
        /// Operation Id: PrivateLinkScopes_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkScope" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PrivateLinkScope> GetPrivateLinkScopes(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateLinkScopes(cancellationToken);
        }

        /// <summary>
        /// Get a list of all activity log alerts in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts
        /// Operation Id: ActivityLogAlerts_ListBySubscriptionId
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActivityLogAlert" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ActivityLogAlert> GetActivityLogAlertsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetActivityLogAlertsAsync(cancellationToken);
        }

        /// <summary>
        /// Get a list of all activity log alerts in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts
        /// Operation Id: ActivityLogAlerts_ListBySubscriptionId
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActivityLogAlert" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ActivityLogAlert> GetActivityLogAlerts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetActivityLogAlerts(cancellationToken);
        }

        /// <summary>
        /// Lists all data collection endpoints in the specified subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionEndpoints
        /// Operation Id: DataCollectionEndpoints_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DataCollectionEndpoint> GetDataCollectionEndpointsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDataCollectionEndpointsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all data collection endpoints in the specified subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionEndpoints
        /// Operation Id: DataCollectionEndpoints_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DataCollectionEndpoint> GetDataCollectionEndpoints(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDataCollectionEndpoints(cancellationToken);
        }

        /// <summary>
        /// Lists all data collection rules in the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionRules
        /// Operation Id: DataCollectionRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionRule" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DataCollectionRule> GetDataCollectionRulesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDataCollectionRulesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all data collection rules in the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionRules
        /// Operation Id: DataCollectionRules_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionRule" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DataCollectionRule> GetDataCollectionRules(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDataCollectionRules(cancellationToken);
        }
    }
}
