// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region AutoscaleSettingResource
        /// <summary> Gets an object representing a AutoscaleSettingResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AutoscaleSettingResourceCollection" /> object. </returns>
        public static AutoscaleSettingResourceCollection GetAutoscaleSettingResources(this ResourceGroup resourceGroup)
        {
            return new AutoscaleSettingResourceCollection(resourceGroup);
        }
        #endregion

        #region AlertRuleResource
        /// <summary> Gets an object representing a AlertRuleResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AlertRuleResourceCollection" /> object. </returns>
        public static AlertRuleResourceCollection GetAlertRuleResources(this ResourceGroup resourceGroup)
        {
            return new AlertRuleResourceCollection(resourceGroup);
        }
        #endregion

        #region ActionGroupResource
        /// <summary> Gets an object representing a ActionGroupResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ActionGroupResourceCollection" /> object. </returns>
        public static ActionGroupResourceCollection GetActionGroupResources(this ResourceGroup resourceGroup)
        {
            return new ActionGroupResourceCollection(resourceGroup);
        }
        #endregion

        #region MetricAlertResource
        /// <summary> Gets an object representing a MetricAlertResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="MetricAlertResourceCollection" /> object. </returns>
        public static MetricAlertResourceCollection GetMetricAlertResources(this ResourceGroup resourceGroup)
        {
            return new MetricAlertResourceCollection(resourceGroup);
        }
        #endregion

        #region LogSearchRuleResource
        /// <summary> Gets an object representing a LogSearchRuleResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="LogSearchRuleResourceCollection" /> object. </returns>
        public static LogSearchRuleResourceCollection GetLogSearchRuleResources(this ResourceGroup resourceGroup)
        {
            return new LogSearchRuleResourceCollection(resourceGroup);
        }
        #endregion

        #region AzureMonitorPrivateLinkScope
        /// <summary> Gets an object representing a AzureMonitorPrivateLinkScopeCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AzureMonitorPrivateLinkScopeCollection" /> object. </returns>
        public static AzureMonitorPrivateLinkScopeCollection GetAzureMonitorPrivateLinkScopes(this ResourceGroup resourceGroup)
        {
            return new AzureMonitorPrivateLinkScopeCollection(resourceGroup);
        }
        #endregion

        #region ActivityLogAlertResource
        /// <summary> Gets an object representing a ActivityLogAlertResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ActivityLogAlertResourceCollection" /> object. </returns>
        public static ActivityLogAlertResourceCollection GetActivityLogAlertResources(this ResourceGroup resourceGroup)
        {
            return new ActivityLogAlertResourceCollection(resourceGroup);
        }
        #endregion

        #region DataCollectionEndpointResource
        /// <summary> Gets an object representing a DataCollectionEndpointResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DataCollectionEndpointResourceCollection" /> object. </returns>
        public static DataCollectionEndpointResourceCollection GetDataCollectionEndpointResources(this ResourceGroup resourceGroup)
        {
            return new DataCollectionEndpointResourceCollection(resourceGroup);
        }
        #endregion

        #region DataCollectionRuleResource
        /// <summary> Gets an object representing a DataCollectionRuleResourceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DataCollectionRuleResourceCollection" /> object. </returns>
        public static DataCollectionRuleResourceCollection GetDataCollectionRuleResources(this ResourceGroup resourceGroup)
        {
            return new DataCollectionRuleResourceCollection(resourceGroup);
        }
        #endregion

        private static PrivateLinkScopeOperationStatusRestOperations GetPrivateLinkScopeOperationStatusRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new PrivateLinkScopeOperationStatusRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: PrivateLinkScopeOperationStatus_Get
        /// <summary> Get the status of an azure asynchronous operation associated with a private link scope operation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="asyncOperationId"> The operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="asyncOperationId"/> is null. </exception>
        public static async Task<Response<OperationStatus>> GetPrivateLinkScopeOperationStatuAsync(this ResourceGroup resourceGroup, string asyncOperationId, CancellationToken cancellationToken = default)
        {
            if (asyncOperationId == null)
            {
                throw new ArgumentNullException(nameof(asyncOperationId));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetPrivateLinkScopeOperationStatu");
                scope.Start();
                try
                {
                    var restOperations = GetPrivateLinkScopeOperationStatusRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.GetAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, asyncOperationId, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: PrivateLinkScopeOperationStatus_Get
        /// <summary> Get the status of an azure asynchronous operation associated with a private link scope operation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="asyncOperationId"> The operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="asyncOperationId"/> is null. </exception>
        public static Response<OperationStatus> GetPrivateLinkScopeOperationStatu(this ResourceGroup resourceGroup, string asyncOperationId, CancellationToken cancellationToken = default)
        {
            if (asyncOperationId == null)
            {
                throw new ArgumentNullException(nameof(asyncOperationId));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetPrivateLinkScopeOperationStatu");
                scope.Start();
                try
                {
                    var restOperations = GetPrivateLinkScopeOperationStatusRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.Get(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, asyncOperationId, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }
    }
}
