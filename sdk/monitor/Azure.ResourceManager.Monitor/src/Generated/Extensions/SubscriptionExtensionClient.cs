// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Monitor.Models;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    internal partial class SubscriptionExtensionClient : ArmResource
    {
        private ClientDiagnostics _autoscaleSettingClientDiagnostics;
        private AutoscaleSettingsRestOperations _autoscaleSettingRestClient;
        private ClientDiagnostics _alertRuleClientDiagnostics;
        private AlertRulesRestOperations _alertRuleRestClient;
        private ClientDiagnostics _actionGroupClientDiagnostics;
        private ActionGroupsRestOperations _actionGroupRestClient;
        private ClientDiagnostics _activityLogsClientDiagnostics;
        private ActivityLogsRestOperations _activityLogsRestClient;
        private ClientDiagnostics _metricAlertClientDiagnostics;
        private MetricAlertsRestOperations _metricAlertRestClient;
        private ClientDiagnostics _logSearchRuleScheduledQueryRulesClientDiagnostics;
        private ScheduledQueryRulesRestOperations _logSearchRuleScheduledQueryRulesRestClient;
        private ClientDiagnostics _privateLinkScopeClientDiagnostics;
        private PrivateLinkScopesRestOperations _privateLinkScopeRestClient;
        private ClientDiagnostics _activityLogAlertClientDiagnostics;
        private ActivityLogAlertsRestOperations _activityLogAlertRestClient;
        private ClientDiagnostics _dataCollectionEndpointClientDiagnostics;
        private DataCollectionEndpointsRestOperations _dataCollectionEndpointRestClient;
        private ClientDiagnostics _dataCollectionRuleClientDiagnostics;
        private DataCollectionRulesRestOperations _dataCollectionRuleRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class for mocking. </summary>
        protected SubscriptionExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AutoscaleSettingClientDiagnostics => _autoscaleSettingClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", AutoscaleSetting.ResourceType.Namespace, DiagnosticOptions);
        private AutoscaleSettingsRestOperations AutoscaleSettingRestClient => _autoscaleSettingRestClient ??= new AutoscaleSettingsRestOperations(AutoscaleSettingClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AutoscaleSetting.ResourceType));
        private ClientDiagnostics AlertRuleClientDiagnostics => _alertRuleClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", AlertRule.ResourceType.Namespace, DiagnosticOptions);
        private AlertRulesRestOperations AlertRuleRestClient => _alertRuleRestClient ??= new AlertRulesRestOperations(AlertRuleClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AlertRule.ResourceType));
        private ClientDiagnostics ActionGroupClientDiagnostics => _actionGroupClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", ActionGroup.ResourceType.Namespace, DiagnosticOptions);
        private ActionGroupsRestOperations ActionGroupRestClient => _actionGroupRestClient ??= new ActionGroupsRestOperations(ActionGroupClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(ActionGroup.ResourceType));
        private ClientDiagnostics ActivityLogsClientDiagnostics => _activityLogsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private ActivityLogsRestOperations ActivityLogsRestClient => _activityLogsRestClient ??= new ActivityLogsRestOperations(ActivityLogsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics MetricAlertClientDiagnostics => _metricAlertClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", MetricAlert.ResourceType.Namespace, DiagnosticOptions);
        private MetricAlertsRestOperations MetricAlertRestClient => _metricAlertRestClient ??= new MetricAlertsRestOperations(MetricAlertClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(MetricAlert.ResourceType));
        private ClientDiagnostics LogSearchRuleScheduledQueryRulesClientDiagnostics => _logSearchRuleScheduledQueryRulesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", LogSearchRule.ResourceType.Namespace, DiagnosticOptions);
        private ScheduledQueryRulesRestOperations LogSearchRuleScheduledQueryRulesRestClient => _logSearchRuleScheduledQueryRulesRestClient ??= new ScheduledQueryRulesRestOperations(LogSearchRuleScheduledQueryRulesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(LogSearchRule.ResourceType));
        private ClientDiagnostics PrivateLinkScopeClientDiagnostics => _privateLinkScopeClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", PrivateLinkScope.ResourceType.Namespace, DiagnosticOptions);
        private PrivateLinkScopesRestOperations PrivateLinkScopeRestClient => _privateLinkScopeRestClient ??= new PrivateLinkScopesRestOperations(PrivateLinkScopeClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(PrivateLinkScope.ResourceType));
        private ClientDiagnostics ActivityLogAlertClientDiagnostics => _activityLogAlertClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", ActivityLogAlert.ResourceType.Namespace, DiagnosticOptions);
        private ActivityLogAlertsRestOperations ActivityLogAlertRestClient => _activityLogAlertRestClient ??= new ActivityLogAlertsRestOperations(ActivityLogAlertClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(ActivityLogAlert.ResourceType));
        private ClientDiagnostics DataCollectionEndpointClientDiagnostics => _dataCollectionEndpointClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", DataCollectionEndpoint.ResourceType.Namespace, DiagnosticOptions);
        private DataCollectionEndpointsRestOperations DataCollectionEndpointRestClient => _dataCollectionEndpointRestClient ??= new DataCollectionEndpointsRestOperations(DataCollectionEndpointClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(DataCollectionEndpoint.ResourceType));
        private ClientDiagnostics DataCollectionRuleClientDiagnostics => _dataCollectionRuleClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", DataCollectionRule.ResourceType.Namespace, DiagnosticOptions);
        private DataCollectionRulesRestOperations DataCollectionRuleRestClient => _dataCollectionRuleRestClient ??= new DataCollectionRulesRestOperations(DataCollectionRuleClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(DataCollectionRule.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of LogProfiles in the LogProfile. </summary>
        /// <returns> An object representing collection of LogProfiles and their operations over a LogProfile. </returns>
        public virtual LogProfileCollection GetLogProfiles()
        {
            return new LogProfileCollection(Client, Id);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/autoscalesettings
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AutoscaleSettings_ListBySubscription
        /// <summary> Lists the autoscale settings for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoscaleSetting> GetAutoscaleSettingsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AutoscaleSetting>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AutoscaleSettingClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAutoscaleSettings");
                scope.Start();
                try
                {
                    var response = await AutoscaleSettingRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutoscaleSetting>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AutoscaleSettingClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAutoscaleSettings");
                scope.Start();
                try
                {
                    var response = await AutoscaleSettingRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/autoscalesettings
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AutoscaleSettings_ListBySubscription
        /// <summary> Lists the autoscale settings for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoscaleSetting" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoscaleSetting> GetAutoscaleSettings(CancellationToken cancellationToken = default)
        {
            Page<AutoscaleSetting> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AutoscaleSettingClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAutoscaleSettings");
                scope.Start();
                try
                {
                    var response = AutoscaleSettingRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutoscaleSetting> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AutoscaleSettingClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAutoscaleSettings");
                scope.Start();
                try
                {
                    var response = AutoscaleSettingRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutoscaleSetting(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/alertrules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AlertRules_ListBySubscription
        /// <summary> List the classic metric alert rules within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AlertRule> GetAlertRulesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AlertRule>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAlertRules");
                scope.Start();
                try
                {
                    var response = await AlertRuleRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRule(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/alertrules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AlertRules_ListBySubscription
        /// <summary> List the classic metric alert rules within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AlertRule> GetAlertRules(CancellationToken cancellationToken = default)
        {
            Page<AlertRule> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAlertRules");
                scope.Start();
                try
                {
                    var response = AlertRuleRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRule(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/createNotifications
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_PostTestNotifications
        /// <summary> Send test notifications to a set of provided receivers. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="notificationRequest"> The notification request body which includes the contact details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PostTestNotificationsActionGroupOperation> PostTestNotificationsActionGroupAsync(bool waitForCompletion, NotificationRequestBody notificationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.PostTestNotificationsActionGroup");
            scope.Start();
            try
            {
                var response = await ActionGroupRestClient.PostTestNotificationsAsync(Id.SubscriptionId, notificationRequest, cancellationToken).ConfigureAwait(false);
                var operation = new PostTestNotificationsActionGroupOperation(ActionGroupClientDiagnostics, Pipeline, ActionGroupRestClient.CreatePostTestNotificationsRequest(Id.SubscriptionId, notificationRequest).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/createNotifications
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_PostTestNotifications
        /// <summary> Send test notifications to a set of provided receivers. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="notificationRequest"> The notification request body which includes the contact details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PostTestNotificationsActionGroupOperation PostTestNotificationsActionGroup(bool waitForCompletion, NotificationRequestBody notificationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.PostTestNotificationsActionGroup");
            scope.Start();
            try
            {
                var response = ActionGroupRestClient.PostTestNotifications(Id.SubscriptionId, notificationRequest, cancellationToken);
                var operation = new PostTestNotificationsActionGroupOperation(ActionGroupClientDiagnostics, Pipeline, ActionGroupRestClient.CreatePostTestNotificationsRequest(Id.SubscriptionId, notificationRequest).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/notificationStatus/{notificationId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_GetTestNotifications
        /// <summary> Get the test notifications by the notification id. </summary>
        /// <param name="notificationId"> The notification id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<TestNotificationDetailsResponse>> GetTestNotificationsActionGroupAsync(string notificationId, CancellationToken cancellationToken = default)
        {
            using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetTestNotificationsActionGroup");
            scope.Start();
            try
            {
                var response = await ActionGroupRestClient.GetTestNotificationsAsync(Id.SubscriptionId, notificationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/notificationStatus/{notificationId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_GetTestNotifications
        /// <summary> Get the test notifications by the notification id. </summary>
        /// <param name="notificationId"> The notification id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TestNotificationDetailsResponse> GetTestNotificationsActionGroup(string notificationId, CancellationToken cancellationToken = default)
        {
            using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetTestNotificationsActionGroup");
            scope.Start();
            try
            {
                var response = ActionGroupRestClient.GetTestNotifications(Id.SubscriptionId, notificationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/actionGroups
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_ListBySubscriptionId
        /// <summary> Get a list of all action groups in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ActionGroup> GetActionGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ActionGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActionGroups");
                scope.Start();
                try
                {
                    var response = await ActionGroupRestClient.ListBySubscriptionIdAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ActionGroup(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/actionGroups
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActionGroups_ListBySubscriptionId
        /// <summary> Get a list of all action groups in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActionGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ActionGroup> GetActionGroups(CancellationToken cancellationToken = default)
        {
            Page<ActionGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActionGroupClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActionGroups");
                scope.Start();
                try
                {
                    var response = ActionGroupRestClient.ListBySubscriptionId(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ActionGroup(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/eventtypes/management/values
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActivityLogs_List
        /// <summary> Provides the list of records from the activity logs. </summary>
        /// <param name="filter"> Reduces the set of data collected.&lt;br&gt;This argument is required and it also requires at least the start date/time.&lt;br&gt;The **$filter** argument is very restricted and allows only the following patterns.&lt;br&gt;- *List events for a resource group*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceGroupName eq &apos;resourceGroupName&apos;.&lt;br&gt;- *List events for resource*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceUri eq &apos;resourceURI&apos;.&lt;br&gt;- *List events for a subscription in a time range*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos;.&lt;br&gt;- *List events for a resource provider*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceProvider eq &apos;resourceProviderName&apos;.&lt;br&gt;- *List events for a correlation Id*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and correlationId eq &apos;correlationID&apos;.&lt;br&gt;&lt;br&gt;**NOTE**: No other syntax is allowed. </param>
        /// <param name="select"> Used to fetch events with only the given properties.&lt;br&gt;The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EventData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EventData> GetActivityLogsAsync(string filter, string select = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<EventData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActivityLogsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogs");
                scope.Start();
                try
                {
                    var response = await ActivityLogsRestClient.ListAsync(Id.SubscriptionId, filter, select, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EventData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ActivityLogsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogs");
                scope.Start();
                try
                {
                    var response = await ActivityLogsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, select, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/eventtypes/management/values
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActivityLogs_List
        /// <summary> Provides the list of records from the activity logs. </summary>
        /// <param name="filter"> Reduces the set of data collected.&lt;br&gt;This argument is required and it also requires at least the start date/time.&lt;br&gt;The **$filter** argument is very restricted and allows only the following patterns.&lt;br&gt;- *List events for a resource group*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceGroupName eq &apos;resourceGroupName&apos;.&lt;br&gt;- *List events for resource*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceUri eq &apos;resourceURI&apos;.&lt;br&gt;- *List events for a subscription in a time range*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos;.&lt;br&gt;- *List events for a resource provider*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and resourceProvider eq &apos;resourceProviderName&apos;.&lt;br&gt;- *List events for a correlation Id*: $filter=eventTimestamp ge &apos;2014-07-16T04:36:37.6407898Z&apos; and eventTimestamp le &apos;2014-07-20T04:36:37.6407898Z&apos; and correlationId eq &apos;correlationID&apos;.&lt;br&gt;&lt;br&gt;**NOTE**: No other syntax is allowed. </param>
        /// <param name="select"> Used to fetch events with only the given properties.&lt;br&gt;The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EventData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EventData> GetActivityLogs(string filter, string select = null, CancellationToken cancellationToken = default)
        {
            Page<EventData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActivityLogsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogs");
                scope.Start();
                try
                {
                    var response = ActivityLogsRestClient.List(Id.SubscriptionId, filter, select, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EventData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ActivityLogsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogs");
                scope.Start();
                try
                {
                    var response = ActivityLogsRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, select, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: MetricAlerts_ListBySubscription
        /// <summary> Retrieve alert rule definitions in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MetricAlert" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MetricAlert> GetMetricAlertsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<MetricAlert>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MetricAlertClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetMetricAlerts");
                scope.Start();
                try
                {
                    var response = await MetricAlertRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MetricAlert(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: MetricAlerts_ListBySubscription
        /// <summary> Retrieve alert rule definitions in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MetricAlert" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MetricAlert> GetMetricAlerts(CancellationToken cancellationToken = default)
        {
            Page<MetricAlert> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MetricAlertClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetMetricAlerts");
                scope.Start();
                try
                {
                    var response = MetricAlertRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MetricAlert(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/scheduledQueryRules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ScheduledQueryRules_ListBySubscription
        /// <summary> List the Log Search rules within a subscription group. </summary>
        /// <param name="filter"> The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogSearchRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LogSearchRule> GetLogSearchRulesAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<LogSearchRule>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LogSearchRuleScheduledQueryRulesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetLogSearchRules");
                scope.Start();
                try
                {
                    var response = await LogSearchRuleScheduledQueryRulesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogSearchRule(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/scheduledQueryRules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ScheduledQueryRules_ListBySubscription
        /// <summary> List the Log Search rules within a subscription group. </summary>
        /// <param name="filter"> The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogSearchRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LogSearchRule> GetLogSearchRules(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<LogSearchRule> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LogSearchRuleScheduledQueryRulesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetLogSearchRules");
                scope.Start();
                try
                {
                    var response = LogSearchRuleScheduledQueryRulesRestClient.ListBySubscription(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogSearchRule(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: PrivateLinkScopes_List
        /// <summary> Gets a list of all Azure Monitor PrivateLinkScopes within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkScope" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateLinkScope> GetPrivateLinkScopesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateLinkScope>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkScopeClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPrivateLinkScopes");
                scope.Start();
                try
                {
                    var response = await PrivateLinkScopeRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkScope(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PrivateLinkScope>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkScopeClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPrivateLinkScopes");
                scope.Start();
                try
                {
                    var response = await PrivateLinkScopeRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkScope(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: PrivateLinkScopes_List
        /// <summary> Gets a list of all Azure Monitor PrivateLinkScopes within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkScope" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateLinkScope> GetPrivateLinkScopes(CancellationToken cancellationToken = default)
        {
            Page<PrivateLinkScope> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkScopeClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPrivateLinkScopes");
                scope.Start();
                try
                {
                    var response = PrivateLinkScopeRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkScope(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PrivateLinkScope> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkScopeClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPrivateLinkScopes");
                scope.Start();
                try
                {
                    var response = PrivateLinkScopeRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkScope(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActivityLogAlerts_ListBySubscriptionId
        /// <summary> Get a list of all activity log alerts in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActivityLogAlert" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ActivityLogAlert> GetActivityLogAlertsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ActivityLogAlert>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActivityLogAlertClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogAlerts");
                scope.Start();
                try
                {
                    var response = await ActivityLogAlertRestClient.ListBySubscriptionIdAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ActivityLogAlert(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ActivityLogAlerts_ListBySubscriptionId
        /// <summary> Get a list of all activity log alerts in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActivityLogAlert" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ActivityLogAlert> GetActivityLogAlerts(CancellationToken cancellationToken = default)
        {
            Page<ActivityLogAlert> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ActivityLogAlertClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetActivityLogAlerts");
                scope.Start();
                try
                {
                    var response = ActivityLogAlertRestClient.ListBySubscriptionId(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ActivityLogAlert(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionEndpoints
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DataCollectionEndpoints_ListBySubscription
        /// <summary> Lists all data collection endpoints in the specified subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataCollectionEndpoint> GetDataCollectionEndpointsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DataCollectionEndpoint>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DataCollectionEndpointClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionEndpoints");
                scope.Start();
                try
                {
                    var response = await DataCollectionEndpointRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionEndpoint(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataCollectionEndpoint>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DataCollectionEndpointClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionEndpoints");
                scope.Start();
                try
                {
                    var response = await DataCollectionEndpointRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionEndpoint(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionEndpoints
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DataCollectionEndpoints_ListBySubscription
        /// <summary> Lists all data collection endpoints in the specified subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataCollectionEndpoint> GetDataCollectionEndpoints(CancellationToken cancellationToken = default)
        {
            Page<DataCollectionEndpoint> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DataCollectionEndpointClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionEndpoints");
                scope.Start();
                try
                {
                    var response = DataCollectionEndpointRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionEndpoint(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataCollectionEndpoint> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DataCollectionEndpointClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionEndpoints");
                scope.Start();
                try
                {
                    var response = DataCollectionEndpointRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionEndpoint(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionRules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DataCollectionRules_ListBySubscription
        /// <summary> Lists all data collection rules in the specified subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataCollectionRule> GetDataCollectionRulesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DataCollectionRule>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DataCollectionRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionRules");
                scope.Start();
                try
                {
                    var response = await DataCollectionRuleRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRule(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataCollectionRule>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DataCollectionRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionRules");
                scope.Start();
                try
                {
                    var response = await DataCollectionRuleRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRule(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionRules
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DataCollectionRules_ListBySubscription
        /// <summary> Lists all data collection rules in the specified subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataCollectionRule> GetDataCollectionRules(CancellationToken cancellationToken = default)
        {
            Page<DataCollectionRule> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DataCollectionRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionRules");
                scope.Start();
                try
                {
                    var response = DataCollectionRuleRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRule(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataCollectionRule> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DataCollectionRuleClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDataCollectionRules");
                scope.Start();
                try
                {
                    var response = DataCollectionRuleRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRule(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
