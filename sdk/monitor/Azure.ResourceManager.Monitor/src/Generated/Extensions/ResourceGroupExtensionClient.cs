// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Monitor.Models;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    internal partial class ResourceGroupExtensionClient : ArmResource
    {
        private ClientDiagnostics _privateLinkScopeOperationStatusClientDiagnostics;
        private PrivateLinkScopeOperationStatusRestOperations _privateLinkScopeOperationStatusRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PrivateLinkScopeOperationStatusClientDiagnostics => _privateLinkScopeOperationStatusClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Monitor", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private PrivateLinkScopeOperationStatusRestOperations PrivateLinkScopeOperationStatusRestClient => _privateLinkScopeOperationStatusRestClient ??= new PrivateLinkScopeOperationStatusRestOperations(PrivateLinkScopeOperationStatusClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of AutoscaleSettings in the AutoscaleSetting. </summary>
        /// <returns> An object representing collection of AutoscaleSettings and their operations over a AutoscaleSetting. </returns>
        public virtual AutoscaleSettingCollection GetAutoscaleSettings()
        {
            return new AutoscaleSettingCollection(Client, Id);
        }

        /// <summary> Gets a collection of AlertRules in the AlertRule. </summary>
        /// <returns> An object representing collection of AlertRules and their operations over a AlertRule. </returns>
        public virtual AlertRuleCollection GetAlertRules()
        {
            return new AlertRuleCollection(Client, Id);
        }

        /// <summary> Gets a collection of ActionGroups in the ActionGroup. </summary>
        /// <returns> An object representing collection of ActionGroups and their operations over a ActionGroup. </returns>
        public virtual ActionGroupCollection GetActionGroups()
        {
            return new ActionGroupCollection(Client, Id);
        }

        /// <summary> Gets a collection of MetricAlerts in the MetricAlert. </summary>
        /// <returns> An object representing collection of MetricAlerts and their operations over a MetricAlert. </returns>
        public virtual MetricAlertCollection GetMetricAlerts()
        {
            return new MetricAlertCollection(Client, Id);
        }

        /// <summary> Gets a collection of LogSearchRules in the LogSearchRule. </summary>
        /// <returns> An object representing collection of LogSearchRules and their operations over a LogSearchRule. </returns>
        public virtual LogSearchRuleCollection GetLogSearchRules()
        {
            return new LogSearchRuleCollection(Client, Id);
        }

        /// <summary> Gets a collection of PrivateLinkScopes in the PrivateLinkScope. </summary>
        /// <returns> An object representing collection of PrivateLinkScopes and their operations over a PrivateLinkScope. </returns>
        public virtual PrivateLinkScopeCollection GetPrivateLinkScopes()
        {
            return new PrivateLinkScopeCollection(Client, Id);
        }

        /// <summary> Gets a collection of ActivityLogAlerts in the ActivityLogAlert. </summary>
        /// <returns> An object representing collection of ActivityLogAlerts and their operations over a ActivityLogAlert. </returns>
        public virtual ActivityLogAlertCollection GetActivityLogAlerts()
        {
            return new ActivityLogAlertCollection(Client, Id);
        }

        /// <summary> Gets a collection of DataCollectionEndpoints in the DataCollectionEndpoint. </summary>
        /// <returns> An object representing collection of DataCollectionEndpoints and their operations over a DataCollectionEndpoint. </returns>
        public virtual DataCollectionEndpointCollection GetDataCollectionEndpoints()
        {
            return new DataCollectionEndpointCollection(Client, Id);
        }

        /// <summary> Gets a collection of DataCollectionRules in the DataCollectionRule. </summary>
        /// <returns> An object representing collection of DataCollectionRules and their operations over a DataCollectionRule. </returns>
        public virtual DataCollectionRuleCollection GetDataCollectionRules()
        {
            return new DataCollectionRuleCollection(Client, Id);
        }

        /// <summary>
        /// Get the status of an azure asynchronous operation associated with a private link scope operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}
        /// Operation Id: PrivateLinkScopeOperationStatus_Get
        /// </summary>
        /// <param name="asyncOperationId"> The operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<OperationStatus>> GetPrivateLinkScopeOperationStatuAsync(string asyncOperationId, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkScopeOperationStatusClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetPrivateLinkScopeOperationStatu");
            scope.Start();
            try
            {
                var response = await PrivateLinkScopeOperationStatusRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, asyncOperationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the status of an azure asynchronous operation associated with a private link scope operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}
        /// Operation Id: PrivateLinkScopeOperationStatus_Get
        /// </summary>
        /// <param name="asyncOperationId"> The operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationStatus> GetPrivateLinkScopeOperationStatu(string asyncOperationId, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkScopeOperationStatusClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetPrivateLinkScopeOperationStatu");
            scope.Start();
            try
            {
                var response = PrivateLinkScopeOperationStatusRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, asyncOperationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
