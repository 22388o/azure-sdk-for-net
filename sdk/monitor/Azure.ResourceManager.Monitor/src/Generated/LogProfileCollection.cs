// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class representing collection of LogProfile and their operations over its parent. </summary>
    public partial class LogProfileCollection : ArmCollection, IEnumerable<LogProfile>, IAsyncEnumerable<LogProfile>
    {
        private readonly ClientDiagnostics _logProfileClientDiagnostics;
        private readonly LogProfilesRestOperations _logProfileRestClient;

        /// <summary> Initializes a new instance of the <see cref="LogProfileCollection"/> class for mocking. </summary>
        protected LogProfileCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LogProfileCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal LogProfileCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _logProfileClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Monitor", LogProfile.ResourceType.Namespace, DiagnosticOptions);
            TryGetApiVersion(LogProfile.ResourceType, out string logProfileApiVersion);
            _logProfileRestClient = new LogProfilesRestOperations(_logProfileClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, logProfileApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Subscription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Subscription.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a log profile in Azure Monitoring REST API.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_CreateOrUpdate
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ArmOperation<LogProfile>> CreateOrUpdateAsync(bool waitForCompletion, string logProfileName, LogProfileData parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _logProfileRestClient.CreateOrUpdateAsync(Id.SubscriptionId, logProfileName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new MonitorArmOperation<LogProfile>(Response.FromValue(new LogProfile(Client, response), response.GetRawResponse()));
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a log profile in Azure Monitoring REST API.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_CreateOrUpdate
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ArmOperation<LogProfile> CreateOrUpdate(bool waitForCompletion, string logProfileName, LogProfileData parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _logProfileRestClient.CreateOrUpdate(Id.SubscriptionId, logProfileName, parameters, cancellationToken);
                var operation = new MonitorArmOperation<LogProfile>(Response.FromValue(new LogProfile(Client, response), response.GetRawResponse()));
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the log profile.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public async virtual Task<Response<LogProfile>> GetAsync(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.Get");
            scope.Start();
            try
            {
                var response = await _logProfileRestClient.GetAsync(Id.SubscriptionId, logProfileName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _logProfileClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new LogProfile(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the log profile.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public virtual Response<LogProfile> Get(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.Get");
            scope.Start();
            try
            {
                var response = _logProfileRestClient.Get(Id.SubscriptionId, logProfileName, cancellationToken);
                if (response.Value == null)
                    throw _logProfileClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogProfile(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the log profiles.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles
        /// Operation Id: LogProfiles_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LogProfile> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LogProfile>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _logProfileRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogProfile(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List the log profiles.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles
        /// Operation Id: LogProfiles_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LogProfile> GetAll(CancellationToken cancellationToken = default)
        {
            Page<LogProfile> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _logProfileRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogProfile(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(logProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public virtual Response<bool> Exists(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(logProfileName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public async virtual Task<Response<LogProfile>> GetIfExistsAsync(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _logProfileRestClient.GetAsync(Id.SubscriptionId, logProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<LogProfile>(null, response.GetRawResponse());
                return Response.FromValue(new LogProfile(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Insights/logprofiles/{logProfileName}
        /// Operation Id: LogProfiles_Get
        /// </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="logProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="logProfileName"/> is null. </exception>
        public virtual Response<LogProfile> GetIfExists(string logProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logProfileName, nameof(logProfileName));

            using var scope = _logProfileClientDiagnostics.CreateScope("LogProfileCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _logProfileRestClient.Get(Id.SubscriptionId, logProfileName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<LogProfile>(null, response.GetRawResponse());
                return Response.FromValue(new LogProfile(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LogProfile> IEnumerable<LogProfile>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LogProfile> IAsyncEnumerable<LogProfile>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
