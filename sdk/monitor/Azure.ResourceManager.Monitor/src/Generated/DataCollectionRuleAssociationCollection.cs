// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Monitor.Models;

namespace Azure.ResourceManager.Monitor
{
    /// <summary> A class representing collection of DataCollectionRuleAssociation and their operations over its parent. </summary>
    public partial class DataCollectionRuleAssociationCollection : ArmCollection, IEnumerable<DataCollectionRuleAssociation>, IAsyncEnumerable<DataCollectionRuleAssociation>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DataCollectionRuleAssociationsRestOperations _dataCollectionRuleAssociationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DataCollectionRuleAssociationCollection"/> class for mocking. </summary>
        protected DataCollectionRuleAssociationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DataCollectionRuleAssociationCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DataCollectionRuleAssociationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _dataCollectionRuleAssociationsRestClient = new DataCollectionRuleAssociationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        // Collection level operations.

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Create
        /// <summary> Creates or updates an association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="body"> The payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual DataCollectionRuleAssociationCreateOperation CreateOrUpdate(bool waitForCompletion, string associationName, DataCollectionRuleAssociationData body = null, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Create(Id, associationName, body, cancellationToken);
                var operation = new DataCollectionRuleAssociationCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Create
        /// <summary> Creates or updates an association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="body"> The payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<DataCollectionRuleAssociationCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string associationName, DataCollectionRuleAssociationData body = null, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.CreateAsync(Id, associationName, body, cancellationToken).ConfigureAwait(false);
                var operation = new DataCollectionRuleAssociationCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Get
        /// <summary> Returns the specified association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<DataCollectionRuleAssociation> Get(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.Get");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Get(Id, associationName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataCollectionRuleAssociation(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_Get
        /// <summary> Returns the specified association. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<DataCollectionRuleAssociation>> GetAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.Get");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.GetAsync(Id, associationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DataCollectionRuleAssociation(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<DataCollectionRuleAssociation> GetIfExists(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dataCollectionRuleAssociationsRestClient.Get(Id, associationName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<DataCollectionRuleAssociation>(null, response.GetRawResponse());
                return Response.FromValue(new DataCollectionRuleAssociation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<DataCollectionRuleAssociation>> GetIfExistsAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dataCollectionRuleAssociationsRestClient.GetAsync(Id, associationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<DataCollectionRuleAssociation>(null, response.GetRawResponse());
                return Response.FromValue(new DataCollectionRuleAssociation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public virtual Response<bool> Exists(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(associationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="associationName"> The name of the association. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="associationName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string associationName, CancellationToken cancellationToken = default)
        {
            if (associationName == null)
            {
                throw new ArgumentNullException(nameof(associationName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(associationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_ListByResource
        /// <summary> Lists associations for the specified resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataCollectionRuleAssociation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataCollectionRuleAssociation> GetAll(CancellationToken cancellationToken = default)
        {
            Page<DataCollectionRuleAssociation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataCollectionRuleAssociationsRestClient.ListByResource(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociation(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataCollectionRuleAssociation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataCollectionRuleAssociationsRestClient.ListByResourceNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociation(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations
        /// ContextualPath: /{resourceUri}
        /// OperationId: DataCollectionRuleAssociations_ListByResource
        /// <summary> Lists associations for the specified resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataCollectionRuleAssociation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataCollectionRuleAssociation> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DataCollectionRuleAssociation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataCollectionRuleAssociationsRestClient.ListByResourceAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociation(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataCollectionRuleAssociation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataCollectionRuleAssociationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataCollectionRuleAssociationsRestClient.ListByResourceNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataCollectionRuleAssociation(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<DataCollectionRuleAssociation> IEnumerable<DataCollectionRuleAssociation>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DataCollectionRuleAssociation> IAsyncEnumerable<DataCollectionRuleAssociation>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, DataCollectionRuleAssociation, DataCollectionRuleAssociationData> Construct() { }
    }
}
