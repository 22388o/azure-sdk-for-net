//// Copyright (c) Microsoft Corporation. All rights reserved.
//// Licensed under the MIT License.

//// <auto-generated/>

//#nullable disable

//using System;
//using System.Collections.Generic;
//using System.Net;
//using System.Threading.Tasks;
//using Azure.Core;
//using Azure.Core.TestFramework;
//using Azure.ResourceManager.Monitor;
//using Azure.ResourceManager.Monitor.Models;
//using Azure.ResourceManager.TestFramework;

//namespace Azure.ResourceManager.Monitor.Tests.Mock
//{
//    /// <summary> Test for AutoscaleSetting. </summary>
//    public partial class AutoscaleSettingCollectionMockTests : MockTestBase
//    {
//        public AutoscaleSettingCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
//        {
//            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
//            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
//        }

//        [RecordedTest]
//        public async Task CreateOrUpdate()
//        {
//            // Example: Create or update an autoscale setting
//            string autoscaleSettingName = "MySetting";
//            Monitor.AutoscaleSettingData parameters = new Monitor.AutoscaleSettingData(location: "West US", profiles: new List<Monitor.Models.AutoscaleProfile>()
//{
//new Monitor.Models.AutoscaleProfile(name: "adios",capacity: new Monitor.Models.ScaleCapacity(minimum: "1",maximum: "10",default: "1"),rules: new List<Monitor.Models.ScaleRule>()
//{
//new Monitor.Models.ScaleRule(metricTrigger: new Monitor.Models.MetricTrigger(metricName: "Percentage CPU",metricResourceUri: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",timeGrain: TimeSpan.Parse("PT1M"),statistic: Monitor.Models.MetricStatisticType.Average,timeWindow: TimeSpan.Parse("PT5M"),timeAggregation: Monitor.Models.TimeAggregationType.Average,operator: Monitor.Models.ComparisonOperationType.GreaterThan,threshold: 10)
//{
//DividePerInstance = false, },scaleAction: new Monitor.Models.ScaleAction(direction: Monitor.Models.ScaleDirection.Increase,type: Monitor.Models.ScaleType.ChangeCount,cooldown: TimeSpan.Parse("PT5M"))
//{
//Value = "1", }),new Monitor.Models.ScaleRule(metricTrigger: new Monitor.Models.MetricTrigger(metricName: "Percentage CPU",metricResourceUri: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",timeGrain: TimeSpan.Parse("PT2M"),statistic: Monitor.Models.MetricStatisticType.Average,timeWindow: TimeSpan.Parse("PT5M"),timeAggregation: Monitor.Models.TimeAggregationType.Average,operator: Monitor.Models.ComparisonOperationType.GreaterThan,threshold: 15)
//{
//DividePerInstance = false, },scaleAction: new Monitor.Models.ScaleAction(direction: Monitor.Models.ScaleDirection.Decrease,type: Monitor.Models.ScaleType.ChangeCount,cooldown: TimeSpan.Parse("PT6M"))
//{
//Value = "2", }),})
//{
//                FixedDate = new Monitor.Models.TimeWindow(start: DateTimeOffset.Parse("2015-03-05T14:00:00Z"), end: DateTimeOffset.Parse("2015-03-05T14:30:00Z"))
//                {
//                    TimeZone = "UTC",
//                }, },new Monitor.Models.AutoscaleProfile(name: "saludos", capacity: new Monitor.Models.ScaleCapacity(minimum: "1", maximum: "10", default: "1"), rules: new List<Monitor.Models.ScaleRule>()
//{
//new Monitor.Models.ScaleRule(metricTrigger: new Monitor.Models.MetricTrigger(metricName: "Percentage CPU",metricResourceUri: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",timeGrain: TimeSpan.Parse("PT1M"),statistic: Monitor.Models.MetricStatisticType.Average,timeWindow: TimeSpan.Parse("PT5M"),timeAggregation: Monitor.Models.TimeAggregationType.Average,operator: Monitor.Models.ComparisonOperationType.GreaterThan,threshold: 10)
//{
//DividePerInstance = false, },scaleAction: new Monitor.Models.ScaleAction(direction: Monitor.Models.ScaleDirection.Increase,type: Monitor.Models.ScaleType.ChangeCount,cooldown: TimeSpan.Parse("PT5M"))
//{
//Value = "1", }),new Monitor.Models.ScaleRule(metricTrigger: new Monitor.Models.MetricTrigger(metricName: "Percentage CPU",metricResourceUri: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",timeGrain: TimeSpan.Parse("PT2M"),statistic: Monitor.Models.MetricStatisticType.Average,timeWindow: TimeSpan.Parse("PT5M"),timeAggregation: Monitor.Models.TimeAggregationType.Average,operator: Monitor.Models.ComparisonOperationType.GreaterThan,threshold: 15)
//{
//DividePerInstance = false, },scaleAction: new Monitor.Models.ScaleAction(direction: Monitor.Models.ScaleDirection.Decrease,type: Monitor.Models.ScaleType.ChangeCount,cooldown: TimeSpan.Parse("PT6M"))
//{
//Value = "2", }),})
//            {
//                Recurrence = new Monitor.Models.Recurrence(frequency: Monitor.Models.RecurrenceFrequency.Week, schedule: new Monitor.Models.RecurrentSchedule(timeZone: "UTC", days: new List<string>()
//{
//"1",}, hours: new List<int>()
//{
//5,}, minutes: new List<int>()
//{
//15,})),
//            },})
//{
//Enabled = true, TargetResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc", };
//    parameters.Tags.ReplaceWith(new Dictionary<string, string>()
//{
//});

//var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/TestingMetricsScaleSet")).GetAutoscaleSettings();
//await collection.CreateOrUpdateAsync(true, autoscaleSettingName, parameters);
//}

//[RecordedTest]
//public async Task Get()
//{
//    // Example: Get an autoscale setting
//    string autoscaleSettingName = "MySetting";

//    var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/TestingMetricsScaleSet")).GetAutoscaleSettings();
//    await collection.GetAsync(autoscaleSettingName);
//}

//[RecordedTest]
//public async Task GetAll()
//{
//    // Example: List autoscale settings

//    var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/TestingMetricsScaleSet")).GetAutoscaleSettings();
//    await foreach (var _ in collection.GetAllAsync())
//    {
//    }
//}
//}
//}
