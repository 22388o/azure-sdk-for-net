// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for MetricAlert. </summary>
    public partial class MetricAlertCollectionMockTests : MockTestBase
    {
        public MetricAlertCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or update a dynamic alert rule for Multiple Resources
            string ruleName = "MetricAlertOnMultipleResources";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1","/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create or update a dynamic alert rule for Single Resource
            string ruleName = "chiricutin";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create or update a web test alert rule
            string ruleName = "webtest-name-example";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 4, enabled: true, scopes: new List<string>()
{
"/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example","/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.WebtestLocationAvailabilityCriteria(webTestId: "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example", componentId: "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example", failedLocationCount: 2)
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"),
})
            {
                Description = "Automatically created alert rule for availability test \"component-example\" a",
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"] = "Resource",
                ["hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"] = "Resource",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-example")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create or update an alert rule for Multiple Resource
            string ruleName = "MetricAlertOnMultipleResources";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1","/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create or update an alert rule for Single Resource
            string ruleName = "chiricutin";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme",}, evaluationFrequency: TimeSpan.Parse("Pt1m"), windowSize: TimeSpan.Parse("Pt15m"), criteria: new Monitor.Models.MetricAlertSingleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create or update an alert rule on Resource group(s)
            string ruleName = "MetricAlertAtResourceGroupLevel";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1","/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest1")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create or update an alert rule on Subscription 
            string ruleName = "MetricAlertAtSubscriptionLevel";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7",}, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: Create or update an alert rules with dimensions
            string ruleName = "MetricAlertOnMultipleDimensions";
            Monitor.MetricAlertData parameters = new Monitor.MetricAlertData(location: "global", severity: 3, enabled: true, scopes: new List<string>()
{
"/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource",}, evaluationFrequency: TimeSpan.Parse("PT1H"), windowSize: TimeSpan.Parse("P1D"), criteria: new Monitor.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
{
    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
})
            {
                Description = "This is the description of the rule1",
                AutoMitigate = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a dynamic alert rule for multiple resources
            string ruleName = "MetricAlertOnMultipleResources";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a dynamic alert rule for single resource
            string ruleName = "chiricutin";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get a web test alert rule
            string ruleName = "webtest-name-example";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-example")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get4()
        {
            // Example: Get an alert rule for multiple resources
            string ruleName = "MetricAlertOnMultipleResources";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get5()
        {
            // Example: Get an alert rule for single resource
            string ruleName = "chiricutin";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get6()
        {
            // Example: Get an alert rule on resource group(s)
            string ruleName = "MetricAlertAtResourceGroupLevel";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest1")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get7()
        {
            // Example: Get an alert rule on subscription
            string ruleName = "MetricAlertAtSubscriptionLevel";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List metric alert rules

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlerts();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
