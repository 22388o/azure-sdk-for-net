// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for MetricAlert. </summary>
    public partial class MetricAlertMockTests : MockTestBase
    {
        public MetricAlertMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a dynamic alert rule for multiple resources
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "MetricAlertOnMultipleResources");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a dynamic alert rule for single resource
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "chiricutin");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get a web test alert rule
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg-example", "webtest-name-example");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get4()
        {
            // Example: Get an alert rule for multiple resources
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "MetricAlertOnMultipleResources");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get5()
        {
            // Example: Get an alert rule for single resource
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "chiricutin");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get6()
        {
            // Example: Get an alert rule on resource group(s)
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest1", "MetricAlertAtResourceGroupLevel");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Get7()
        {
            // Example: Get an alert rule on subscription
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "MetricAlertAtSubscriptionLevel");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an alert rule
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "chiricutin");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await metricAlert.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Create or update an alert rule
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "chiricutin");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);
            Monitor.Models.MetricAlertResourcePatch parameters = new Monitor.Models.MetricAlertResourcePatch()
            {
                Description = "This is the description of the rule1",
                Severity = 3,
                Enabled = true,
                EvaluationFrequency = TimeSpan.Parse("Pt1m"),
                WindowSize = TimeSpan.Parse("Pt15m"),
                Criteria = new Monitor.Models.MetricAlertSingleResourceMultipleMetricCriteria()
                {
                    OdataType = new Monitor.Models.Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"),
                },
                AutoMitigate = true,
            };

            await metricAlert.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetMetricAlertsStatuses()
        {
            // Example: Get an alert rule status
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "gigtest", "chiricutin");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);

            await foreach (var _ in metricAlert.GetMetricAlertsStatusesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricAlertsStatusesByName()
        {
            // Example: Get an alert rule status
            var metricAlertId = Monitor.MetricAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "EastUs", "custom1");
            var metricAlert = GetArmClient().GetMetricAlert(metricAlertId);
            string statusName = "cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l";

            await foreach (var _ in metricAlert.GetMetricAlertsStatusesByNameAsync(statusName))
            {
            }
        }
    }
}
