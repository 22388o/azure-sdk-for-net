// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for ActivityLogAlert. </summary>
    public partial class ActivityLogAlertMockTests : MockTestBase
    {
        public ActivityLogAlertMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an activity log alert
            var activityLogAlertId = Monitor.ActivityLogAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-ActivityLogAlerts", "SampleActivityLogAlert");
            var activityLogAlert = GetArmClient().GetActivityLogAlert(activityLogAlertId);

            await activityLogAlert.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an activity log alert
            var activityLogAlertId = Monitor.ActivityLogAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-ActivityLogAlerts", "SampleActivityLogAlert");
            var activityLogAlert = GetArmClient().GetActivityLogAlert(activityLogAlertId);

            await activityLogAlert.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch an activity log alert
            var activityLogAlertId = Monitor.ActivityLogAlert.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-ActivityLogAlerts", "SampleActivityLogAlert");
            var activityLogAlert = GetArmClient().GetActivityLogAlert(activityLogAlertId);
            Monitor.Models.ActivityLogAlertPatchBody activityLogAlertPatch = new Monitor.Models.ActivityLogAlertPatchBody()
            {
                Enabled = false,
            };

            await activityLogAlert.UpdateAsync(activityLogAlertPatch);
        }
    }
}
