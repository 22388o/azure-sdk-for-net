// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Approve or reject a private endpoint connection with a given name.
            string privateEndpointConnectionName = "private-endpoint-connection-name";
            Monitor.PrivateEndpointConnectionData parameters = new Monitor.PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new Monitor.Models.PrivateLinkServiceConnectionStateProperty(status: "Approved", description: "Approved by johndoe@contoso.com"),
            };

            var privateLinkScopeId = Monitor.PrivateLinkScope.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyPrivateLinkScope");
            var collection = GetArmClient().GetPrivateLinkScope(privateLinkScopeId).GetPrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets private endpoint connection.
            string privateEndpointConnectionName = "private-endpoint-connection-name";

            var privateLinkScopeId = Monitor.PrivateLinkScope.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyPrivateLinkScope");
            var collection = GetArmClient().GetPrivateLinkScope(privateLinkScopeId).GetPrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Gets list of private endpoint connections on a private link scope.

            var privateLinkScopeId = Monitor.PrivateLinkScope.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyPrivateLinkScope");
            var collection = GetArmClient().GetPrivateLinkScope(privateLinkScopeId).GetPrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
