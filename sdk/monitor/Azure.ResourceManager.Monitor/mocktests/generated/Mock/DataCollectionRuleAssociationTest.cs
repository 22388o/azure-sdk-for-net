// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for DataCollectionRuleAssociation. </summary>
    public partial class DataCollectionRuleAssociationMockTests : MockTestBase
    {
        public DataCollectionRuleAssociationMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get association
            var dataCollectionRuleAssociationId = Monitor.DataCollectionRuleAssociation.CreateResourceIdentifier("subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm", "myAssociation");
            var dataCollectionRuleAssociation = GetArmClient().GetDataCollectionRuleAssociation(dataCollectionRuleAssociationId);

            await dataCollectionRuleAssociation.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete association
            var dataCollectionRuleAssociationId = Monitor.DataCollectionRuleAssociation.CreateResourceIdentifier("subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm", "myAssociation");
            var dataCollectionRuleAssociation = GetArmClient().GetDataCollectionRuleAssociation(dataCollectionRuleAssociationId);

            await dataCollectionRuleAssociation.DeleteAsync(true);
        }
    }
}
