// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for PrivateLinkScope. </summary>
    public partial class PrivateLinkScopeCollectionMockTests : MockTestBase
    {
        public PrivateLinkScopeCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PrivateLinkScopeCreate
            string scopeName = "my-privatelinkscope";
            Monitor.PrivateLinkScopeData azureMonitorPrivateLinkScopePayload = new Monitor.PrivateLinkScopeData(location: "Global");

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group")).GetPrivateLinkScopes();
            await collection.CreateOrUpdateAsync(true, scopeName, azureMonitorPrivateLinkScopePayload);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: PrivateLinkScopeUpdate
            string scopeName = "my-privatelinkscope";
            Monitor.PrivateLinkScopeData azureMonitorPrivateLinkScopePayload = new Monitor.PrivateLinkScopeData(location: "Global")
            {
            };
            azureMonitorPrivateLinkScopePayload.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["Tag1"] = "Value1",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group")).GetPrivateLinkScopes();
            await collection.CreateOrUpdateAsync(true, scopeName, azureMonitorPrivateLinkScopePayload);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: PrivateLinkScopeGet
            string scopeName = "my-privatelinkscope";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group")).GetPrivateLinkScopes();
            await collection.GetAsync(scopeName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: PrivateLinkScopeListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group")).GetPrivateLinkScopes();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
