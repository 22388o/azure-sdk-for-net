// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Monitor;
using Azure.ResourceManager.Monitor.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Monitor.Tests.Mock
{
    /// <summary> Test for LogProfile. </summary>
    public partial class LogProfileMockTests : MockTestBase
    {
        public LogProfileMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get log profile
            var logProfileId = Monitor.LogProfile.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default");
            var logProfile = GetArmClient().GetLogProfile(logProfileId);

            await logProfile.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete log profile
            var logProfileId = Monitor.LogProfile.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG");
            var logProfile = GetArmClient().GetLogProfile(logProfileId);

            await logProfile.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch a log profile
            var logProfileId = Monitor.LogProfile.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG");
            var logProfile = GetArmClient().GetLogProfile(logProfileId);
            Monitor.Models.LogProfileResourcePatch logProfilesResource = new Monitor.Models.LogProfileResourcePatch()
            {
                StorageAccountId = "/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162",
                ServiceBusRuleId = "",
                RetentionPolicy = new Monitor.Models.RetentionPolicy(enabled: true, days: 3),
            };

            await logProfile.UpdateAsync(logProfilesResource);
        }
    }
}
