// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DataMigration.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataMigration
{
    public partial class DataMigrationServiceData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(PublicKey))
            {
                writer.WritePropertyName("publicKey");
                writer.WriteStringValue(PublicKey);
            }
            if (Optional.IsDefined(VirtualSubnetId))
            {
                writer.WritePropertyName("virtualSubnetId");
                writer.WriteStringValue(VirtualSubnetId);
            }
            if (Optional.IsDefined(VirtualNicId))
            {
                writer.WritePropertyName("virtualNicId");
                writer.WriteStringValue(VirtualNicId);
            }
            if (Optional.IsDefined(AutoStopDelay))
            {
                writer.WritePropertyName("autoStopDelay");
                writer.WriteStringValue(AutoStopDelay);
            }
            if (Optional.IsDefined(DeleteResourcesOnStop))
            {
                writer.WritePropertyName("deleteResourcesOnStop");
                writer.WriteBooleanValue(DeleteResourcesOnStop.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DataMigrationServiceData DeserializeDataMigrationServiceData(JsonElement element)
        {
            Optional<string> etag = default;
            Optional<string> kind = default;
            Optional<ServiceSku> sku = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            Core.ResourceType type = default;
            SystemData systemData = default;
            Optional<ServiceProvisioningState> provisioningState = default;
            Optional<string> publicKey = default;
            Optional<string> virtualSubnetId = default;
            Optional<string> virtualNicId = default;
            Optional<string> autoStopDelay = default;
            Optional<bool> deleteResourcesOnStop = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sku = ServiceSku.DeserializeServiceSku(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new ServiceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publicKey"))
                        {
                            publicKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("virtualSubnetId"))
                        {
                            virtualSubnetId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("virtualNicId"))
                        {
                            virtualNicId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("autoStopDelay"))
                        {
                            autoStopDelay = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deleteResourcesOnStop"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            deleteResourcesOnStop = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DataMigrationServiceData(id, name, type, systemData, tags, location, etag.Value, kind.Value, sku.Value, Optional.ToNullable(provisioningState), publicKey.Value, virtualSubnetId.Value, virtualNicId.Value, autoStopDelay.Value, Optional.ToNullable(deleteResourcesOnStop));
        }
    }
}
