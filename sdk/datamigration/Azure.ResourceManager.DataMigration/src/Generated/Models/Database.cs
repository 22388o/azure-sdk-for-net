// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Information about a single database. </summary>
    internal partial class Database
    {
        /// <summary> Initializes a new instance of Database. </summary>
        internal Database()
        {
        }

        /// <summary> Unique identifier for the database. </summary>
        public string Id { get; }
        /// <summary> Name of the database. </summary>
        public string Name { get; }
        /// <summary> SQL Server compatibility level of database. </summary>
        public DatabaseCompatLevel? CompatibilityLevel { get; }
        /// <summary> Collation name of the database. </summary>
        public string Collation { get; }
        /// <summary> Name of the server. </summary>
        public string ServerName { get; }
        /// <summary> Fully qualified name. </summary>
        public string Fqdn { get; }
        /// <summary> Install id of the database. </summary>
        public string InstallId { get; }
        /// <summary> Version of the server. </summary>
        public string ServerVersion { get; }
        /// <summary> Edition of the server. </summary>
        public string ServerEdition { get; }
        /// <summary> Product level of the server (RTM, SP, CTP). </summary>
        public string ServerLevel { get; }
        /// <summary> Default path of the data files. </summary>
        public string ServerDefaultDataPath { get; }
        /// <summary> Default path of the log files. </summary>
        public string ServerDefaultLogPath { get; }
        /// <summary> Default path of the backup folder. </summary>
        public string ServerDefaultBackupPath { get; }
        /// <summary> Number of cores on the server. </summary>
        public int? ServerCoreCount { get; }
        /// <summary> Number of cores on the server that have VISIBLE ONLINE status. </summary>
        public int? ServerVisibleOnlineCoreCount { get; }
        /// <summary> State of the database. </summary>
        public DatabaseState? DatabaseState { get; }
        /// <summary> The unique Server Id. </summary>
        public string ServerId { get; }
    }
}
