// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Base class for all types of DMS task properties. If task is not supported by current client, this object is returned. </summary>
    public partial class ProjectTaskProperties
    {
        /// <summary> Initializes a new instance of ProjectTaskProperties. </summary>
        public ProjectTaskProperties()
        {
            Errors = new ChangeTrackingList<ODataError>();
            Commands = new ChangeTrackingList<CommandProperties>();
            ClientData = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of ProjectTaskProperties. </summary>
        /// <param name="taskType"> Task type. </param>
        /// <param name="errors"> Array of errors. This is ignored if submitted. </param>
        /// <param name="state"> The state of the task. This is ignored if submitted. </param>
        /// <param name="commands"> Array of command properties. </param>
        /// <param name="clientData"> Key value pairs of client data to attach meta data information to task. </param>
        internal ProjectTaskProperties(TaskType taskType, IReadOnlyList<ODataError> errors, TaskState? state, IReadOnlyList<CommandProperties> commands, IDictionary<string, string> clientData)
        {
            TaskType = taskType;
            Errors = errors;
            State = state;
            Commands = commands;
            ClientData = clientData;
        }

        /// <summary> Task type. </summary>
        internal TaskType TaskType { get; set; }
        /// <summary> Array of errors. This is ignored if submitted. </summary>
        public IReadOnlyList<ODataError> Errors { get; }
        /// <summary> The state of the task. This is ignored if submitted. </summary>
        public TaskState? State { get; }
        /// <summary> Array of command properties. </summary>
        public IReadOnlyList<CommandProperties> Commands { get; }
        /// <summary> Key value pairs of client data to attach meta data information to task. </summary>
        public IDictionary<string, string> ClientData { get; }
    }
}
