// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataMigration
{
    /// <summary>
    /// A Class representing a DatabaseMigrationSqlDbResource along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="DatabaseMigrationSqlDbResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetDatabaseMigrationSqlDbResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetDatabaseMigrationSqlDbResource method.
    /// </summary>
    public partial class DatabaseMigrationSqlDbResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="DatabaseMigrationSqlDbResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string sqlDbInstanceName, string targetDbName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics;
        private readonly DatabaseMigrationsSqlDbRestOperations _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient;
        private readonly DatabaseMigrationSqlDbData _data;

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlDbResource"/> class for mocking. </summary>
        protected DatabaseMigrationSqlDbResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "DatabaseMigrationSqlDbResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal DatabaseMigrationSqlDbResource(ArmClient client, DatabaseMigrationSqlDbData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlDbResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DatabaseMigrationSqlDbResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DataMigration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbApiVersion);
            _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient = new DatabaseMigrationsSqlDbRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DataMigration/databaseMigrations";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual DatabaseMigrationSqlDbData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets an object representing a DatabaseMigrationSqlDbDatabaseMigrationCancelResource along with the instance operations that can be performed on it in the DatabaseMigrationSqlDbResource. </summary>
        /// <returns> Returns a <see cref="DatabaseMigrationSqlDbDatabaseMigrationCancelResource" /> object. </returns>
        public virtual DatabaseMigrationSqlDbDatabaseMigrationCancelResource GetDatabaseMigrationSqlDbDatabaseMigrationCancel()
        {
            return new DatabaseMigrationSqlDbDatabaseMigrationCancelResource(Client, new ResourceIdentifier(Id.ToString() + "/cancel"));
        }

        /// <summary>
        /// Retrieve the Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DatabaseMigrationSqlDbResource>> GetAsync(Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Get");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, migrationOperationId, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlDbResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DatabaseMigrationSqlDbResource> Get(Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Get");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, migrationOperationId, expand, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlDbResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="force"> Optional force delete boolean. If this is provided as true, migration will be deleted even if active. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Delete");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, force, cancellationToken).ConfigureAwait(false);
                var operation = new DataMigrationArmOperation(_databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, force).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="force"> Optional force delete boolean. If this is provided as true, migration will be deleted even if active. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Delete");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, force, cancellationToken);
                var operation = new DataMigrationArmOperation(_databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, force).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or Update Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Details of Sql Db migration resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DatabaseMigrationSqlDbResource>> UpdateAsync(WaitUntil waitUntil, DatabaseMigrationSqlDbData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Update");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlDbResource>(new DatabaseMigrationSqlDbResourceOperationSource(Client), _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or Update Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Details of Sql Db migration resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DatabaseMigrationSqlDbResource> Update(WaitUntil waitUntil, DatabaseMigrationSqlDbData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbResource.Update");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlDbResource>(new DatabaseMigrationSqlDbResourceOperationSource(Client), _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbResourceDatabaseMigrationsSqlDbRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
