// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataMigration
{
    /// <summary>
    /// A Class representing a DatabaseMigrationSqlMiResource along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="DatabaseMigrationSqlMiResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetDatabaseMigrationSqlMiResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetDatabaseMigrationSqlMiResource method.
    /// </summary>
    public partial class DatabaseMigrationSqlMiResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="DatabaseMigrationSqlMiResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string managedInstanceName, string targetDbName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics;
        private readonly DatabaseMigrationsSqlMiRestOperations _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient;
        private readonly DatabaseMigrationSqlMiData _data;

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlMiResource"/> class for mocking. </summary>
        protected DatabaseMigrationSqlMiResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "DatabaseMigrationSqlMiResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal DatabaseMigrationSqlMiResource(ArmClient client, DatabaseMigrationSqlMiData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlMiResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DatabaseMigrationSqlMiResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DataMigration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiApiVersion);
            _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient = new DatabaseMigrationsSqlMiRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DataMigration/databaseMigrations";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual DatabaseMigrationSqlMiData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets an object representing a DatabaseMigrationSqlMiDatabaseMigrationCancelResource along with the instance operations that can be performed on it in the DatabaseMigrationSqlMiResource. </summary>
        /// <returns> Returns a <see cref="DatabaseMigrationSqlMiDatabaseMigrationCancelResource" /> object. </returns>
        public virtual DatabaseMigrationSqlMiDatabaseMigrationCancelResource GetDatabaseMigrationSqlMiDatabaseMigrationCancel()
        {
            return new DatabaseMigrationSqlMiDatabaseMigrationCancelResource(Client, new ResourceIdentifier(Id.ToString() + "/cancel"));
        }

        /// <summary> Gets an object representing a DatabaseMigrationSqlMiDatabaseMigrationCutoverResource along with the instance operations that can be performed on it in the DatabaseMigrationSqlMiResource. </summary>
        /// <returns> Returns a <see cref="DatabaseMigrationSqlMiDatabaseMigrationCutoverResource" /> object. </returns>
        public virtual DatabaseMigrationSqlMiDatabaseMigrationCutoverResource GetDatabaseMigrationSqlMiDatabaseMigrationCutover()
        {
            return new DatabaseMigrationSqlMiDatabaseMigrationCutoverResource(Client, new ResourceIdentifier(Id.ToString() + "/cutover"));
        }

        /// <summary>
        /// Retrieve the specified database migration for a given SQL Managed Instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlMi_Get
        /// </summary>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DatabaseMigrationSqlMiResource>> GetAsync(Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics.CreateScope("DatabaseMigrationSqlMiResource.Get");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, migrationOperationId, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlMiResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the specified database migration for a given SQL Managed Instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlMi_Get
        /// </summary>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DatabaseMigrationSqlMiResource> Get(Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics.CreateScope("DatabaseMigrationSqlMiResource.Get");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, migrationOperationId, expand, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlMiResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new database migration to a given SQL Managed Instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlMi_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Details of SqlMigrationService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DatabaseMigrationSqlMiResource>> UpdateAsync(WaitUntil waitUntil, DatabaseMigrationSqlMiData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics.CreateScope("DatabaseMigrationSqlMiResource.Update");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlMiResource>(new DatabaseMigrationSqlMiResourceOperationSource(Client), _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics, Pipeline, _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new database migration to a given SQL Managed Instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlMi_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Details of SqlMigrationService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DatabaseMigrationSqlMiResource> Update(WaitUntil waitUntil, DatabaseMigrationSqlMiData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics.CreateScope("DatabaseMigrationSqlMiResource.Update");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlMiResource>(new DatabaseMigrationSqlMiResourceOperationSource(Client), _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiClientDiagnostics, Pipeline, _databaseMigrationSqlMiResourceDatabaseMigrationsSqlMiRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
