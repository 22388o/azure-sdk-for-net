// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry.ResumableStorage
{
    internal partial class DockerManifestList : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Manifests))
            {
                writer.WritePropertyName("manifests");
                writer.WriteStartArray();
                foreach (var item in Manifests)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schemaVersion");
            writer.WriteNumberValue(SchemaVersion);
            writer.WritePropertyName("mediaType");
            writer.WriteStringValue(MediaType);
            writer.WriteEndObject();
        }

        internal static DockerManifestList DeserializeDockerManifestList(JsonElement element)
        {
            Optional<IList<ManifestListAttributes>> manifests = default;
            int schemaVersion = default;
            string mediaType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("manifests"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ManifestListAttributes> array = new List<ManifestListAttributes>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ManifestListAttributes.DeserializeManifestListAttributes(item));
                    }
                    manifests = array;
                    continue;
                }
                if (property.NameEquals("schemaVersion"))
                {
                    schemaVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mediaType"))
                {
                    mediaType = property.Value.GetString();
                    continue;
                }
            }
            return new DockerManifestList(schemaVersion, mediaType, Optional.ToList(manifests));
        }
    }
}
