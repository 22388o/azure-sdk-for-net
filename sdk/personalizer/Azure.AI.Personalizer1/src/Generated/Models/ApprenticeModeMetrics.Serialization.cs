// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace PersonalizerClientV1Preview1.Models
{
    public partial class ApprenticeModeMetrics : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("startTime");
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("lastProcessedEventTime");
            writer.WriteStringValue(LastProcessedEventTime, "O");
            if (Optional.IsDefined(LastBatchMetrics))
            {
                writer.WritePropertyName("lastBatchMetrics");
                writer.WriteObjectValue(LastBatchMetrics);
            }
            writer.WritePropertyName("numberOfEvents");
            writer.WriteNumberValue(NumberOfEvents);
            writer.WritePropertyName("sumOfRewards");
            writer.WriteNumberValue(SumOfRewards);
            writer.WritePropertyName("numberOfImitatedEvents");
            writer.WriteNumberValue(NumberOfImitatedEvents);
            writer.WritePropertyName("sumOfImitatedRewards");
            writer.WriteNumberValue(SumOfImitatedRewards);
            writer.WriteEndObject();
        }

        internal static ApprenticeModeMetrics DeserializeApprenticeModeMetrics(JsonElement element)
        {
            DateTimeOffset startTime = default;
            DateTimeOffset lastProcessedEventTime = default;
            Optional<ApprenticeLearningMetrics> lastBatchMetrics = default;
            long numberOfEvents = default;
            float sumOfRewards = default;
            long numberOfImitatedEvents = default;
            float sumOfImitatedRewards = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastProcessedEventTime"))
                {
                    lastProcessedEventTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastBatchMetrics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastBatchMetrics = ApprenticeLearningMetrics.DeserializeApprenticeLearningMetrics(property.Value);
                    continue;
                }
                if (property.NameEquals("numberOfEvents"))
                {
                    numberOfEvents = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sumOfRewards"))
                {
                    sumOfRewards = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("numberOfImitatedEvents"))
                {
                    numberOfImitatedEvents = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sumOfImitatedRewards"))
                {
                    sumOfImitatedRewards = property.Value.GetSingle();
                    continue;
                }
            }
            return new ApprenticeModeMetrics(startTime, lastProcessedEventTime, lastBatchMetrics.Value, numberOfEvents, sumOfRewards, numberOfImitatedEvents, sumOfImitatedRewards);
        }
    }
}
