// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Personalizer.Models
{
    public partial class ApprenticeLearningMetrics : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("numberOfEvents");
            writer.WriteNumberValue(NumberOfEvents);
            writer.WritePropertyName("sumOfRewards");
            writer.WriteNumberValue(SumOfRewards);
            writer.WritePropertyName("numberOfImitatedEvents");
            writer.WriteNumberValue(NumberOfImitatedEvents);
            writer.WritePropertyName("sumOfImitatedRewards");
            writer.WriteNumberValue(SumOfImitatedRewards);
            writer.WriteEndObject();
        }

        internal static ApprenticeLearningMetrics DeserializeApprenticeLearningMetrics(JsonElement element)
        {
            long numberOfEvents = default;
            float sumOfRewards = default;
            long numberOfImitatedEvents = default;
            float sumOfImitatedRewards = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numberOfEvents"))
                {
                    numberOfEvents = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sumOfRewards"))
                {
                    sumOfRewards = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("numberOfImitatedEvents"))
                {
                    numberOfImitatedEvents = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sumOfImitatedRewards"))
                {
                    sumOfImitatedRewards = property.Value.GetSingle();
                    continue;
                }
            }
            return new ApprenticeLearningMetrics(numberOfEvents, sumOfRewards, numberOfImitatedEvents, sumOfImitatedRewards);
        }
    }
}
