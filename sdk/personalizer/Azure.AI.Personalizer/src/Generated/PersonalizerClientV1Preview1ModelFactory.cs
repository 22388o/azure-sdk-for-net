// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.AI.Personalizer.Models;

namespace Azure.AI.Personalizer
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class PersonalizerClientV1Preview1ModelFactory
    {
        /// <summary> Initializes new instance of Evaluation class. </summary>
        /// <param name="id"> The ID of the evaluation. </param>
        /// <param name="name"> The name of the evaluation. </param>
        /// <param name="startTime"> The start time of the evaluation. </param>
        /// <param name="endTime"> The end time of the evaluation. </param>
        /// <param name="jobId"> The ID of the job processing the evaluation. </param>
        /// <param name="status"> The status of the job processing the evaluation. </param>
        /// <param name="policyResults"> The results of the evaluation. </param>
        /// <param name="featureImportance"> . </param>
        /// <param name="evaluationType"> . </param>
        /// <param name="optimalPolicy"> . </param>
        /// <param name="creationTime"> . </param>
        /// <returns> A new <see cref="Models.Evaluation"/> instance for mocking. </returns>
        public static Evaluation Evaluation(string id = default, string name = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, string jobId = default, EvaluationJobStatus? status = default, IReadOnlyList<PolicyResult> policyResults = default, IReadOnlyList<IList<string>> featureImportance = default, EvaluationType? evaluationType = default, string optimalPolicy = default, DateTimeOffset? creationTime = default)
        {
            policyResults ??= new List<PolicyResult>();
            featureImportance ??= new List<IList<string>>();
            return new Evaluation(id, name, startTime, endTime, jobId, status, policyResults, featureImportance, evaluationType, optimalPolicy, creationTime);
        }

        /// <summary> Initializes new instance of PolicyResult class. </summary>
        /// <param name="name"> The name of the Learning Settings. </param>
        /// <param name="arguments"> The arguments of the Learning Settings. </param>
        /// <param name="policySource"> The source of the Learning Settings. </param>
        /// <param name="summary"> The aggregate results of the Offline Evaluation. </param>
        /// <param name="totalSummary"> . </param>
        /// <returns> A new <see cref="Models.PolicyResult"/> instance for mocking. </returns>
        public static PolicyResult PolicyResult(string name = default, string arguments = default, PolicySource? policySource = default, IReadOnlyList<PolicyResultSummary> summary = default, PolicyResultTotalSummary totalSummary = default)
        {
            summary ??= new List<PolicyResultSummary>();
            return new PolicyResult(name, arguments, policySource, summary, totalSummary);
        }

        /// <summary> Initializes new instance of PolicyResultSummary class. </summary>
        /// <param name="timeStamp"> Timestamp of the aggregation. </param>
        /// <param name="ipsEstimatorNumerator"> Numerator for IPS estimator. </param>
        /// <param name="ipsEstimatorDenominator"> Denominator for IPS estimator. </param>
        /// <param name="snipsEstimatorDenominator"> Denominator for SNIPS estimator. </param>
        /// <param name="aggregateTimeWindow">
        /// Time window for aggregation.
        /// 
        /// For example, PT5M (5 mins). For information about the time format,
        /// 
        /// see http://en.wikipedia.org/wiki/ISO_8601#Durations.
        /// </param>
        /// <param name="nonZeroProbability"> Probability of non-zero values for the Policy evaluation. </param>
        /// <param name="sumOfSquares"> Sum of Squares for the Policy evaluation results. </param>
        /// <param name="confidenceInterval"> Gaussian confidence interval for the Policy evaluation. </param>
        /// <param name="averageReward"> Average reward. </param>
        /// <returns> A new <see cref="Models.PolicyResultSummary"/> instance for mocking. </returns>
        public static PolicyResultSummary PolicyResultSummary(DateTimeOffset? timeStamp = default, float? ipsEstimatorNumerator = default, float? ipsEstimatorDenominator = default, float? snipsEstimatorDenominator = default, TimeSpan? aggregateTimeWindow = default, float? nonZeroProbability = default, float? sumOfSquares = default, float? confidenceInterval = default, float? averageReward = default)
        {
            return new PolicyResultSummary(timeStamp, ipsEstimatorNumerator, ipsEstimatorDenominator, snipsEstimatorDenominator, aggregateTimeWindow, nonZeroProbability, sumOfSquares, confidenceInterval, averageReward);
        }

        /// <summary> Initializes new instance of LogsProperties class. </summary>
        /// <param name="dateRange"> . </param>
        /// <returns> A new <see cref="Models.LogsProperties"/> instance for mocking. </returns>
        public static LogsProperties LogsProperties(LogsPropertiesDateRange dateRange = default)
        {
            return new LogsProperties(dateRange);
        }

        /// <summary> Initializes new instance of DateRange class. </summary>
        /// <param name="from"> Start date for the range. </param>
        /// <param name="to"> End date for the range. </param>
        /// <returns> A new <see cref="Models.DateRange"/> instance for mocking. </returns>
        public static DateRange DateRange(DateTimeOffset? @from = default, DateTimeOffset? to = default)
        {
            return new DateRange(@from, to);
        }

        /// <summary> Initializes new instance of ModelProperties class. </summary>
        /// <param name="creationTime"> Creation time of the model. </param>
        /// <param name="lastModifiedTime"> Last time the model was modified. </param>
        /// <returns> A new <see cref="Models.ModelProperties"/> instance for mocking. </returns>
        public static ModelProperties ModelProperties(DateTimeOffset? creationTime = default, DateTimeOffset? lastModifiedTime = default)
        {
            return new ModelProperties(creationTime, lastModifiedTime);
        }

        /// <summary> Initializes new instance of MultiSlotRankResponse class. </summary>
        /// <param name="slots"> Each slot has a corresponding rewardActionID which is the action ID recommended by Personalizer. </param>
        /// <param name="eventId"> The eventId for the round trip from request to response. </param>
        /// <returns> A new <see cref="Models.MultiSlotRankResponse"/> instance for mocking. </returns>
        public static MultiSlotRankResponse MultiSlotRankResponse(IReadOnlyList<SlotResponse> slots = default, string eventId = default)
        {
            slots ??= new List<SlotResponse>();
            return new MultiSlotRankResponse(slots, eventId);
        }

        /// <summary> Initializes new instance of SlotResponse class. </summary>
        /// <param name="id"> Id is the slot ID. </param>
        /// <param name="rewardActionId"> RewardActionID is the action ID recommended by Personalizer. </param>
        /// <returns> A new <see cref="Models.SlotResponse"/> instance for mocking. </returns>
        public static SlotResponse SlotResponse(string id = default, string rewardActionId = default)
        {
            return new SlotResponse(id, rewardActionId);
        }

        /// <summary> Initializes new instance of RankResponse class. </summary>
        /// <param name="ranking"> The calculated ranking for the current request. </param>
        /// <param name="eventId"> The eventId for the round trip from request to response. </param>
        /// <param name="rewardActionId">
        /// The action chosen by the Personalizer service.
        /// 
        /// This is the action your application should display, and for which to report the reward.
        /// 
        /// This might not be the first found in &apos;ranking&apos;.
        /// </param>
        /// <returns> A new <see cref="Models.RankResponse"/> instance for mocking. </returns>
        public static RankResponse RankResponse(IReadOnlyList<RankedAction> ranking = default, string eventId = default, string rewardActionId = default)
        {
            ranking ??= new List<RankedAction>();
            return new RankResponse(ranking, eventId, rewardActionId);
        }

        /// <summary> Initializes new instance of RankedAction class. </summary>
        /// <param name="id"> Id of the action. </param>
        /// <param name="probability"> Probability of the action. </param>
        /// <returns> A new <see cref="Models.RankedAction"/> instance for mocking. </returns>
        public static RankedAction RankedAction(string id = default, float? probability = default)
        {
            return new RankedAction(id, probability);
        }
    }
}
