// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.DigitalTwins.Core
{
    internal partial class DigitalTwinsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DigitalTwinsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public DigitalTwinsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-10-31")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://digitaltwins-name.digitaltwins.azure.net");
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetByIdRequest(string id, GetDigitalTwinOptions digitalTwinsGetByIdOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsGetByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<Stream>> GetByIdAsync(string id, GetDigitalTwinOptions digitalTwinsGetByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, digitalTwinsGetByIdOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsGetByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<Stream> GetById(string id, GetDigitalTwinOptions digitalTwinsGetByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, digitalTwinsGetByIdOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddRequest(string id, BinaryData twin, CreateOrReplaceDigitalTwinOptions digitalTwinsAddOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsAddOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", digitalTwinsAddOptions.IfNoneMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
#if NET6_0_OR_GREATER
				writer.WriteRawValue(twin);
#else
            JsonSerializer.Serialize(writer, JsonDocument.Parse(twin.ToString()).RootElement);
#endif
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Adds or replaces a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or payload is invalid.
        ///   * ModelDecommissioned - The model for the digital twin is decommissioned.
        ///   * TwinLimitReached - The maximum number of digital twins allowed has been reached.
        ///   * ValidationFailed - The digital twin payload is not valid.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="twin"> The digital twin instance being added. If provided, the $dtId property is ignored. </param>
        /// <param name="digitalTwinsAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="twin"/> is null. </exception>
        public async Task<Response<Stream>> AddAsync(string id, BinaryData twin, CreateOrReplaceDigitalTwinOptions digitalTwinsAddOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (twin == null)
            {
                throw new ArgumentNullException(nameof(twin));
            }

            using var message = CreateAddRequest(id, twin, digitalTwinsAddOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                case 202:
                    return Response.FromValue((Stream)null, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Adds or replaces a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or payload is invalid.
        ///   * ModelDecommissioned - The model for the digital twin is decommissioned.
        ///   * TwinLimitReached - The maximum number of digital twins allowed has been reached.
        ///   * ValidationFailed - The digital twin payload is not valid.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="twin"> The digital twin instance being added. If provided, the $dtId property is ignored. </param>
        /// <param name="digitalTwinsAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="twin"/> is null. </exception>
        public Response<Stream> Add(string id, BinaryData twin, CreateOrReplaceDigitalTwinOptions digitalTwinsAddOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (twin == null)
            {
                throw new ArgumentNullException(nameof(twin));
            }

            using var message = CreateAddRequest(id, twin, digitalTwinsAddOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                case 202:
                    return Response.FromValue((Stream)null, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string id, DeleteDigitalTwinOptions digitalTwinsDeleteOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsDeleteOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsDeleteOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        ///   * RelationshipsNotDeleted - The digital twin contains relationships.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteAsync(string id, DeleteDigitalTwinOptions digitalTwinsDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id, digitalTwinsDeleteOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        ///   * RelationshipsNotDeleted - The digital twin contains relationships.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response Delete(string id, DeleteDigitalTwinOptions digitalTwinsDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id, digitalTwinsDeleteOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string id, IEnumerable<BinaryData> patchDocument, UpdateDigitalTwinOptions digitalTwinsUpdateOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.ToString()).RootElement);
#endif
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Updates a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or payload is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - Applying the patch results in an invalid digital twin.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="patchDocument"> An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove. </param>
        /// <param name="digitalTwinsUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="patchDocument"/> is null. </exception>
        public async Task<Response> UpdateAsync(string id, IEnumerable<BinaryData> patchDocument, UpdateDigitalTwinOptions digitalTwinsUpdateOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateRequest(id, patchDocument, digitalTwinsUpdateOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Updates a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or payload is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - Applying the patch results in an invalid digital twin.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="patchDocument"> An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove. </param>
        /// <param name="digitalTwinsUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="patchDocument"/> is null. </exception>
        public Response Update(string id, IEnumerable<BinaryData> patchDocument, UpdateDigitalTwinOptions digitalTwinsUpdateOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateRequest(id, patchDocument, digitalTwinsUpdateOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelationshipByIdRequest(string id, string relationshipId, GetRelationshipOptions digitalTwinsGetRelationshipByIdOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves a relationship between two digital twins.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsGetRelationshipByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public async Task<Response<Stream>> GetRelationshipByIdAsync(string id, string relationshipId, GetRelationshipOptions digitalTwinsGetRelationshipByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateGetRelationshipByIdRequest(id, relationshipId, digitalTwinsGetRelationshipByIdOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves a relationship between two digital twins.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsGetRelationshipByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public Response<Stream> GetRelationshipById(string id, string relationshipId, GetRelationshipOptions digitalTwinsGetRelationshipByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateGetRelationshipByIdRequest(id, relationshipId, digitalTwinsGetRelationshipByIdOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddRelationshipRequest(string id, string relationshipId, BinaryData relationship, CreateOrReplaceRelationshipOptions digitalTwinsAddRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsAddRelationshipOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", digitalTwinsAddRelationshipOptions.IfNoneMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
#if NET6_0_OR_GREATER
				writer.WriteRawValue(relationship);
#else
            JsonSerializer.Serialize(writer, JsonDocument.Parse(relationship.ToString()).RootElement);
#endif
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Adds a relationship between two digital twins.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.
        ///   * InvalidRelationship - The relationship is invalid.
        ///   * OperationNotAllowed - The relationship cannot connect to the same digital twin.
        ///   * ValidationFailed - The relationship content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * TargetTwinNotFound - The digital twin target of the relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="relationship"> The data for the relationship. </param>
        /// <param name="digitalTwinsAddRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="relationshipId"/> or <paramref name="relationship"/> is null. </exception>
        public async Task<Response<Stream>> AddRelationshipAsync(string id, string relationshipId, BinaryData relationship, CreateOrReplaceRelationshipOptions digitalTwinsAddRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (relationship == null)
            {
                throw new ArgumentNullException(nameof(relationship));
            }

            using var message = CreateAddRelationshipRequest(id, relationshipId, relationship, digitalTwinsAddRelationshipOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Adds a relationship between two digital twins.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.
        ///   * InvalidRelationship - The relationship is invalid.
        ///   * OperationNotAllowed - The relationship cannot connect to the same digital twin.
        ///   * ValidationFailed - The relationship content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * TargetTwinNotFound - The digital twin target of the relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="relationship"> The data for the relationship. </param>
        /// <param name="digitalTwinsAddRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="relationshipId"/> or <paramref name="relationship"/> is null. </exception>
        public Response<Stream> AddRelationship(string id, string relationshipId, BinaryData relationship, CreateOrReplaceRelationshipOptions digitalTwinsAddRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (relationship == null)
            {
                throw new ArgumentNullException(nameof(relationship));
            }

            using var message = CreateAddRelationshipRequest(id, relationshipId, relationship, digitalTwinsAddRelationshipOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelationshipRequest(string id, string relationshipId, DeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsDeleteRelationshipOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsDeleteRelationshipOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Deletes a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsDeleteRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public async Task<Response> DeleteRelationshipAsync(string id, string relationshipId, DeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateDeleteRelationshipRequest(id, relationshipId, digitalTwinsDeleteRelationshipOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deletes a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsDeleteRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public Response DeleteRelationship(string id, string relationshipId, DeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateDeleteRelationshipRequest(id, relationshipId, digitalTwinsDeleteRelationshipOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelationshipRequest(string id, string relationshipId, IEnumerable<BinaryData> patchDocument, UpdateRelationshipOptions digitalTwinsUpdateRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateRelationshipOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateRelationshipOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.ToString()).RootElement);
#endif
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Updates the properties on a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        ///   * InvalidRelationship - The relationship is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - The relationship content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 409 Conflict
        ///   * RelationshipAlreadyExists - The relationship already exists.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="patchDocument"> JSON Patch description of the update to the relationship properties. </param>
        /// <param name="digitalTwinsUpdateRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="relationshipId"/> or <paramref name="patchDocument"/> is null. </exception>
        public async Task<Response> UpdateRelationshipAsync(string id, string relationshipId, IEnumerable<BinaryData> patchDocument, UpdateRelationshipOptions digitalTwinsUpdateRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateRelationshipRequest(id, relationshipId, patchDocument, digitalTwinsUpdateRelationshipOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Updates the properties on a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        ///   * InvalidRelationship - The relationship is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - The relationship content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 409 Conflict
        ///   * RelationshipAlreadyExists - The relationship already exists.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="patchDocument"> JSON Patch description of the update to the relationship properties. </param>
        /// <param name="digitalTwinsUpdateRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="relationshipId"/> or <paramref name="patchDocument"/> is null. </exception>
        public Response UpdateRelationship(string id, string relationshipId, IEnumerable<BinaryData> patchDocument, UpdateRelationshipOptions digitalTwinsUpdateRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateRelationshipRequest(id, relationshipId, patchDocument, digitalTwinsUpdateRelationshipOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRelationshipsRequest(string id, string relationshipName, GetRelationshipsOptions digitalTwinsListRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships", false);
            if (relationshipName != null)
            {
                uri.AppendQuery("relationshipName", relationshipName, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListIncomingRelationshipsRequest(string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/incomingrelationships", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<IncomingRelationshipCollection>> ListIncomingRelationshipsAsync(string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsRequest(id, digitalTwinsListIncomingRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<IncomingRelationshipCollection> ListIncomingRelationships(string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsRequest(id, digitalTwinsListIncomingRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendTelemetryRequest(string id, string messageId, BinaryData telemetry, string telemetrySourceTime, PublishTelemetryOptions digitalTwinsSendTelemetryOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/telemetry", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Message-Id", messageId);
            if (telemetrySourceTime != null)
            {
                request.Headers.Add("Telemetry-Source-Time", telemetrySourceTime);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
#if NET6_0_OR_GREATER
				writer.WriteRawValue(telemetry);
#else
            JsonSerializer.Serialize(writer, JsonDocument.Parse(telemetry.ToString()).RootElement);
#endif
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Sends telemetry on behalf of a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or message id is invalid.
        ///   * ValidationFailed - The telemetry content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="messageId"> A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages. </param>
        /// <param name="telemetry"> The telemetry measurements to send from the digital twin. </param>
        /// <param name="telemetrySourceTime"> An RFC 3339 timestamp that identifies the time the telemetry was measured. </param>
        /// <param name="digitalTwinsSendTelemetryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="messageId"/> or <paramref name="telemetry"/> is null. </exception>
        public async Task<Response> SendTelemetryAsync(string id, string messageId, BinaryData telemetry, string telemetrySourceTime = null, PublishTelemetryOptions digitalTwinsSendTelemetryOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (telemetry == null)
            {
                throw new ArgumentNullException(nameof(telemetry));
            }

            using var message = CreateSendTelemetryRequest(id, messageId, telemetry, telemetrySourceTime, digitalTwinsSendTelemetryOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Sends telemetry on behalf of a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or message id is invalid.
        ///   * ValidationFailed - The telemetry content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="messageId"> A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages. </param>
        /// <param name="telemetry"> The telemetry measurements to send from the digital twin. </param>
        /// <param name="telemetrySourceTime"> An RFC 3339 timestamp that identifies the time the telemetry was measured. </param>
        /// <param name="digitalTwinsSendTelemetryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="messageId"/> or <paramref name="telemetry"/> is null. </exception>
        public Response SendTelemetry(string id, string messageId, BinaryData telemetry, string telemetrySourceTime = null, PublishTelemetryOptions digitalTwinsSendTelemetryOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (telemetry == null)
            {
                throw new ArgumentNullException(nameof(telemetry));
            }

            using var message = CreateSendTelemetryRequest(id, messageId, telemetry, telemetrySourceTime, digitalTwinsSendTelemetryOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendComponentTelemetryRequest(string id, string componentPath, string messageId, BinaryData telemetry, string telemetrySourceTime, PublishComponentTelemetryOptions digitalTwinsSendComponentTelemetryOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendPath("/telemetry", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Message-Id", messageId);
            if (telemetrySourceTime != null)
            {
                request.Headers.Add("Telemetry-Source-Time", telemetrySourceTime);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
#if NET6_0_OR_GREATER
				writer.WriteRawValue(telemetry);
#else
            JsonSerializer.Serialize(writer, JsonDocument.Parse(telemetry.ToString()).RootElement);
#endif
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Sends telemetry on behalf of a component in a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, message id, or component path is invalid.
        ///   * ValidationFailed - The telemetry content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * ComponentNotFound - The component path was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="messageId"> A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages. </param>
        /// <param name="telemetry"> The telemetry measurements to send from the digital twin&apos;s component. </param>
        /// <param name="telemetrySourceTime"> An RFC 3339 timestamp that identifies the time the telemetry was measured. </param>
        /// <param name="digitalTwinsSendComponentTelemetryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="componentPath"/>, <paramref name="messageId"/> or <paramref name="telemetry"/> is null. </exception>
        public async Task<Response> SendComponentTelemetryAsync(string id, string componentPath, string messageId, BinaryData telemetry, string telemetrySourceTime = null, PublishComponentTelemetryOptions digitalTwinsSendComponentTelemetryOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (telemetry == null)
            {
                throw new ArgumentNullException(nameof(telemetry));
            }

            using var message = CreateSendComponentTelemetryRequest(id, componentPath, messageId, telemetry, telemetrySourceTime, digitalTwinsSendComponentTelemetryOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Sends telemetry on behalf of a component in a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, message id, or component path is invalid.
        ///   * ValidationFailed - The telemetry content is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * ComponentNotFound - The component path was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="messageId"> A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages. </param>
        /// <param name="telemetry"> The telemetry measurements to send from the digital twin&apos;s component. </param>
        /// <param name="telemetrySourceTime"> An RFC 3339 timestamp that identifies the time the telemetry was measured. </param>
        /// <param name="digitalTwinsSendComponentTelemetryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="componentPath"/>, <paramref name="messageId"/> or <paramref name="telemetry"/> is null. </exception>
        public Response SendComponentTelemetry(string id, string componentPath, string messageId, BinaryData telemetry, string telemetrySourceTime = null, PublishComponentTelemetryOptions digitalTwinsSendComponentTelemetryOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (telemetry == null)
            {
                throw new ArgumentNullException(nameof(telemetry));
            }

            using var message = CreateSendComponentTelemetryRequest(id, componentPath, messageId, telemetry, telemetrySourceTime, digitalTwinsSendComponentTelemetryOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetComponentRequest(string id, string componentPath, GetComponentOptions digitalTwinsGetComponentOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves a component from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or component path is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * ComponentNotFound - The component path was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="digitalTwinsGetComponentOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="componentPath"/> is null. </exception>
        public async Task<Response<Stream>> GetComponentAsync(string id, string componentPath, GetComponentOptions digitalTwinsGetComponentOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }

            using var message = CreateGetComponentRequest(id, componentPath, digitalTwinsGetComponentOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves a component from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or component path is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * ComponentNotFound - The component path was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="digitalTwinsGetComponentOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="componentPath"/> is null. </exception>
        public Response<Stream> GetComponent(string id, string componentPath, GetComponentOptions digitalTwinsGetComponentOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }

            using var message = CreateGetComponentRequest(id, componentPath, digitalTwinsGetComponentOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateComponentRequest(string id, string componentPath, IEnumerable<BinaryData> patchDocument, UpdateComponentOptions digitalTwinsUpdateComponentOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateComponentOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateComponentOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.ToString()).RootElement);
#endif
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Updates a component on a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, component path, or payload is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - Applying the patch results in an invalid digital twin.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="patchDocument"> An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove. </param>
        /// <param name="digitalTwinsUpdateComponentOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="componentPath"/> or <paramref name="patchDocument"/> is null. </exception>
        public async Task<Response> UpdateComponentAsync(string id, string componentPath, IEnumerable<BinaryData> patchDocument, UpdateComponentOptions digitalTwinsUpdateComponentOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateComponentRequest(id, componentPath, patchDocument, digitalTwinsUpdateComponentOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Updates a component on a digital twin.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id, component path, or payload is invalid.
        ///   * JsonPatchInvalid - The JSON Patch provided is invalid.
        ///   * ValidationFailed - Applying the patch results in an invalid digital twin.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="componentPath"> The name of the DTDL component. </param>
        /// <param name="patchDocument"> An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove. </param>
        /// <param name="digitalTwinsUpdateComponentOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="componentPath"/> or <paramref name="patchDocument"/> is null. </exception>
        public Response UpdateComponent(string id, string componentPath, IEnumerable<BinaryData> patchDocument, UpdateComponentOptions digitalTwinsUpdateComponentOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (componentPath == null)
            {
                throw new ArgumentNullException(nameof(componentPath));
            }
            if (patchDocument == null)
            {
                throw new ArgumentNullException(nameof(patchDocument));
            }

            using var message = CreateUpdateComponentRequest(id, componentPath, patchDocument, digitalTwinsUpdateComponentOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRelationshipsNextPageRequest(string nextLink, string id, string relationshipName, GetRelationshipsOptions digitalTwinsListRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListIncomingRelationshipsNextPageRequest(string nextLink, string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public async Task<Response<IncomingRelationshipCollection>> ListIncomingRelationshipsNextPageAsync(string nextLink, string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsNextPageRequest(nextLink, id, digitalTwinsListIncomingRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public Response<IncomingRelationshipCollection> ListIncomingRelationshipsNextPage(string nextLink, string id, GetIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsNextPageRequest(nextLink, id, digitalTwinsListIncomingRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
