// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> A container group. </summary>
    public partial class ContainerGroup : Resource
    {
        /// <summary> Initializes a new instance of ContainerGroup. </summary>
        /// <param name="containers"> The containers within the container group. </param>
        /// <param name="osType"> The operating system type required by the containers in the container group. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="containers"/> is null. </exception>
        public ContainerGroup(IEnumerable<Container> containers, OperatingSystemTypes osType)
        {
            if (containers == null)
            {
                throw new ArgumentNullException(nameof(containers));
            }

            Containers = containers.ToList();
            ImageRegistryCredentials = new ChangeTrackingList<ImageRegistryCredential>();
            OsType = osType;
            Volumes = new ChangeTrackingList<Volume>();
            InitContainers = new ChangeTrackingList<InitContainerDefinition>();
        }

        /// <summary> Initializes a new instance of ContainerGroup. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> The resource name. </param>
        /// <param name="type"> The resource type. </param>
        /// <param name="location"> The resource location. </param>
        /// <param name="tags"> The resource tags. </param>
        /// <param name="identity"> The identity of the container group, if configured. </param>
        /// <param name="provisioningState"> The provisioning state of the container group. This only appears in the response. </param>
        /// <param name="containers"> The containers within the container group. </param>
        /// <param name="imageRegistryCredentials"> The image registry credentials by which the container group is created from. </param>
        /// <param name="restartPolicy">
        /// Restart policy for all containers within the container group.
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// .
        /// </param>
        /// <param name="ipAddress"> The IP address type of the container group. </param>
        /// <param name="osType"> The operating system type required by the containers in the container group. </param>
        /// <param name="volumes"> The list of volumes that can be mounted by containers in this container group. </param>
        /// <param name="instanceView"> The instance view of the container group. Only valid in response. </param>
        /// <param name="diagnostics"> The diagnostic information for a container group. </param>
        /// <param name="networkProfile"> The network profile information for a container group. </param>
        /// <param name="dnsConfig"> The DNS config information for a container group. </param>
        /// <param name="sku"> The SKU for a container group. </param>
        /// <param name="encryptionProperties"> The encryption properties for a container group. </param>
        /// <param name="initContainers"> The init containers for a container group. </param>
        internal ContainerGroup(string id, string name, string type, string location, IDictionary<string, string> tags, ContainerGroupIdentity identity, string provisioningState, IList<Container> containers, IList<ImageRegistryCredential> imageRegistryCredentials, ContainerGroupRestartPolicy? restartPolicy, IpAddress ipAddress, OperatingSystemTypes osType, IList<Volume> volumes, ContainerGroupPropertiesInstanceView instanceView, ContainerGroupDiagnostics diagnostics, ContainerGroupNetworkProfile networkProfile, DnsConfiguration dnsConfig, ContainerGroupSku? sku, EncryptionProperties encryptionProperties, IList<InitContainerDefinition> initContainers) : base(id, name, type, location, tags)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            Containers = containers;
            ImageRegistryCredentials = imageRegistryCredentials;
            RestartPolicy = restartPolicy;
            IpAddress = ipAddress;
            OsType = osType;
            Volumes = volumes;
            InstanceView = instanceView;
            Diagnostics = diagnostics;
            NetworkProfile = networkProfile;
            DnsConfig = dnsConfig;
            Sku = sku;
            EncryptionProperties = encryptionProperties;
            InitContainers = initContainers;
        }

        /// <summary> The identity of the container group, if configured. </summary>
        public ContainerGroupIdentity Identity { get; set; }
        /// <summary> The provisioning state of the container group. This only appears in the response. </summary>
        public string ProvisioningState { get; }
        /// <summary> The containers within the container group. </summary>
        public IList<Container> Containers { get; }
        /// <summary> The image registry credentials by which the container group is created from. </summary>
        public IList<ImageRegistryCredential> ImageRegistryCredentials { get; }
        /// <summary>
        /// Restart policy for all containers within the container group.
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// .
        /// </summary>
        public ContainerGroupRestartPolicy? RestartPolicy { get; set; }
        /// <summary> The IP address type of the container group. </summary>
        public IpAddress IpAddress { get; set; }
        /// <summary> The operating system type required by the containers in the container group. </summary>
        public OperatingSystemTypes OsType { get; set; }
        /// <summary> The list of volumes that can be mounted by containers in this container group. </summary>
        public IList<Volume> Volumes { get; }
        /// <summary> The instance view of the container group. Only valid in response. </summary>
        public ContainerGroupPropertiesInstanceView InstanceView { get; }
        /// <summary> The diagnostic information for a container group. </summary>
        public ContainerGroupDiagnostics Diagnostics { get; set; }
        /// <summary> The network profile information for a container group. </summary>
        public ContainerGroupNetworkProfile NetworkProfile { get; set; }
        /// <summary> The DNS config information for a container group. </summary>
        public DnsConfiguration DnsConfig { get; set; }
        /// <summary> The SKU for a container group. </summary>
        public ContainerGroupSku? Sku { get; set; }
        /// <summary> The encryption properties for a container group. </summary>
        public EncryptionProperties EncryptionProperties { get; set; }
        /// <summary> The init containers for a container group. </summary>
        public IList<InitContainerDefinition> InitContainers { get; }
    }
}
