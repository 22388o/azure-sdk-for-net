// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    internal partial class CallConnectionRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of CallConnectionRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public CallConnectionRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2022-04-07-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetCallRequest(string callLegId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get information of an existing call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public async Task<Response<CallConnectionPropertiesInternal>> GetCallAsync(string callLegId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateGetCallRequest(callLegId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallConnectionPropertiesInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallConnectionPropertiesInternal.DeserializeCallConnectionPropertiesInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information of an existing call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public Response<CallConnectionPropertiesInternal> GetCall(string callLegId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateGetCallRequest(callLegId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallConnectionPropertiesInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallConnectionPropertiesInternal.DeserializeCallConnectionPropertiesInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHangUpCallRequest(string callLegId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Hangup a call using call leg id. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public async Task<Response> HangUpCallAsync(string callLegId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateHangUpCallRequest(callLegId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Hangup a call using call leg id. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public Response HangUpCall(string callLegId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateHangUpCallRequest(callLegId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTerminateCallRequest(string callLegId, TerminateCallRequest terminateCallRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath(":terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(terminateCallRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Terminate a call, hanging up all participants in the call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="terminateCallRequest"> The terminate call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="terminateCallRequest"/> is null. </exception>
        public async Task<Response> TerminateCallAsync(string callLegId, TerminateCallRequest terminateCallRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (terminateCallRequest == null)
            {
                throw new ArgumentNullException(nameof(terminateCallRequest));
            }

            using var message = CreateTerminateCallRequest(callLegId, terminateCallRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Terminate a call, hanging up all participants in the call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="terminateCallRequest"> The terminate call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="terminateCallRequest"/> is null. </exception>
        public Response TerminateCall(string callLegId, TerminateCallRequest terminateCallRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (terminateCallRequest == null)
            {
                throw new ArgumentNullException(nameof(terminateCallRequest));
            }

            using var message = CreateTerminateCallRequest(callLegId, terminateCallRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTransferCallRequest(string callLegId, TransferCallRequestInternal transferCallRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath(":transfer", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(transferCallRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Transfer a participant to different call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="transferCallRequest"> The transfer call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="transferCallRequest"/> is null. </exception>
        public async Task<Response> TransferCallAsync(string callLegId, TransferCallRequestInternal transferCallRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (transferCallRequest == null)
            {
                throw new ArgumentNullException(nameof(transferCallRequest));
            }

            using var message = CreateTransferCallRequest(callLegId, transferCallRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Transfer a participant to different call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="transferCallRequest"> The transfer call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="transferCallRequest"/> is null. </exception>
        public Response TransferCall(string callLegId, TransferCallRequestInternal transferCallRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (transferCallRequest == null)
            {
                throw new ArgumentNullException(nameof(transferCallRequest));
            }

            using var message = CreateTransferCallRequest(callLegId, transferCallRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListParticipantRequest(string callLegId, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath("/participants", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get information of all participants from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public async Task<Response<CallParticipantCollectionInternal>> ListParticipantAsync(string callLegId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateListParticipantRequest(callLegId, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantCollectionInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallParticipantCollectionInternal.DeserializeCallParticipantCollectionInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information of all participants from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> is null. </exception>
        public Response<CallParticipantCollectionInternal> ListParticipant(string callLegId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateListParticipantRequest(callLegId, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantCollectionInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallParticipantCollectionInternal.DeserializeCallParticipantCollectionInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddParticipantRequest(string callLegId, AddParticipantRequestInternal addParticipantRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath("/participants", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(addParticipantRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Add a new participant to a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="addParticipantRequest"> The add participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="addParticipantRequest"/> is null. </exception>
        public async Task<Response> AddParticipantAsync(string callLegId, AddParticipantRequestInternal addParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (addParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(addParticipantRequest));
            }

            using var message = CreateAddParticipantRequest(callLegId, addParticipantRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a new participant to a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="addParticipantRequest"> The add participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="addParticipantRequest"/> is null. </exception>
        public Response AddParticipant(string callLegId, AddParticipantRequestInternal addParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (addParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(addParticipantRequest));
            }

            using var message = CreateAddParticipantRequest(callLegId, addParticipantRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetParticipantRequest(string callLegId, string participantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get information of participant from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response<CallParticipantInternal>> GetParticipantAsync(string callLegId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateGetParticipantRequest(callLegId, participantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallParticipantInternal.DeserializeCallParticipantInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information of participant from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="participantId"/> is null. </exception>
        public Response<CallParticipantInternal> GetParticipant(string callLegId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateGetParticipantRequest(callLegId, participantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallParticipantInternal.DeserializeCallParticipantInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveParticipantRequest(string callLegId, string participantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calling/", false);
            uri.AppendPath(callLegId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Remove a participant from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response> RemoveParticipantAsync(string callLegId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(callLegId, participantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a participant from a call. </summary>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLegId"/> or <paramref name="participantId"/> is null. </exception>
        public Response RemoveParticipant(string callLegId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(callLegId, participantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListParticipantNextPageRequest(string nextLink, string callLegId, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get information of all participants from a call. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="callLegId"/> is null. </exception>
        public async Task<Response<CallParticipantCollectionInternal>> ListParticipantNextPageAsync(string nextLink, string callLegId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateListParticipantNextPageRequest(nextLink, callLegId, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantCollectionInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallParticipantCollectionInternal.DeserializeCallParticipantCollectionInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information of all participants from a call. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="callLegId"> The call leg id. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="callLegId"/> is null. </exception>
        public Response<CallParticipantCollectionInternal> ListParticipantNextPage(string nextLink, string callLegId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (callLegId == null)
            {
                throw new ArgumentNullException(nameof(callLegId));
            }

            using var message = CreateListParticipantNextPageRequest(nextLink, callLegId, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantCollectionInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallParticipantCollectionInternal.DeserializeCallParticipantCollectionInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
