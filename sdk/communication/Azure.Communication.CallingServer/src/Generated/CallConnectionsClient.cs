// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    /// <summary> The CallConnections service client. </summary>
    public partial class CallConnectionsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal CallConnectionsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of CallConnectionsClient for mocking. </summary>
        protected CallConnectionsClient()
        {
        }

        /// <summary> Initializes a new instance of CallConnectionsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal CallConnectionsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-11-15-preview")
        {
            RestClient = new CallConnectionsRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get audio routing groups from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AudioRoutingGroupResultInternal>> GetAudioRoutingGroupsAsync(string callConnectionId, string audioRoutingGroupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetAudioRoutingGroups");
            scope.Start();
            try
            {
                return await RestClient.GetAudioRoutingGroupsAsync(callConnectionId, audioRoutingGroupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get audio routing groups from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AudioRoutingGroupResultInternal> GetAudioRoutingGroups(string callConnectionId, string audioRoutingGroupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetAudioRoutingGroups");
            scope.Start();
            try
            {
                return RestClient.GetAudioRoutingGroups(callConnectionId, audioRoutingGroupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete audio routing group from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAudioRoutingGroupAsync(string callConnectionId, string audioRoutingGroupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.DeleteAudioRoutingGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteAudioRoutingGroupAsync(callConnectionId, audioRoutingGroupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete audio routing group from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAudioRoutingGroup(string callConnectionId, string audioRoutingGroupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.DeleteAudioRoutingGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteAudioRoutingGroup(callConnectionId, audioRoutingGroupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update audio routing group. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="targets"> The target identities that would be receivers in the audio routing group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAudioRoutingGroupAsync(string callConnectionId, string audioRoutingGroupId, IEnumerable<CommunicationIdentifierModel> targets, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.UpdateAudioRoutingGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateAudioRoutingGroupAsync(callConnectionId, audioRoutingGroupId, targets, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update audio routing group. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingGroupId"> The audio routing group id. </param>
        /// <param name="targets"> The target identities that would be receivers in the audio routing group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateAudioRoutingGroup(string callConnectionId, string audioRoutingGroupId, IEnumerable<CommunicationIdentifierModel> targets, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.UpdateAudioRoutingGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateAudioRoutingGroup(callConnectionId, audioRoutingGroupId, targets, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get call connection. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CallConnectionPropertiesInternal>> GetCallAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetCall");
            scope.Start();
            try
            {
                return await RestClient.GetCallAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get call connection. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CallConnectionPropertiesInternal> GetCall(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetCall");
            scope.Start();
            try
            {
                return RestClient.GetCall(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteCallAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.DeleteCall");
            scope.Start();
            try
            {
                return await RestClient.DeleteCallAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteCall(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.DeleteCall");
            scope.Start();
            try
            {
                return RestClient.DeleteCall(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hangup the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HangupCallAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.HangupCall");
            scope.Start();
            try
            {
                return await RestClient.HangupCallAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hangup the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HangupCall(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.HangupCall");
            scope.Start();
            try
            {
                return RestClient.HangupCall(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel all media operations. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelAllMediaOperationsAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CancelAllMediaOperations");
            scope.Start();
            try
            {
                return await RestClient.CancelAllMediaOperationsAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel all media operations. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelAllMediaOperations(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CancelAllMediaOperations");
            scope.Start();
            try
            {
                return RestClient.CancelAllMediaOperations(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Keep the call alive. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> KeepAliveAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.KeepAlive");
            scope.Start();
            try
            {
                return await RestClient.KeepAliveAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Keep the call alive. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response KeepAlive(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.KeepAlive");
            scope.Start();
            try
            {
                return RestClient.KeepAlive(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfer the call to a participant or to another call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="targetParticipant"> The identity of the target where call should be transfer to. </param>
        /// <param name="targetCallConnectionId"> The call connection id to replace the current call with. This parameter should be used for consultative transfer. </param>
        /// <param name="alternateCallerId"> The alternate identity of the transferor if transferring to a pstn number. </param>
        /// <param name="userToUserInformation"> The user to user information. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TransferCallResult>> TransferAsync(string callConnectionId, CommunicationIdentifierModel targetParticipant = null, string targetCallConnectionId = null, PhoneNumberIdentifierModel alternateCallerId = null, string userToUserInformation = null, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.Transfer");
            scope.Start();
            try
            {
                return await RestClient.TransferAsync(callConnectionId, targetParticipant, targetCallConnectionId, alternateCallerId, userToUserInformation, operationContext, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfer the call to a participant or to another call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="targetParticipant"> The identity of the target where call should be transfer to. </param>
        /// <param name="targetCallConnectionId"> The call connection id to replace the current call with. This parameter should be used for consultative transfer. </param>
        /// <param name="alternateCallerId"> The alternate identity of the transferor if transferring to a pstn number. </param>
        /// <param name="userToUserInformation"> The user to user information. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TransferCallResult> Transfer(string callConnectionId, CommunicationIdentifierModel targetParticipant = null, string targetCallConnectionId = null, PhoneNumberIdentifierModel alternateCallerId = null, string userToUserInformation = null, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.Transfer");
            scope.Start();
            try
            {
                return RestClient.Transfer(callConnectionId, targetParticipant, targetCallConnectionId, alternateCallerId, userToUserInformation, operationContext, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create audio routing group in a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingMode"> The audio routing mode. </param>
        /// <param name="targets"> The target identities that would be receivers in the audio routing group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CreateAudioRoutingGroupResult>> CreateAudioRoutingGroupAsync(string callConnectionId, AudioRoutingMode audioRoutingMode, IEnumerable<CommunicationIdentifierModel> targets, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CreateAudioRoutingGroup");
            scope.Start();
            try
            {
                return await RestClient.CreateAudioRoutingGroupAsync(callConnectionId, audioRoutingMode, targets, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create audio routing group in a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioRoutingMode"> The audio routing mode. </param>
        /// <param name="targets"> The target identities that would be receivers in the audio routing group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CreateAudioRoutingGroupResult> CreateAudioRoutingGroup(string callConnectionId, AudioRoutingMode audioRoutingMode, IEnumerable<CommunicationIdentifierModel> targets, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CreateAudioRoutingGroup");
            scope.Start();
            try
            {
                return RestClient.CreateAudioRoutingGroup(callConnectionId, audioRoutingMode, targets, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the current status of the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CallConnectionPropertiesInternal>> ConnectionStatusAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ConnectionStatus");
            scope.Start();
            try
            {
                return await RestClient.ConnectionStatusAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the current status of the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CallConnectionPropertiesInternal> ConnectionStatus(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ConnectionStatus");
            scope.Start();
            try
            {
                return RestClient.ConnectionStatus(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the operation status. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="operationId"> The operation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationResponse>> GetOperationAsync(string callConnectionId, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(callConnectionId, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the operation status. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="operationId"> The operation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationResponse> GetOperation(string callConnectionId, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(callConnectionId, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get participants from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<CallParticipantInternal>>> GetParticipantsAsync(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetParticipants");
            scope.Start();
            try
            {
                return await RestClient.GetParticipantsAsync(callConnectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get participants from a call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<CallParticipantInternal>> GetParticipants(string callConnectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetParticipants");
            scope.Start();
            try
            {
                return RestClient.GetParticipants(callConnectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="participant"> The participant to be added to the call. </param>
        /// <param name="alternateCallerId"> The alternate identity of source participant. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AddParticipantResult>> AddParticipantAsync(string callConnectionId, CommunicationIdentifierModel participant, PhoneNumberIdentifierModel alternateCallerId = null, string operationContext = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.AddParticipant");
            scope.Start();
            try
            {
                return await RestClient.AddParticipantAsync(callConnectionId, participant, alternateCallerId, operationContext, callbackUri, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="participant"> The participant to be added to the call. </param>
        /// <param name="alternateCallerId"> The alternate identity of source participant. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AddParticipantResult> AddParticipant(string callConnectionId, CommunicationIdentifierModel participant, PhoneNumberIdentifierModel alternateCallerId = null, string operationContext = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.AddParticipant");
            scope.Start();
            try
            {
                return RestClient.AddParticipant(callConnectionId, participant, alternateCallerId, operationContext, callbackUri, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be removed from the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveParticipantAsync(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.RemoveParticipant");
            scope.Start();
            try
            {
                return await RestClient.RemoveParticipantAsync(callConnectionId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be removed from the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveParticipant(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.RemoveParticipant");
            scope.Start();
            try
            {
                return RestClient.RemoveParticipant(callConnectionId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get participant from the call using identifier. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<CallParticipantInternal>>> GetParticipantAsync(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetParticipant");
            scope.Start();
            try
            {
                return await RestClient.GetParticipantAsync(callConnectionId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get participant from the call using identifier. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<CallParticipantInternal>> GetParticipant(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.GetParticipant");
            scope.Start();
            try
            {
                return RestClient.GetParticipant(callConnectionId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="callConnectionId"> The callConnectionId. </param>
        /// <param name="identifier"> The identifier of the participant to play audio to. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PlayAudioResult>> ParticipantPlayAudioAsync(string callConnectionId, CommunicationIdentifierModel identifier, string audioFileUri, bool loop, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ParticipantPlayAudio");
            scope.Start();
            try
            {
                return await RestClient.ParticipantPlayAudioAsync(callConnectionId, identifier, audioFileUri, loop, operationContext, audioFileId, callbackUri, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="callConnectionId"> The callConnectionId. </param>
        /// <param name="identifier"> The identifier of the participant to play audio to. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PlayAudioResult> ParticipantPlayAudio(string callConnectionId, CommunicationIdentifierModel identifier, string audioFileUri, bool loop, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ParticipantPlayAudio");
            scope.Start();
            try
            {
                return RestClient.ParticipantPlayAudio(callConnectionId, identifier, audioFileUri, loop, operationContext, audioFileId, callbackUri, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel media operation for a participant. </summary>
        /// <param name="callConnectionId"> The callConnectionId. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="mediaOperationId"> The operationId of the media operation to cancel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelParticipantMediaOperationAsync(string callConnectionId, CommunicationIdentifierModel identifier, string mediaOperationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CancelParticipantMediaOperation");
            scope.Start();
            try
            {
                return await RestClient.CancelParticipantMediaOperationAsync(callConnectionId, identifier, mediaOperationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel media operation for a participant. </summary>
        /// <param name="callConnectionId"> The callConnectionId. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="mediaOperationId"> The operationId of the media operation to cancel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelParticipantMediaOperation(string callConnectionId, CommunicationIdentifierModel identifier, string mediaOperationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.CancelParticipantMediaOperation");
            scope.Start();
            try
            {
                return RestClient.CancelParticipantMediaOperation(callConnectionId, identifier, mediaOperationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mute participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be muted in the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> MuteParticipantAsync(string callConnectionId, CommunicationIdentifierModel identifier, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.MuteParticipant");
            scope.Start();
            try
            {
                return await RestClient.MuteParticipantAsync(callConnectionId, identifier, operationContext, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mute participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be muted in the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response MuteParticipant(string callConnectionId, CommunicationIdentifierModel identifier, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.MuteParticipant");
            scope.Start();
            try
            {
                return RestClient.MuteParticipant(callConnectionId, identifier, operationContext, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unmute participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be unmuted in the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UnmuteParticipantAsync(string callConnectionId, CommunicationIdentifierModel identifier, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.UnmuteParticipant");
            scope.Start();
            try
            {
                return await RestClient.UnmuteParticipantAsync(callConnectionId, identifier, operationContext, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unmute participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant to be unmuted in the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UnmuteParticipant(string callConnectionId, CommunicationIdentifierModel identifier, string operationContext = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.UnmuteParticipant");
            scope.Start();
            try
            {
                return RestClient.UnmuteParticipant(callConnectionId, identifier, operationContext, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hold meeting audio of a participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HoldParticipantMeetingAudioAsync(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.HoldParticipantMeetingAudio");
            scope.Start();
            try
            {
                return await RestClient.HoldParticipantMeetingAudioAsync(callConnectionId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hold meeting audio of a participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HoldParticipantMeetingAudio(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.HoldParticipantMeetingAudio");
            scope.Start();
            try
            {
                return RestClient.HoldParticipantMeetingAudio(callConnectionId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resume meeting audio of a participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ResumeParticipantMeetingAudioAsync(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ResumeParticipantMeetingAudio");
            scope.Start();
            try
            {
                return await RestClient.ResumeParticipantMeetingAudioAsync(callConnectionId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resume meeting audio of a participant in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResumeParticipantMeetingAudio(string callConnectionId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.ResumeParticipantMeetingAudio");
            scope.Start();
            try
            {
                return RestClient.ResumeParticipantMeetingAudio(callConnectionId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new call. </summary>
        /// <param name="targets"> The targets of the call. </param>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="alternateCallerId"> The alternate identity of the source of the call if dialing out to a pstn number. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targets"/>, <paramref name="source"/>, or <paramref name="callbackUri"/> is null. </exception>
        public virtual async Task<InternalCallConnectionsCreateCallOperation> StartCreateCallAsync(IEnumerable<CommunicationIdentifierModel> targets, CommunicationIdentifierModel source, string callbackUri, PhoneNumberIdentifierModel alternateCallerId = null, string subject = null, IEnumerable<CallMediaType> requestedMediaTypes = null, IEnumerable<CallingEventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.StartCreateCall");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateCallAsync(targets, source, callbackUri, alternateCallerId, subject, requestedMediaTypes, requestedCallEvents, cancellationToken).ConfigureAwait(false);
                return new InternalCallConnectionsCreateCallOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateCallRequest(targets, source, callbackUri, alternateCallerId, subject, requestedMediaTypes, requestedCallEvents).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new call. </summary>
        /// <param name="targets"> The targets of the call. </param>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="alternateCallerId"> The alternate identity of the source of the call if dialing out to a pstn number. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targets"/>, <paramref name="source"/>, or <paramref name="callbackUri"/> is null. </exception>
        public virtual InternalCallConnectionsCreateCallOperation StartCreateCall(IEnumerable<CommunicationIdentifierModel> targets, CommunicationIdentifierModel source, string callbackUri, PhoneNumberIdentifierModel alternateCallerId = null, string subject = null, IEnumerable<CallMediaType> requestedMediaTypes = null, IEnumerable<CallingEventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.StartCreateCall");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateCall(targets, source, callbackUri, alternateCallerId, subject, requestedMediaTypes, requestedCallEvents, cancellationToken);
                return new InternalCallConnectionsCreateCallOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateCallRequest(targets, source, callbackUri, alternateCallerId, subject, requestedMediaTypes, requestedCallEvents).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callConnectionId"/> or <paramref name="audioFileUri"/> is null. </exception>
        public virtual async Task<CallConnectionsPlayAudioOperation> StartPlayAudioAsync(string callConnectionId, string audioFileUri, bool loop, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (callConnectionId == null)
            {
                throw new ArgumentNullException(nameof(callConnectionId));
            }
            if (audioFileUri == null)
            {
                throw new ArgumentNullException(nameof(audioFileUri));
            }

            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.StartPlayAudio");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.PlayAudioAsync(callConnectionId, audioFileUri, loop, operationContext, audioFileId, callbackUri, cancellationToken).ConfigureAwait(false);
                return new CallConnectionsPlayAudioOperation(_clientDiagnostics, _pipeline, RestClient.CreatePlayAudioRequest(callConnectionId, audioFileUri, loop, operationContext, audioFileId, callbackUri).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callConnectionId"/> or <paramref name="audioFileUri"/> is null. </exception>
        public virtual CallConnectionsPlayAudioOperation StartPlayAudio(string callConnectionId, string audioFileUri, bool loop, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (callConnectionId == null)
            {
                throw new ArgumentNullException(nameof(callConnectionId));
            }
            if (audioFileUri == null)
            {
                throw new ArgumentNullException(nameof(audioFileUri));
            }

            using var scope = _clientDiagnostics.CreateScope("CallConnectionsClient.StartPlayAudio");
            scope.Start();
            try
            {
                var originalResponse = RestClient.PlayAudio(callConnectionId, audioFileUri, loop, operationContext, audioFileId, callbackUri, cancellationToken);
                return new CallConnectionsPlayAudioOperation(_clientDiagnostics, _pipeline, RestClient.CreatePlayAudioRequest(callConnectionId, audioFileUri, loop, operationContext, audioFileId, callbackUri).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
