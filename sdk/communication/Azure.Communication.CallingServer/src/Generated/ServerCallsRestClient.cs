// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    internal partial class ServerCallsRestClient
    {
        private string endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServerCallsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public ServerCallsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-09-15-preview")
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetParticipantsRequest(string serverCallId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get participants from a server call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public async Task<Response<IReadOnlyList<CallParticipantInternal>>> GetParticipantsAsync(string serverCallId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateGetParticipantsRequest(serverCallId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get participants from a server call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public Response<IReadOnlyList<CallParticipantInternal>> GetParticipants(string serverCallId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateGetParticipantsRequest(serverCallId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddParticipantRequest(string serverCallId, PhoneNumberIdentifierModel alternateCallerId, CommunicationIdentifierModel participant, string operationContext, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new AddParticipantRequest()
            {
                AlternateCallerId = alternateCallerId,
                Participant = participant,
                OperationContext = operationContext,
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="alternateCallerId"> The alternate identity of source participant. </param>
        /// <param name="participant"> The participant to be added to the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public async Task<Response<AddParticipantResult>> AddParticipantAsync(string serverCallId, PhoneNumberIdentifierModel alternateCallerId = null, CommunicationIdentifierModel participant = null, string operationContext = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateAddParticipantRequest(serverCallId, alternateCallerId, participant, operationContext, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AddParticipantResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AddParticipantResult.DeserializeAddParticipantResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="alternateCallerId"> The alternate identity of source participant. </param>
        /// <param name="participant"> The participant to be added to the call. </param>
        /// <param name="operationContext"> The operation context. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public Response<AddParticipantResult> AddParticipant(string serverCallId, PhoneNumberIdentifierModel alternateCallerId = null, CommunicationIdentifierModel participant = null, string operationContext = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateAddParticipantRequest(serverCallId, alternateCallerId, participant, operationContext, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AddParticipantResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AddParticipantResult.DeserializeAddParticipantResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveParticipantByIdRequest(string serverCallId, CommunicationIdentifierModel identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/:removeUser", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new RemoveParticipantByIdRequest(identifier);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="identifier"> The identifier of the participant to be added from the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response> RemoveParticipantByIdAsync(string serverCallId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateRemoveParticipantByIdRequest(serverCallId, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="identifier"> The identifier of the participant to be added from the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="identifier"/> is null. </exception>
        public Response RemoveParticipantById(string serverCallId, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateRemoveParticipantByIdRequest(serverCallId, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetParticipantRequest(string serverCallId, string participantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get participant by participant id from a call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response<CallParticipantInternal>> GetParticipantAsync(string serverCallId, string participantId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateGetParticipantRequest(serverCallId, participantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallParticipantInternal.DeserializeCallParticipantInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get participant by participant id from a call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public Response<CallParticipantInternal> GetParticipant(string serverCallId, string participantId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateGetParticipantRequest(serverCallId, participantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallParticipantInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallParticipantInternal.DeserializeCallParticipantInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveParticipantRequest(string serverCallId, string participantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Remove participant from the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response> RemoveParticipantAsync(string serverCallId, string participantId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(serverCallId, participantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove participant from the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public Response RemoveParticipant(string serverCallId, string participantId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(serverCallId, participantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartHoldMusicRequest(string serverCallId, string participantId, string audioFileUri, string audioFileId, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendPath("/:startHoldMusic", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StartHoldMusicRequest()
            {
                AudioFileUri = audioFileUri,
                AudioFileId = audioFileId,
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play hold music to a participant. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the hold music request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response<StartHoldMusicResult>> StartHoldMusicAsync(string serverCallId, string participantId, string audioFileUri = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateStartHoldMusicRequest(serverCallId, participantId, audioFileUri, audioFileId, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StartHoldMusicResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StartHoldMusicResult.DeserializeStartHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play hold music to a participant. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the hold music request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public Response<StartHoldMusicResult> StartHoldMusic(string serverCallId, string participantId, string audioFileUri = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateStartHoldMusicRequest(serverCallId, participantId, audioFileUri, audioFileId, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StartHoldMusicResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StartHoldMusicResult.DeserializeStartHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopHoldMusicRequest(string serverCallId, string participantId, string startHoldMusicOperationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendPath("/:stopHoldMusic", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StopHoldMusicRequest(startHoldMusicOperationId);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Stop hold music to a participant. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="startHoldMusicOperationId"> The operationId of the StartHoldMusicOperation to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/>, <paramref name="participantId"/>, or <paramref name="startHoldMusicOperationId"/> is null. </exception>
        public async Task<Response<StopHoldMusicResult>> StopHoldMusicAsync(string serverCallId, string participantId, string startHoldMusicOperationId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }
            if (startHoldMusicOperationId == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicOperationId));
            }

            using var message = CreateStopHoldMusicRequest(serverCallId, participantId, startHoldMusicOperationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StopHoldMusicResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StopHoldMusicResult.DeserializeStopHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop hold music to a participant. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="participantId"> The participant id. </param>
        /// <param name="startHoldMusicOperationId"> The operationId of the StartHoldMusicOperation to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/>, <paramref name="participantId"/>, or <paramref name="startHoldMusicOperationId"/> is null. </exception>
        public Response<StopHoldMusicResult> StopHoldMusic(string serverCallId, string participantId, string startHoldMusicOperationId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }
            if (startHoldMusicOperationId == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicOperationId));
            }

            using var message = CreateStopHoldMusicRequest(serverCallId, participantId, startHoldMusicOperationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StopHoldMusicResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StopHoldMusicResult.DeserializeStopHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateParticipantPlayAudioRequest(string serverCallId, string participantId, bool loop, string audioFileUri, string operationContext, string audioFileId, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendPath("/:playAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new PlayAudioRequest(loop)
            {
                AudioFileUri = audioFileUri,
                OperationContext = operationContext,
                AudioFileId = audioFileId,
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="serverCallId"> Server call id. </param>
        /// <param name="participantId"> Participant id. </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response<PlayAudioResult>> ParticipantPlayAudioAsync(string serverCallId, string participantId, bool loop, string audioFileUri = null, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateParticipantPlayAudioRequest(serverCallId, participantId, loop, audioFileUri, operationContext, audioFileId, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="serverCallId"> Server call id. </param>
        /// <param name="participantId"> Participant id. </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="participantId"/> is null. </exception>
        public Response<PlayAudioResult> ParticipantPlayAudio(string serverCallId, string participantId, bool loop, string audioFileUri = null, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateParticipantPlayAudioRequest(serverCallId, participantId, loop, audioFileUri, operationContext, audioFileId, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartRecordingRequest(string serverCallId, string recordingStateCallbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/recordings", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StartCallRecordingRequest()
            {
                RecordingStateCallbackUri = recordingStateCallbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Start recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingStateCallbackUri"> The uri to send notifications to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public async Task<Response<StartCallRecordingResult>> StartRecordingAsync(string serverCallId, string recordingStateCallbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateStartRecordingRequest(serverCallId, recordingStateCallbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StartCallRecordingResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StartCallRecordingResult.DeserializeStartCallRecordingResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingStateCallbackUri"> The uri to send notifications to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public Response<StartCallRecordingResult> StartRecording(string serverCallId, string recordingStateCallbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateStartRecordingRequest(serverCallId, recordingStateCallbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StartCallRecordingResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StartCallRecordingResult.DeserializeStartCallRecordingResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRecordingPropertiesRequest(string serverCallId, string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get call recording properties. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public async Task<Response<CallRecordingProperties>> GetRecordingPropertiesAsync(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateGetRecordingPropertiesRequest(serverCallId, recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallRecordingProperties value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallRecordingProperties.DeserializeCallRecordingProperties(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get call recording properties. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public Response<CallRecordingProperties> GetRecordingProperties(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateGetRecordingPropertiesRequest(serverCallId, recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallRecordingProperties value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallRecordingProperties.DeserializeCallRecordingProperties(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopRecordingRequest(string serverCallId, string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Stop recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> StopRecordingAsync(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateStopRecordingRequest(serverCallId, recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public Response StopRecording(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateStopRecordingRequest(serverCallId, recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePauseRecordingRequest(string serverCallId, string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendPath("/:pause", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Pause recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> PauseRecordingAsync(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreatePauseRecordingRequest(serverCallId, recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pause recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public Response PauseRecording(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreatePauseRecordingRequest(serverCallId, recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateResumeRecordingRequest(string serverCallId, string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendPath("/:resume", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Resume recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> ResumeRecordingAsync(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateResumeRecordingRequest(serverCallId, recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Resume recording the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> or <paramref name="recordingId"/> is null. </exception>
        public Response ResumeRecording(string serverCallId, string recordingId, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateResumeRecordingRequest(serverCallId, recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateJoinCallRequest(string serverCallId, CommunicationIdentifierModel source, string callbackUri, string subject, IEnumerable<MediaType> requestedMediaTypes, IEnumerable<EventSubscriptionType> requestedCallEvents)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/:join", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            JoinCallRequestInternal joinCallRequestInternal = new JoinCallRequestInternal(source, callbackUri)
            {
                Subject = subject
            };
            if (requestedMediaTypes != null)
            {
                foreach (var value in requestedMediaTypes)
                {
                    joinCallRequestInternal.RequestedMediaTypes.Add(value);
                }
            }
            if (requestedCallEvents != null)
            {
                foreach (var value in requestedCallEvents)
                {
                    joinCallRequestInternal.RequestedCallEvents.Add(value);
                }
            }
            var model = joinCallRequestInternal;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Join a call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/>, <paramref name="source"/>, or <paramref name="callbackUri"/> is null. </exception>
        public async Task<Response<JoinCallResultInternal>> JoinCallAsync(string serverCallId, CommunicationIdentifierModel source, string callbackUri, string subject = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var message = CreateJoinCallRequest(serverCallId, source, callbackUri, subject, requestedMediaTypes, requestedCallEvents);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        JoinCallResultInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JoinCallResultInternal.DeserializeJoinCallResultInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Join a call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/>, <paramref name="source"/>, or <paramref name="callbackUri"/> is null. </exception>
        public Response<JoinCallResultInternal> JoinCall(string serverCallId, CommunicationIdentifierModel source, string callbackUri, string subject = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var message = CreateJoinCallRequest(serverCallId, source, callbackUri, subject, requestedMediaTypes, requestedCallEvents);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        JoinCallResultInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JoinCallResultInternal.DeserializeJoinCallResultInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePlayAudioRequest(string serverCallId, bool loop, string audioFileUri, string operationContext, string audioFileId, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/serverCalls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("/:playAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new PlayAudioRequest(loop)
            {
                AudioFileUri = audioFileUri,
                OperationContext = operationContext,
                AudioFileId = audioFileId,
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public async Task<Response<PlayAudioResult>> PlayAudioAsync(string serverCallId, bool loop, string audioFileUri = null, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreatePlayAudioRequest(serverCallId, loop, audioFileUri, operationContext, audioFileId, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="serverCallId"> The server call id. </param>
        /// <param name="loop"> The flag indicating whether audio file needs to be played in loop or not. </param>
        /// <param name="audioFileUri">
        /// The media resource uri of the play audio request.
        /// 
        /// Currently only Wave file (.wav) format audio prompts are supported.
        /// 
        /// More specifically, the audio content in the wave file must be mono (single-channel),
        /// 
        /// 16-bit samples with a 16,000 (16KHz) sampling rate.
        /// </param>
        /// <param name="operationContext"> The value to identify context of the operation. </param>
        /// <param name="audioFileId"> An id for the media in the AudioFileUri, using which we cache the media resource. </param>
        /// <param name="callbackUri"> The callback Uri to receive PlayAudio status notifications. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public Response<PlayAudioResult> PlayAudio(string serverCallId, bool loop, string audioFileUri = null, string operationContext = null, string audioFileId = null, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreatePlayAudioRequest(serverCallId, loop, audioFileUri, operationContext, audioFileId, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
