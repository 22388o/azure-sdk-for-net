// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    internal partial class ServerCallsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ServerCallsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public ServerCallsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2022-04-07-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateTerminateCallRequest(string serverCallId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calls/", false);
            uri.AppendPath(serverCallId, true);
            uri.AppendPath("::terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var model = new TerminateCallRequest()
            {
                Reason = reason
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Terminate a call using ServerCallId. </summary>
        /// <param name="serverCallId"> The terminate call request. </param>
        /// <param name="reason"> The TerminateCallRequestReason to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public async Task<Response> TerminateCallAsync(string serverCallId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateTerminateCallRequest(serverCallId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Terminate a call using ServerCallId. </summary>
        /// <param name="serverCallId"> The terminate call request. </param>
        /// <param name="reason"> The TerminateCallRequestReason to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCallId"/> is null. </exception>
        public Response TerminateCall(string serverCallId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (serverCallId == null)
            {
                throw new ArgumentNullException(nameof(serverCallId));
            }

            using var message = CreateTerminateCallRequest(serverCallId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAnswerCallRequest(string incomingCallContext, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calls:answer", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new AnswerCallRequest(incomingCallContext)
            {
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Answer a call using the IncomingCallContext from Event Grid. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> is null. </exception>
        public async Task<Response<AnswerCallResponse>> AnswerCallAsync(string incomingCallContext, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }

            using var message = CreateAnswerCallRequest(incomingCallContext, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AnswerCallResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AnswerCallResponse.DeserializeAnswerCallResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Answer a call using the IncomingCallContext from Event Grid. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> is null. </exception>
        public Response<AnswerCallResponse> AnswerCall(string incomingCallContext, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }

            using var message = CreateAnswerCallRequest(incomingCallContext, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AnswerCallResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AnswerCallResponse.DeserializeAnswerCallResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRedirectCallRequest(string incomingCallContext, CommunicationIdentifierModel target, string callbackUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calls:redirect", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var model = new RedirectCallRequest(incomingCallContext, target)
            {
                CallbackUri = callbackUri
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Redirect a call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="target"> The target identity to redirect the call to. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> or <paramref name="target"/> is null. </exception>
        public async Task<Response> RedirectCallAsync(string incomingCallContext, CommunicationIdentifierModel target, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (target == null)
            {
                throw new ArgumentNullException(nameof(target));
            }

            using var message = CreateRedirectCallRequest(incomingCallContext, target, callbackUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Redirect a call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="target"> The target identity to redirect the call to. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> or <paramref name="target"/> is null. </exception>
        public Response RedirectCall(string incomingCallContext, CommunicationIdentifierModel target, string callbackUri = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (target == null)
            {
                throw new ArgumentNullException(nameof(target));
            }

            using var message = CreateRedirectCallRequest(incomingCallContext, target, callbackUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRejectCallRequest(string incomingCallContext, string callbackUri, CallRejectReason? callRejectReason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/calls:reject", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var model = new RejectCallRequest(incomingCallContext)
            {
                CallbackUri = callbackUri,
                CallRejectReason = callRejectReason
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Reject the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="callRejectReason"> The rejection reason. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> is null. </exception>
        public async Task<Response> RejectCallAsync(string incomingCallContext, string callbackUri = null, CallRejectReason? callRejectReason = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }

            using var message = CreateRejectCallRequest(incomingCallContext, callbackUri, callRejectReason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Reject the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUri"> The callback uri. </param>
        /// <param name="callRejectReason"> The rejection reason. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> is null. </exception>
        public Response RejectCall(string incomingCallContext, string callbackUri = null, CallRejectReason? callRejectReason = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }

            using var message = CreateRejectCallRequest(incomingCallContext, callbackUri, callRejectReason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
