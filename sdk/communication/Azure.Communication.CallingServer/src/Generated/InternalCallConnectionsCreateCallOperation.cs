// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    /// <summary> Create a new call. </summary>
    internal partial class InternalCallConnectionsCreateCallOperation : Operation<CreateCallResultInternal>, IOperationSource<CreateCallResultInternal>
    {
        private readonly OperationInternals<CreateCallResultInternal> _operation;

        /// <summary> Initializes a new instance of InternalCallConnectionsCreateCallOperation for mocking. </summary>
        protected InternalCallConnectionsCreateCallOperation()
        {
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override CreateCallResultInternal Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CreateCallResultInternal>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CreateCallResultInternal>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        CreateCallResultInternal IOperationSource<CreateCallResultInternal>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return CreateCallResultInternal.DeserializeCreateCallResultInternal(document.RootElement);
        }

        async ValueTask<CreateCallResultInternal> IOperationSource<CreateCallResultInternal>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return CreateCallResultInternal.DeserializeCreateCallResultInternal(document.RootElement);
        }
    }
}
