// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The call connection state. </summary>
    public readonly partial struct CallConnectionState : IEquatable<CallConnectionState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CallConnectionState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CallConnectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string IdleValue = "idle";
        private const string IncomingValue = "incoming";
        private const string EstablishingValue = "establishing";
        private const string EstablishedValue = "established";
        private const string HoldValue = "hold";
        private const string UnholdValue = "unhold";
        private const string TransferringValue = "transferring";
        private const string RedirectingValue = "redirecting";
        private const string TerminatingValue = "terminating";
        private const string TerminatedValue = "terminated";

        /// <summary> unknown. </summary>
        public static CallConnectionState Unknown { get; } = new CallConnectionState(UnknownValue);
        /// <summary> idle. </summary>
        public static CallConnectionState Idle { get; } = new CallConnectionState(IdleValue);
        /// <summary> incoming. </summary>
        public static CallConnectionState Incoming { get; } = new CallConnectionState(IncomingValue);
        /// <summary> establishing. </summary>
        public static CallConnectionState Establishing { get; } = new CallConnectionState(EstablishingValue);
        /// <summary> established. </summary>
        public static CallConnectionState Established { get; } = new CallConnectionState(EstablishedValue);
        /// <summary> hold. </summary>
        public static CallConnectionState Hold { get; } = new CallConnectionState(HoldValue);
        /// <summary> unhold. </summary>
        public static CallConnectionState Unhold { get; } = new CallConnectionState(UnholdValue);
        /// <summary> transferring. </summary>
        public static CallConnectionState Transferring { get; } = new CallConnectionState(TransferringValue);
        /// <summary> redirecting. </summary>
        public static CallConnectionState Redirecting { get; } = new CallConnectionState(RedirectingValue);
        /// <summary> terminating. </summary>
        public static CallConnectionState Terminating { get; } = new CallConnectionState(TerminatingValue);
        /// <summary> terminated. </summary>
        public static CallConnectionState Terminated { get; } = new CallConnectionState(TerminatedValue);
        /// <summary> Determines if two <see cref="CallConnectionState"/> values are the same. </summary>
        public static bool operator ==(CallConnectionState left, CallConnectionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CallConnectionState"/> values are not the same. </summary>
        public static bool operator !=(CallConnectionState left, CallConnectionState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CallConnectionState"/>. </summary>
        public static implicit operator CallConnectionState(string value) => new CallConnectionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CallConnectionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CallConnectionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
