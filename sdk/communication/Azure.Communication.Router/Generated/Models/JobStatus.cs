// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Router.Models
{
    /// <summary> The JobStatus. </summary>
    public readonly partial struct JobStatus : IEquatable<JobStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="JobStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingClassificationValue = "PendingClassification";
        private const string QueuedValue = "Queued";
        private const string AssignedValue = "Assigned";
        private const string CompletedValue = "Completed";
        private const string ClosedValue = "Closed";
        private const string CancelledValue = "Cancelled";
        private const string ClassificationFailedValue = "ClassificationFailed";

        /// <summary> PendingClassification. </summary>
        public static JobStatus PendingClassification { get; } = new JobStatus(PendingClassificationValue);
        /// <summary> Queued. </summary>
        public static JobStatus Queued { get; } = new JobStatus(QueuedValue);
        /// <summary> Assigned. </summary>
        public static JobStatus Assigned { get; } = new JobStatus(AssignedValue);
        /// <summary> Completed. </summary>
        public static JobStatus Completed { get; } = new JobStatus(CompletedValue);
        /// <summary> Closed. </summary>
        public static JobStatus Closed { get; } = new JobStatus(ClosedValue);
        /// <summary> Cancelled. </summary>
        public static JobStatus Cancelled { get; } = new JobStatus(CancelledValue);
        /// <summary> ClassificationFailed. </summary>
        public static JobStatus ClassificationFailed { get; } = new JobStatus(ClassificationFailedValue);
        /// <summary> Determines if two <see cref="JobStatus"/> values are the same. </summary>
        public static bool operator ==(JobStatus left, JobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobStatus"/> values are not the same. </summary>
        public static bool operator !=(JobStatus left, JobStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobStatus"/>. </summary>
        public static implicit operator JobStatus(string value) => new JobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
