// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Router.Models
{
    /// <summary> The WorkerState. </summary>
    public readonly partial struct WorkerState : IEquatable<WorkerState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="WorkerState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string DrainingValue = "Draining";

        /// <summary> Active. </summary>
        public static WorkerState Active { get; } = new WorkerState(ActiveValue);
        /// <summary> Draining. </summary>
        public static WorkerState Draining { get; } = new WorkerState(DrainingValue);
        /// <summary> Determines if two <see cref="WorkerState"/> values are the same. </summary>
        public static bool operator ==(WorkerState left, WorkerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkerState"/> values are not the same. </summary>
        public static bool operator !=(WorkerState left, WorkerState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkerState"/>. </summary>
        public static implicit operator WorkerState(string value) => new WorkerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
