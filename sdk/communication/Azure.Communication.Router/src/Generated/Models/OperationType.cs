// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Router.Models
{
    /// <summary> The OperationType. </summary>
    internal readonly partial struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="OperationType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddValue = "Add";
        private const string RemoveValue = "Remove";
        private const string ReplaceValue = "Replace";
        private const string MoveValue = "Move";
        private const string CopyValue = "Copy";
        private const string TestValue = "Test";
        private const string InvalidValue = "Invalid";

        /// <summary> Add. </summary>
        public static OperationType Add { get; } = new OperationType(AddValue);
        /// <summary> Remove. </summary>
        public static OperationType Remove { get; } = new OperationType(RemoveValue);
        /// <summary> Replace. </summary>
        public static OperationType Replace { get; } = new OperationType(ReplaceValue);
        /// <summary> Move. </summary>
        public static OperationType Move { get; } = new OperationType(MoveValue);
        /// <summary> Copy. </summary>
        public static OperationType Copy { get; } = new OperationType(CopyValue);
        /// <summary> Test. </summary>
        public static OperationType Test { get; } = new OperationType(TestValue);
        /// <summary> Invalid. </summary>
        public static OperationType Invalid { get; } = new OperationType(InvalidValue);
        /// <summary> Determines if two <see cref="OperationType"/> values are the same. </summary>
        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationType"/> values are not the same. </summary>
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperationType"/>. </summary>
        public static implicit operator OperationType(string value) => new OperationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
