// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.Router.Models
{
    public partial class Worker
    {
        internal static Worker DeserializeWorker(JsonElement element)
        {
            Optional<string> id = default;
            Optional<WorkerState> state = default;
            Optional<IReadOnlyList<WorkerQueueAssignmentsItem>> queueAssignments = default;
            Optional<int> totalCapacityScore = default;
            Optional<IReadOnlyDictionary<string, int>> abilities = default;
            Optional<IReadOnlyDictionary<string, string>> labels = default;
            Optional<IReadOnlyList<SocketConfiguration>> socketConfigurations = default;
            Optional<IReadOnlyList<Offer>> offers = default;
            Optional<IReadOnlyList<JobAssignment>> assignedJobs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new WorkerState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queueAssignments"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queueAssignments = null;
                        continue;
                    }
                    List<WorkerQueueAssignmentsItem> array = new List<WorkerQueueAssignmentsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkerQueueAssignmentsItem.DeserializeWorkerQueueAssignmentsItem(item));
                    }
                    queueAssignments = array;
                    continue;
                }
                if (property.NameEquals("totalCapacityScore"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalCapacityScore = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("abilities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        abilities = null;
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    abilities = dictionary;
                    continue;
                }
                if (property.NameEquals("labels"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        labels = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    labels = dictionary;
                    continue;
                }
                if (property.NameEquals("socketConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        socketConfigurations = null;
                        continue;
                    }
                    List<SocketConfiguration> array = new List<SocketConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SocketConfiguration.DeserializeSocketConfiguration(item));
                    }
                    socketConfigurations = array;
                    continue;
                }
                if (property.NameEquals("offers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        offers = null;
                        continue;
                    }
                    List<Offer> array = new List<Offer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Offer.DeserializeOffer(item));
                    }
                    offers = array;
                    continue;
                }
                if (property.NameEquals("assignedJobs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        assignedJobs = null;
                        continue;
                    }
                    List<JobAssignment> array = new List<JobAssignment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JobAssignment.DeserializeJobAssignment(item));
                    }
                    assignedJobs = array;
                    continue;
                }
            }
            return new Worker(id.Value, Optional.ToNullable(state), Optional.ToList(queueAssignments), Optional.ToNullable(totalCapacityScore), Optional.ToDictionary(abilities), Optional.ToDictionary(labels), Optional.ToList(socketConfigurations), Optional.ToList(offers), Optional.ToList(assignedJobs));
        }
    }
}
