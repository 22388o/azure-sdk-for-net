// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.Router.Models
{
    public partial class Job
    {
        internal static Job DeserializeJob(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> channelReference = default;
            Optional<JobType> jobType = default;
            Optional<JobStatus> jobStatus = default;
            Optional<DateTimeOffset> enqueueTimeUtc = default;
            Optional<string> channelId = default;
            Optional<string> classificationPolicyId = default;
            Optional<string> queueId = default;
            Optional<int> priority = default;
            Optional<string> dispositionCode = default;
            Optional<IReadOnlyDictionary<string, int>> requiredAbilities = default;
            Optional<IReadOnlyDictionary<string, string>> labels = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelReference"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        channelReference = null;
                        continue;
                    }
                    channelReference = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobType = new JobType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("jobStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobStatus = new JobStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enqueueTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enqueueTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("channelId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        channelId = null;
                        continue;
                    }
                    channelId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("classificationPolicyId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        classificationPolicyId = null;
                        continue;
                    }
                    classificationPolicyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queueId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queueId = null;
                        continue;
                    }
                    queueId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("priority"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    priority = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dispositionCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dispositionCode = null;
                        continue;
                    }
                    dispositionCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredAbilities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requiredAbilities = null;
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredAbilities = dictionary;
                    continue;
                }
                if (property.NameEquals("labels"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        labels = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    labels = dictionary;
                    continue;
                }
            }
            return new Job(id.Value, channelReference.Value, Optional.ToNullable(jobType), Optional.ToNullable(jobStatus), Optional.ToNullable(enqueueTimeUtc), channelId.Value, classificationPolicyId.Value, queueId.Value, Optional.ToNullable(priority), dispositionCode.Value, Optional.ToDictionary(requiredAbilities), Optional.ToDictionary(labels));
        }
    }
}
