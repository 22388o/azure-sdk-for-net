// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Chat
{
    /// <summary> The codes for the supported languages for message templates. </summary>
    public readonly partial struct LanguageCode : IEquatable<LanguageCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LanguageCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LanguageCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnUSValue = "en_US";
        private const string ZhCNValue = "zh_CN";
        private const string EsESValue = "es_ES";

        /// <summary> en_US. </summary>
        public static LanguageCode EnUS { get; } = new LanguageCode(EnUSValue);
        /// <summary> zh_CN. </summary>
        public static LanguageCode ZhCN { get; } = new LanguageCode(ZhCNValue);
        /// <summary> es_ES. </summary>
        public static LanguageCode EsES { get; } = new LanguageCode(EsESValue);
        /// <summary> Determines if two <see cref="LanguageCode"/> values are the same. </summary>
        public static bool operator ==(LanguageCode left, LanguageCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LanguageCode"/> values are not the same. </summary>
        public static bool operator !=(LanguageCode left, LanguageCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LanguageCode"/>. </summary>
        public static implicit operator LanguageCode(string value) => new LanguageCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LanguageCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LanguageCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
