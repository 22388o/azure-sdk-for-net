// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Chat
{
    /// <summary> The cross-platform threadless message type. </summary>
    public readonly partial struct ThreadlessMessageType : IEquatable<ThreadlessMessageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ThreadlessMessageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ThreadlessMessageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TemplateValue = "template";
        private const string TextValue = "text";
        private const string MediaValue = "media";

        /// <summary> template. </summary>
        public static ThreadlessMessageType Template { get; } = new ThreadlessMessageType(TemplateValue);
        /// <summary> text. </summary>
        public static ThreadlessMessageType Text { get; } = new ThreadlessMessageType(TextValue);
        /// <summary> media. </summary>
        public static ThreadlessMessageType Media { get; } = new ThreadlessMessageType(MediaValue);
        /// <summary> Determines if two <see cref="ThreadlessMessageType"/> values are the same. </summary>
        public static bool operator ==(ThreadlessMessageType left, ThreadlessMessageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThreadlessMessageType"/> values are not the same. </summary>
        public static bool operator !=(ThreadlessMessageType left, ThreadlessMessageType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThreadlessMessageType"/>. </summary>
        public static implicit operator ThreadlessMessageType(string value) => new ThreadlessMessageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThreadlessMessageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThreadlessMessageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
