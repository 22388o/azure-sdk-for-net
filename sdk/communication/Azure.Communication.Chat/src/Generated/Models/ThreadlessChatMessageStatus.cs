// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Chat
{
    /// <summary> The status of a threadless chat message. </summary>
    public readonly partial struct ThreadlessChatMessageStatus : IEquatable<ThreadlessChatMessageStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ThreadlessChatMessageStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ThreadlessChatMessageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnqueuedValue = "Enqueued";
        private const string SentValue = "Sent";
        private const string DeliveredValue = "Delivered";
        private const string ReadValue = "Read";
        private const string FailedValue = "Failed";
        private const string UnknownValue = "Unknown";

        /// <summary> Enqueued. </summary>
        public static ThreadlessChatMessageStatus Enqueued { get; } = new ThreadlessChatMessageStatus(EnqueuedValue);
        /// <summary> Sent. </summary>
        public static ThreadlessChatMessageStatus Sent { get; } = new ThreadlessChatMessageStatus(SentValue);
        /// <summary> Delivered. </summary>
        public static ThreadlessChatMessageStatus Delivered { get; } = new ThreadlessChatMessageStatus(DeliveredValue);
        /// <summary> Read. </summary>
        public static ThreadlessChatMessageStatus Read { get; } = new ThreadlessChatMessageStatus(ReadValue);
        /// <summary> Failed. </summary>
        public static ThreadlessChatMessageStatus Failed { get; } = new ThreadlessChatMessageStatus(FailedValue);
        /// <summary> Unknown. </summary>
        public static ThreadlessChatMessageStatus Unknown { get; } = new ThreadlessChatMessageStatus(UnknownValue);
        /// <summary> Determines if two <see cref="ThreadlessChatMessageStatus"/> values are the same. </summary>
        public static bool operator ==(ThreadlessChatMessageStatus left, ThreadlessChatMessageStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThreadlessChatMessageStatus"/> values are not the same. </summary>
        public static bool operator !=(ThreadlessChatMessageStatus left, ThreadlessChatMessageStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThreadlessChatMessageStatus"/>. </summary>
        public static implicit operator ThreadlessChatMessageStatus(string value) => new ThreadlessChatMessageStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThreadlessChatMessageStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThreadlessChatMessageStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
