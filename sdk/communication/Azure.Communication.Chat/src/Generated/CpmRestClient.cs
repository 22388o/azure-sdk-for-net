// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Chat
{
    internal partial class CpmRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of CpmRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="endpoint"/> is null. </exception>
        public CpmRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
        }

        internal HttpMessage CreateSendChatMessageRequest(string content, string senderDisplayName, ChatMessageType? type, string @from, IEnumerable<string> recipients, IDictionary<string, string> metadata)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/chat/fireandforget/messages", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            SendCpmChatMessageRequest sendCpmChatMessageRequest = new SendCpmChatMessageRequest(content)
            {
                SenderDisplayName = senderDisplayName,
                Type = type,
                From = @from
            };
            if (recipients != null)
            {
                foreach (var value in recipients)
                {
                    sendCpmChatMessageRequest.Recipients.Add(value);
                }
            }
            if (metadata != null)
            {
                foreach (var value in metadata)
                {
                    sendCpmChatMessageRequest.Metadata.Add(value);
                }
            }
            var model = sendCpmChatMessageRequest;
            var content0 = new Utf8JsonRequestContent();
            content0.JsonWriter.WriteObjectValue(model);
            request.Content = content0;
            return message;
        }

        /// <summary> Sends a Fire and Forget CPM message. </summary>
        /// <param name="content"> Chat message content. </param>
        /// <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
        /// <param name="type"> The chat message type. </param>
        /// <param name="from"> The from identifier that is owned by the authenticated account. </param>
        /// <param name="recipients"> The channel user identifiers of the recipients. </param>
        /// <param name="metadata"> Message metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public async Task<Response<SendCpmChatMessageResult>> SendChatMessageAsync(string content, string senderDisplayName = null, ChatMessageType? type = null, string @from = null, IEnumerable<string> recipients = null, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var message = CreateSendChatMessageRequest(content, senderDisplayName, type, @from, recipients, metadata);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        SendCpmChatMessageResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SendCpmChatMessageResult.DeserializeSendCpmChatMessageResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sends a Fire and Forget CPM message. </summary>
        /// <param name="content"> Chat message content. </param>
        /// <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
        /// <param name="type"> The chat message type. </param>
        /// <param name="from"> The from identifier that is owned by the authenticated account. </param>
        /// <param name="recipients"> The channel user identifiers of the recipients. </param>
        /// <param name="metadata"> Message metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public Response<SendCpmChatMessageResult> SendChatMessage(string content, string senderDisplayName = null, ChatMessageType? type = null, string @from = null, IEnumerable<string> recipients = null, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var message = CreateSendChatMessageRequest(content, senderDisplayName, type, @from, recipients, metadata);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        SendCpmChatMessageResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SendCpmChatMessageResult.DeserializeSendCpmChatMessageResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetChatMessageStatusRequest(string chatMessageId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/chat/fireandforget/messages/", false);
            uri.AppendPath(chatMessageId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets message delivery status by id. </summary>
        /// <param name="chatMessageId"> The message id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="chatMessageId"/> is null. </exception>
        public async Task<Response<GetCpmChatMessageStatusResult>> GetChatMessageStatusAsync(string chatMessageId, CancellationToken cancellationToken = default)
        {
            if (chatMessageId == null)
            {
                throw new ArgumentNullException(nameof(chatMessageId));
            }

            using var message = CreateGetChatMessageStatusRequest(chatMessageId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetCpmChatMessageStatusResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetCpmChatMessageStatusResult.DeserializeGetCpmChatMessageStatusResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets message delivery status by id. </summary>
        /// <param name="chatMessageId"> The message id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="chatMessageId"/> is null. </exception>
        public Response<GetCpmChatMessageStatusResult> GetChatMessageStatus(string chatMessageId, CancellationToken cancellationToken = default)
        {
            if (chatMessageId == null)
            {
                throw new ArgumentNullException(nameof(chatMessageId));
            }

            using var message = CreateGetChatMessageStatusRequest(chatMessageId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetCpmChatMessageStatusResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetCpmChatMessageStatusResult.DeserializeGetCpmChatMessageStatusResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
