// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class representing collection of CsmPublishingCredentialsPoliciesEntity and their operations over its parent. </summary>
    public partial class SiteSlotBasicPublishingCredentialsPolicyFtpCollection : ArmCollection, IEnumerable<SiteSlotBasicPublishingCredentialsPolicyFtp>, IAsyncEnumerable<SiteSlotBasicPublishingCredentialsPolicyFtp>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WebAppsRestOperations _webAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SiteSlotBasicPublishingCredentialsPolicyFtpCollection"/> class for mocking. </summary>
        protected SiteSlotBasicPublishingCredentialsPolicyFtpCollection()
        {
        }

        /// <summary> Initializes a new instance of SiteSlotBasicPublishingCredentialsPolicyFtpCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal SiteSlotBasicPublishingCredentialsPolicyFtpCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _webAppsRestClient = new WebAppsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => SiteSlot.ResourceType;

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies/ftp
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_UpdateFtpAllowedSlot
        /// <summary> Description for Updates whether FTP is allowed on the site or not. </summary>
        /// <param name="csmPublishingAccessPoliciesEntity"> The CsmPublishingCredentialsPoliciesEntity to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="csmPublishingAccessPoliciesEntity"/> is null. </exception>
        public virtual WebAppUpdateFtpAllowedSlotOperation CreateOrUpdate(CsmPublishingCredentialsPoliciesEntityData csmPublishingAccessPoliciesEntity, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (csmPublishingAccessPoliciesEntity == null)
            {
                throw new ArgumentNullException(nameof(csmPublishingAccessPoliciesEntity));
            }

            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.UpdateFtpAllowedSlot(Id.ResourceGroupName, Id.Parent.Name, Id.Name, csmPublishingAccessPoliciesEntity, cancellationToken);
                var operation = new WebAppUpdateFtpAllowedSlotOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies/ftp
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_UpdateFtpAllowedSlot
        /// <summary> Description for Updates whether FTP is allowed on the site or not. </summary>
        /// <param name="csmPublishingAccessPoliciesEntity"> The CsmPublishingCredentialsPoliciesEntity to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="csmPublishingAccessPoliciesEntity"/> is null. </exception>
        public async virtual Task<WebAppUpdateFtpAllowedSlotOperation> CreateOrUpdateAsync(CsmPublishingCredentialsPoliciesEntityData csmPublishingAccessPoliciesEntity, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (csmPublishingAccessPoliciesEntity == null)
            {
                throw new ArgumentNullException(nameof(csmPublishingAccessPoliciesEntity));
            }

            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.UpdateFtpAllowedSlotAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, csmPublishingAccessPoliciesEntity, cancellationToken).ConfigureAwait(false);
                var operation = new WebAppUpdateFtpAllowedSlotOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies/ftp
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_GetFtpAllowedSlot
        /// <summary> Description for Returns whether FTP is allowed on the site or not. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteSlotBasicPublishingCredentialsPolicyFtp> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.Get");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.GetFtpAllowedSlot(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies/ftp
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_GetFtpAllowedSlot
        /// <summary> Description for Returns whether FTP is allowed on the site or not. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteSlotBasicPublishingCredentialsPolicyFtp>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.Get");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.GetFtpAllowedSlotAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteSlotBasicPublishingCredentialsPolicyFtp> GetIfExists(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.GetFtpAllowedSlot(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<SiteSlotBasicPublishingCredentialsPolicyFtp>(null, response.GetRawResponse())
                    : Response.FromValue(new SiteSlotBasicPublishingCredentialsPolicyFtp(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteSlotBasicPublishingCredentialsPolicyFtp>> GetIfExistsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.GetFtpAllowedSlotAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<SiteSlotBasicPublishingCredentialsPolicyFtp>(null, response.GetRawResponse())
                    : Response.FromValue(new SiteSlotBasicPublishingCredentialsPolicyFtp(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> CheckIfExists(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_ListBasicPublishingCredentialsPoliciesSlot
        /// <summary> Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given site. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteSlotBasicPublishingCredentialsPolicyFtp" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteSlotBasicPublishingCredentialsPolicyFtp> GetAll(CancellationToken cancellationToken = default)
        {
            Page<SiteSlotBasicPublishingCredentialsPolicyFtp> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _webAppsRestClient.ListBasicPublishingCredentialsPoliciesSlot(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SiteSlotBasicPublishingCredentialsPolicyFtp> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _webAppsRestClient.ListBasicPublishingCredentialsPoliciesSlotNextPage(nextLink, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/basicPublishingCredentialsPolicies
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// OperationId: WebApps_ListBasicPublishingCredentialsPoliciesSlot
        /// <summary> Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given site. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteSlotBasicPublishingCredentialsPolicyFtp" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteSlotBasicPublishingCredentialsPolicyFtp> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SiteSlotBasicPublishingCredentialsPolicyFtp>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _webAppsRestClient.ListBasicPublishingCredentialsPoliciesSlotAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SiteSlotBasicPublishingCredentialsPolicyFtp>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SiteSlotBasicPublishingCredentialsPolicyFtpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _webAppsRestClient.ListBasicPublishingCredentialsPoliciesSlotNextPageAsync(nextLink, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteSlotBasicPublishingCredentialsPolicyFtp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<SiteSlotBasicPublishingCredentialsPolicyFtp> IEnumerable<SiteSlotBasicPublishingCredentialsPolicyFtp>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SiteSlotBasicPublishingCredentialsPolicyFtp> IAsyncEnumerable<SiteSlotBasicPublishingCredentialsPolicyFtp>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, SiteSlotBasicPublishingCredentialsPolicyFtp, CsmPublishingCredentialsPoliciesEntityData> Construct() { }
    }
}
