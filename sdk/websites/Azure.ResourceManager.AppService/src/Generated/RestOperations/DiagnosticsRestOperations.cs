// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    internal partial class DiagnosticsRestOperations
    {
        private string subscriptionId;
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of DiagnosticsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="subscriptionId"> Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="apiVersion"/> is null. </exception>
        public DiagnosticsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-02-01")
        {
            this.subscriptionId = subscriptionId ?? throw new ArgumentNullException(nameof(subscriptionId));
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateListHostingEnvironmentDetectorResponsesRequest(string resourceGroupName, string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/hostingEnvironments/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/detectors", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Hosting Environment Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="name"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListHostingEnvironmentDetectorResponsesAsync(string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateListHostingEnvironmentDetectorResponsesRequest(resourceGroupName, name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Hosting Environment Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="name"/> is null. </exception>
        public Response<DetectorResponseCollection> ListHostingEnvironmentDetectorResponses(string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateListHostingEnvironmentDetectorResponsesRequest(resourceGroupName, name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetHostingEnvironmentDetectorResponseRequest(string resourceGroupName, string name, string detectorName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/hostingEnvironments/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Hosting Environment Detector Response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> App Service Environment Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="name"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<AppServiceDetectorData>> GetHostingEnvironmentDetectorResponseAsync(string resourceGroupName, string name, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetHostingEnvironmentDetectorResponseRequest(resourceGroupName, name, detectorName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Hosting Environment Detector Response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> App Service Environment Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="name"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<AppServiceDetectorData> GetHostingEnvironmentDetectorResponse(string resourceGroupName, string name, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetHostingEnvironmentDetectorResponseRequest(resourceGroupName, name, detectorName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorResponsesRequest(string resourceGroupName, string siteName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/detectors", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="siteName"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListSiteDetectorResponsesAsync(string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDetectorResponsesRequest(resourceGroupName, siteName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="siteName"/> is null. </exception>
        public Response<DetectorResponseCollection> ListSiteDetectorResponses(string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDetectorResponsesRequest(resourceGroupName, siteName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDetectorResponseRequest(string resourceGroupName, string siteName, string detectorName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get site detector response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<AppServiceDetectorData>> GetSiteDetectorResponseAsync(string resourceGroupName, string siteName, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorResponseRequest(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get site detector response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<AppServiceDetectorData> GetSiteDetectorResponse(string resourceGroupName, string siteName, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorResponseRequest(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDiagnosticCategoriesRequest(string resourceGroupName, string siteName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="siteName"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryCollection>> ListSiteDiagnosticCategoriesAsync(string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDiagnosticCategoriesRequest(resourceGroupName, siteName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="siteName"/> is null. </exception>
        public Response<DiagnosticCategoryCollection> ListSiteDiagnosticCategories(string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDiagnosticCategoriesRequest(resourceGroupName, siteName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDiagnosticCategoryRequest(string resourceGroupName, string siteName, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Category. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryData>> GetSiteDiagnosticCategoryAsync(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateGetSiteDiagnosticCategoryRequest(resourceGroupName, siteName, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryData.DeserializeDiagnosticCategoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DiagnosticCategoryData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Category. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticCategoryData> GetSiteDiagnosticCategory(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateGetSiteDiagnosticCategoryRequest(resourceGroupName, siteName, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryData.DeserializeDiagnosticCategoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DiagnosticCategoryData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteAnalysesRequest(string resourceGroupName, string siteName, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysisCollection>> ListSiteAnalysesAsync(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesRequest(resourceGroupName, siteName, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticAnalysisCollection> ListSiteAnalyses(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesRequest(resourceGroupName, siteName, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteAnalysisRequest(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses/", false);
            uri.AppendPath(analysisName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="analysisName"> Analysis Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public async Task<Response<AnalysisDefinitionData>> GetSiteAnalysisAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateGetSiteAnalysisRequest(resourceGroupName, siteName, diagnosticCategory, analysisName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnalysisDefinitionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AnalysisDefinitionData.DeserializeAnalysisDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AnalysisDefinitionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="analysisName"> Analysis Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public Response<AnalysisDefinitionData> GetSiteAnalysis(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateGetSiteAnalysisRequest(resourceGroupName, siteName, diagnosticCategory, analysisName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnalysisDefinitionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AnalysisDefinitionData.DeserializeAnalysisDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AnalysisDefinitionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteSiteAnalysisRequest(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses/", false);
            uri.AppendPath(analysisName, true);
            uri.AppendPath("/execute", false);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Execute Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="analysisName"> Analysis Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysis>> ExecuteSiteAnalysisAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateExecuteSiteAnalysisRequest(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysis value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysis.DeserializeDiagnosticAnalysis(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Execute Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="analysisName"> Analysis Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public Response<DiagnosticAnalysis> ExecuteSiteAnalysis(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateExecuteSiteAnalysisRequest(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysis value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysis.DeserializeDiagnosticAnalysis(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorsRequest(string resourceGroupName, string siteName, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorCollection>> ListSiteDetectorsAsync(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsRequest(resourceGroupName, siteName, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticDetectorCollection> ListSiteDetectors(string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsRequest(resourceGroupName, siteName, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDetectorRequest(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="detectorName"> Detector Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<DetectorDefinitionAutoGeneratedData>> GetSiteDetectorAsync(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorRequest(resourceGroupName, siteName, diagnosticCategory, detectorName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorDefinitionAutoGeneratedData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorDefinitionAutoGeneratedData.DeserializeDetectorDefinitionAutoGeneratedData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DetectorDefinitionAutoGeneratedData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="detectorName"> Detector Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<DetectorDefinitionAutoGeneratedData> GetSiteDetector(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorRequest(resourceGroupName, siteName, diagnosticCategory, detectorName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorDefinitionAutoGeneratedData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorDefinitionAutoGeneratedData.DeserializeDetectorDefinitionAutoGeneratedData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DetectorDefinitionAutoGeneratedData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteSiteDetectorRequest(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            uri.AppendPath("/execute", false);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Execute Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorResponse>> ExecuteSiteDetectorAsync(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateExecuteSiteDetectorRequest(resourceGroupName, siteName, diagnosticCategory, detectorName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorResponse.DeserializeDiagnosticDetectorResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Execute Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<DiagnosticDetectorResponse> ExecuteSiteDetector(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateExecuteSiteDetectorRequest(resourceGroupName, siteName, diagnosticCategory, detectorName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorResponse.DeserializeDiagnosticDetectorResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorResponsesSlotRequest(string resourceGroupName, string siteName, string slot)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/detectors", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListSiteDetectorResponsesSlotAsync(string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDetectorResponsesSlotRequest(resourceGroupName, siteName, slot);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public Response<DetectorResponseCollection> ListSiteDetectorResponsesSlot(string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDetectorResponsesSlotRequest(resourceGroupName, siteName, slot);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDetectorResponseSlotRequest(string resourceGroupName, string siteName, string slot, string detectorName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get site detector response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<AppServiceDetectorData>> GetSiteDetectorResponseSlotAsync(string resourceGroupName, string siteName, string slot, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorResponseSlotRequest(resourceGroupName, siteName, slot, detectorName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get site detector response. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<AppServiceDetectorData> GetSiteDetectorResponseSlot(string resourceGroupName, string siteName, string slot, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorResponseSlotRequest(resourceGroupName, siteName, slot, detectorName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppServiceDetectorData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AppServiceDetectorData.DeserializeAppServiceDetectorData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AppServiceDetectorData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDiagnosticCategoriesSlotRequest(string resourceGroupName, string siteName, string slot)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryCollection>> ListSiteDiagnosticCategoriesSlotAsync(string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDiagnosticCategoriesSlotRequest(resourceGroupName, siteName, slot);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public Response<DiagnosticCategoryCollection> ListSiteDiagnosticCategoriesSlot(string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDiagnosticCategoriesSlotRequest(resourceGroupName, siteName, slot);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDiagnosticCategorySlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Category. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryData>> GetSiteDiagnosticCategorySlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateGetSiteDiagnosticCategorySlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryData.DeserializeDiagnosticCategoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DiagnosticCategoryData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Category. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticCategoryData> GetSiteDiagnosticCategorySlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateGetSiteDiagnosticCategorySlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryData.DeserializeDiagnosticCategoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DiagnosticCategoryData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteAnalysesSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysisCollection>> ListSiteAnalysesSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticAnalysisCollection> ListSiteAnalysesSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteAnalysisSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses/", false);
            uri.AppendPath(analysisName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot - optional. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="analysisName"> Analysis Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public async Task<Response<AnalysisDefinitionData>> GetSiteAnalysisSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateGetSiteAnalysisSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, analysisName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnalysisDefinitionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AnalysisDefinitionData.DeserializeAnalysisDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AnalysisDefinitionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot - optional. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="analysisName"> Analysis Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public Response<AnalysisDefinitionData> GetSiteAnalysisSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateGetSiteAnalysisSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, analysisName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnalysisDefinitionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AnalysisDefinitionData.DeserializeAnalysisDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AnalysisDefinitionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteSiteAnalysisSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/analyses/", false);
            uri.AppendPath(analysisName, true);
            uri.AppendPath("/execute", false);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Execute Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="analysisName"> Analysis Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysis>> ExecuteSiteAnalysisSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateExecuteSiteAnalysisSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, analysisName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysis value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysis.DeserializeDiagnosticAnalysis(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Execute Analysis. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="analysisName"> Analysis Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="analysisName"/> is null. </exception>
        public Response<DiagnosticAnalysis> ExecuteSiteAnalysisSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string analysisName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (analysisName == null)
            {
                throw new ArgumentNullException(nameof(analysisName));
            }

            using var message = CreateExecuteSiteAnalysisSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, analysisName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysis value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysis.DeserializeDiagnosticAnalysis(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorsSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorCollection>> ListSiteDetectorsSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticDetectorCollection> ListSiteDetectorsSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSiteDetectorSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="detectorName"> Detector Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<DetectorDefinitionAutoGeneratedData>> GetSiteDetectorSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, detectorName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorDefinitionAutoGeneratedData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorDefinitionAutoGeneratedData.DeserializeDetectorDefinitionAutoGeneratedData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DetectorDefinitionAutoGeneratedData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="detectorName"> Detector Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<DetectorDefinitionAutoGeneratedData> GetSiteDetectorSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateGetSiteDetectorSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, detectorName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorDefinitionAutoGeneratedData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorDefinitionAutoGeneratedData.DeserializeDetectorDefinitionAutoGeneratedData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DetectorDefinitionAutoGeneratedData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteSiteDetectorSlotRequest(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName, DateTimeOffset? startTime, DateTimeOffset? endTime, string timeGrain)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Web/sites/", false);
            uri.AppendPath(siteName, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slot, true);
            uri.AppendPath("/diagnostics/", false);
            uri.AppendPath(diagnosticCategory, true);
            uri.AppendPath("/detectors/", false);
            uri.AppendPath(detectorName, true);
            uri.AppendPath("/execute", false);
            if (startTime != null)
            {
                uri.AppendQuery("startTime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endTime", endTime.Value, "O", true);
            }
            if (timeGrain != null)
            {
                uri.AppendQuery("timeGrain", timeGrain, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Execute Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorResponse>> ExecuteSiteDetectorSlotAsync(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateExecuteSiteDetectorSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, detectorName, startTime, endTime, timeGrain);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorResponse.DeserializeDiagnosticDetectorResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Execute Detector. </summary>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Category Name. </param>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, <paramref name="diagnosticCategory"/>, or <paramref name="detectorName"/> is null. </exception>
        public Response<DiagnosticDetectorResponse> ExecuteSiteDetectorSlot(string resourceGroupName, string siteName, string slot, string diagnosticCategory, string detectorName, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }
            if (detectorName == null)
            {
                throw new ArgumentNullException(nameof(detectorName));
            }

            using var message = CreateExecuteSiteDetectorSlotRequest(resourceGroupName, siteName, slot, diagnosticCategory, detectorName, startTime, endTime, timeGrain);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorResponse.DeserializeDiagnosticDetectorResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListHostingEnvironmentDetectorResponsesNextPageRequest(string nextLink, string resourceGroupName, string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Hosting Environment Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="name"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListHostingEnvironmentDetectorResponsesNextPageAsync(string nextLink, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateListHostingEnvironmentDetectorResponsesNextPageRequest(nextLink, resourceGroupName, name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Hosting Environment Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="name"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="name"/> is null. </exception>
        public Response<DetectorResponseCollection> ListHostingEnvironmentDetectorResponsesNextPage(string nextLink, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateListHostingEnvironmentDetectorResponsesNextPageRequest(nextLink, resourceGroupName, name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorResponsesNextPageRequest(string nextLink, string resourceGroupName, string siteName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="siteName"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListSiteDetectorResponsesNextPageAsync(string nextLink, string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDetectorResponsesNextPageRequest(nextLink, resourceGroupName, siteName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="siteName"/> is null. </exception>
        public Response<DetectorResponseCollection> ListSiteDetectorResponsesNextPage(string nextLink, string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDetectorResponsesNextPageRequest(nextLink, resourceGroupName, siteName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDiagnosticCategoriesNextPageRequest(string nextLink, string resourceGroupName, string siteName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="siteName"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryCollection>> ListSiteDiagnosticCategoriesNextPageAsync(string nextLink, string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDiagnosticCategoriesNextPageRequest(nextLink, resourceGroupName, siteName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="siteName"/> is null. </exception>
        public Response<DiagnosticCategoryCollection> ListSiteDiagnosticCategoriesNextPage(string nextLink, string resourceGroupName, string siteName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }

            using var message = CreateListSiteDiagnosticCategoriesNextPageRequest(nextLink, resourceGroupName, siteName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteAnalysesNextPageRequest(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysisCollection>> ListSiteAnalysesNextPageAsync(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesNextPageRequest(nextLink, resourceGroupName, siteName, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticAnalysisCollection> ListSiteAnalysesNextPage(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesNextPageRequest(nextLink, resourceGroupName, siteName, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorsNextPageRequest(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorCollection>> ListSiteDetectorsNextPageAsync(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsNextPageRequest(nextLink, resourceGroupName, siteName, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticDetectorCollection> ListSiteDetectorsNextPage(string nextLink, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsNextPageRequest(nextLink, resourceGroupName, siteName, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorResponsesSlotNextPageRequest(string nextLink, string resourceGroupName, string siteName, string slot)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public async Task<Response<DetectorResponseCollection>> ListSiteDetectorResponsesSlotNextPageAsync(string nextLink, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDetectorResponsesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for List Site Detector Responses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public Response<DetectorResponseCollection> ListSiteDetectorResponsesSlotNextPage(string nextLink, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDetectorResponsesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DetectorResponseCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DetectorResponseCollection.DeserializeDetectorResponseCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDiagnosticCategoriesSlotNextPageRequest(string nextLink, string resourceGroupName, string siteName, string slot)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public async Task<Response<DiagnosticCategoryCollection>> ListSiteDiagnosticCategoriesSlotNextPageAsync(string nextLink, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDiagnosticCategoriesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Diagnostics Categories. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, or <paramref name="slot"/> is null. </exception>
        public Response<DiagnosticCategoryCollection> ListSiteDiagnosticCategoriesSlotNextPage(string nextLink, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }

            using var message = CreateListSiteDiagnosticCategoriesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticCategoryCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticCategoryCollection.DeserializeDiagnosticCategoryCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteAnalysesSlotNextPageRequest(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticAnalysisCollection>> ListSiteAnalysesSlotNextPageAsync(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Site Analyses. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticAnalysisCollection> ListSiteAnalysesSlotNextPage(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteAnalysesSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticAnalysisCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticAnalysisCollection.DeserializeDiagnosticAnalysisCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSiteDetectorsSlotNextPageRequest(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public async Task<Response<DiagnosticDetectorCollection>> ListSiteDetectorsSlotNextPageAsync(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot, diagnosticCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Description for Get Detectors. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> Name of the resource group to which the resource belongs. </param>
        /// <param name="siteName"> Site Name. </param>
        /// <param name="slot"> Slot Name. </param>
        /// <param name="diagnosticCategory"> Diagnostic Category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="siteName"/>, <paramref name="slot"/>, or <paramref name="diagnosticCategory"/> is null. </exception>
        public Response<DiagnosticDetectorCollection> ListSiteDetectorsSlotNextPage(string nextLink, string resourceGroupName, string siteName, string slot, string diagnosticCategory, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (siteName == null)
            {
                throw new ArgumentNullException(nameof(siteName));
            }
            if (slot == null)
            {
                throw new ArgumentNullException(nameof(slot));
            }
            if (diagnosticCategory == null)
            {
                throw new ArgumentNullException(nameof(diagnosticCategory));
            }

            using var message = CreateListSiteDetectorsSlotNextPageRequest(nextLink, resourceGroupName, siteName, slot, diagnosticCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticDetectorCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DiagnosticDetectorCollection.DeserializeDiagnosticDetectorCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
