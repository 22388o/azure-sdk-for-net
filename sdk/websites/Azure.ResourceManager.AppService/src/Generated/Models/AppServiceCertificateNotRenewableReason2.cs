// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The AppServiceCertificateNotRenewableReason2. </summary>
    public readonly partial struct AppServiceCertificateNotRenewableReason2 : IEquatable<AppServiceCertificateNotRenewableReason2>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AppServiceCertificateNotRenewableReason2"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AppServiceCertificateNotRenewableReason2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegistrationStatusNotSupportedForRenewalValue = "RegistrationStatusNotSupportedForRenewal";
        private const string ExpirationNotInRenewalTimeRangeValue = "ExpirationNotInRenewalTimeRange";
        private const string SubscriptionNotActiveValue = "SubscriptionNotActive";

        /// <summary> RegistrationStatusNotSupportedForRenewal. </summary>
        public static AppServiceCertificateNotRenewableReason2 RegistrationStatusNotSupportedForRenewal { get; } = new AppServiceCertificateNotRenewableReason2(RegistrationStatusNotSupportedForRenewalValue);
        /// <summary> ExpirationNotInRenewalTimeRange. </summary>
        public static AppServiceCertificateNotRenewableReason2 ExpirationNotInRenewalTimeRange { get; } = new AppServiceCertificateNotRenewableReason2(ExpirationNotInRenewalTimeRangeValue);
        /// <summary> SubscriptionNotActive. </summary>
        public static AppServiceCertificateNotRenewableReason2 SubscriptionNotActive { get; } = new AppServiceCertificateNotRenewableReason2(SubscriptionNotActiveValue);
        /// <summary> Determines if two <see cref="AppServiceCertificateNotRenewableReason2"/> values are the same. </summary>
        public static bool operator ==(AppServiceCertificateNotRenewableReason2 left, AppServiceCertificateNotRenewableReason2 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AppServiceCertificateNotRenewableReason2"/> values are not the same. </summary>
        public static bool operator !=(AppServiceCertificateNotRenewableReason2 left, AppServiceCertificateNotRenewableReason2 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AppServiceCertificateNotRenewableReason2"/>. </summary>
        public static implicit operator AppServiceCertificateNotRenewableReason2(string value) => new AppServiceCertificateNotRenewableReason2(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AppServiceCertificateNotRenewableReason2 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AppServiceCertificateNotRenewableReason2 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
