// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class representing collection of MSDeployStatus and their operations over its parent. </summary>
    public partial class SiteInstanceExtensionContainer : ArmContainer
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WebAppsRestOperations _webAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SiteInstanceExtensionContainer"/> class for mocking. </summary>
        protected SiteInstanceExtensionContainer()
        {
        }

        /// <summary> Initializes a new instance of SiteInstanceExtensionContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal SiteInstanceExtensionContainer(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _webAppsRestClient = new WebAppsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => SiteInstance.ResourceType;

        // Container level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}
        /// OperationId: WebApps_CreateInstanceMSDeployOperation
        /// <summary> Description for Invoke the MSDeploy web app extension. </summary>
        /// <param name="mSDeploy"> Details of MSDeploy operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="mSDeploy"/> is null. </exception>
        public virtual WebAppCreateInstanceMSDeployOperationOperation CreateOrUpdate(MSDeploy mSDeploy, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (mSDeploy == null)
            {
                throw new ArgumentNullException(nameof(mSDeploy));
            }

            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.CreateInstanceMSDeployOperation(Id.ResourceGroupName, Id.Parent.Name, Id.Name, mSDeploy, cancellationToken);
                var operation = new WebAppCreateInstanceMSDeployOperationOperation(Parent, _clientDiagnostics, Pipeline, _webAppsRestClient.CreateCreateInstanceMSDeployOperationRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, mSDeploy).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}
        /// OperationId: WebApps_CreateInstanceMSDeployOperation
        /// <summary> Description for Invoke the MSDeploy web app extension. </summary>
        /// <param name="mSDeploy"> Details of MSDeploy operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="mSDeploy"/> is null. </exception>
        public async virtual Task<WebAppCreateInstanceMSDeployOperationOperation> CreateOrUpdateAsync(MSDeploy mSDeploy, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (mSDeploy == null)
            {
                throw new ArgumentNullException(nameof(mSDeploy));
            }

            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.CreateInstanceMSDeployOperationAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, mSDeploy, cancellationToken).ConfigureAwait(false);
                var operation = new WebAppCreateInstanceMSDeployOperationOperation(Parent, _clientDiagnostics, Pipeline, _webAppsRestClient.CreateCreateInstanceMSDeployOperationRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, mSDeploy).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}
        /// OperationId: WebApps_GetInstanceMsDeployStatus
        /// <summary> Description for Get the status of the last MSDeploy operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteInstanceExtension> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.Get");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.GetInstanceMsDeployStatus(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteInstanceExtension(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}
        /// OperationId: WebApps_GetInstanceMsDeployStatus
        /// <summary> Description for Get the status of the last MSDeploy operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteInstanceExtension>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.Get");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.GetInstanceMsDeployStatusAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SiteInstanceExtension(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteInstanceExtension> GetIfExists(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.GetIfExists");
            scope.Start();
            try
            {
                var response = _webAppsRestClient.GetInstanceMsDeployStatus(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<SiteInstanceExtension>(null, response.GetRawResponse())
                    : Response.FromValue(new SiteInstanceExtension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteInstanceExtension>> GetIfExistsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _webAppsRestClient.GetInstanceMsDeployStatusAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<SiteInstanceExtension>(null, response.GetRawResponse())
                    : Response.FromValue(new SiteInstanceExtension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> CheckIfExists(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SiteInstanceExtensionContainer.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, SiteInstanceExtension, MSDeployStatusData> Construct() { }
    }
}
