### YamlMime:ManagedReference
items:
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient
  commentId: T:Azure.Analytics.Purview.Scanning.PurviewScanClient
  id: PurviewScanClient
  children:
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(System.String,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(System.String,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(Azure.Core.RequestContent,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(System.String,System.String,Azure.RequestContext)
  - Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(System.String,System.String,Azure.RequestContext)
  langs:
  - csharp
  - fsharp
  - vb
  name: PurviewScanClient
  nameWithType: Azure.Analytics.Purview.Scanning.PurviewScanClient
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient
  type: Class
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: The PurviewScan service client.
  syntax:
    content: public class PurviewScanClient
    content.csharp: public class PurviewScanClient
    content.fsharp: type PurviewScanClient = class
    content.vb: Public Class PurviewScanClient
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor
  id: '#ctor'
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - vb
  name: PurviewScanClient()
  nameWithType: PurviewScanClient.PurviewScanClient()
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient()
  type: Constructor
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Initializes a new instance of PurviewScanClient for mocking.
  syntax:
    content: protected PurviewScanClient ();
    parameters: []
    content.csharp: protected PurviewScanClient ();
    content.vb: Protected Sub New ()
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor*
  exceptions: []
  modifiers.csharp:
  - protected
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)
  id: '#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)'
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: PurviewScanClient(Uri, String, String, TokenCredential)
  nameWithType: PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential)
  type: Constructor
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Initializes a new instance of PurviewScanClient.
  syntax:
    content: public PurviewScanClient (Uri endpoint, string dataSourceName, string scanName, Azure.Core.TokenCredential credential);
    parameters:
    - id: endpoint
      type: System.Uri
      description: 'The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com.'
    - id: dataSourceName
      type: System.String
      description: The String to use.
    - id: scanName
      type: System.String
      description: The String to use.
    - id: credential
      type: Azure.Core.TokenCredential
      description: A credential used to authenticate to an Azure Service.
    content.csharp: public PurviewScanClient (Uri endpoint, string dataSourceName, string scanName, Azure.Core.TokenCredential credential);
    content.fsharp: 'new Azure.Analytics.Purview.Scanning.PurviewScanClient : Uri * string * string * Azure.Core.TokenCredential -> Azure.Analytics.Purview.Scanning.PurviewScanClient'
    content.vb: Public Sub New (endpoint As Uri, dataSourceName As String, scanName As String, credential As TokenCredential)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">endpoint</code>, <code data-dev-comment-type="paramref">dataSourceName</code>, <code data-dev-comment-type="paramref">scanName</code> or <code data-dev-comment-type="paramref">credential</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">dataSourceName</code> or <code data-dev-comment-type="paramref">scanName</code> is an empty string, and was expected to be non-empty.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions)
  id: '#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions)'
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  nameWithType: PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  type: Constructor
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Initializes a new instance of PurviewScanClient.
  syntax:
    content: public PurviewScanClient (Uri endpoint, string dataSourceName, string scanName, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions options);
    parameters:
    - id: endpoint
      type: System.Uri
      description: 'The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com.'
    - id: dataSourceName
      type: System.String
      description: The String to use.
    - id: scanName
      type: System.String
      description: The String to use.
    - id: credential
      type: Azure.Core.TokenCredential
      description: A credential used to authenticate to an Azure Service.
    - id: options
      type: Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions
      description: The options for configuring the client.
    content.csharp: public PurviewScanClient (Uri endpoint, string dataSourceName, string scanName, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions options);
    content.fsharp: 'new Azure.Analytics.Purview.Scanning.PurviewScanClient : Uri * string * string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions -> Azure.Analytics.Purview.Scanning.PurviewScanClient'
    content.vb: Public Sub New (endpoint As Uri, dataSourceName As String, scanName As String, credential As TokenCredential, options As PurviewScanningServiceClientOptions)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">endpoint</code>, <code data-dev-comment-type="paramref">dataSourceName</code>, <code data-dev-comment-type="paramref">scanName</code> or <code data-dev-comment-type="paramref">credential</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">dataSourceName</code> or <code data-dev-comment-type="paramref">scanName</code> is an empty string, and was expected to be non-empty.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(System.String,Azure.RequestContext)
  id: CancelScan(System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CancelScan(String, RequestContext)
  nameWithType: PurviewScanClient.CancelScan(String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(String, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Cancels a scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      scanResultId: OperationResponseScanResultId,
      startTime: string (ISO 8601 Format),
      endTime: string (ISO 8601 Format),
      status: "Accepted" | "InProgress" | "TransientFailure" | "Succeeded" | "Failed" | "Canceled",
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorInfo]
          }
        ]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response CancelScan (string runId, Azure.RequestContext context = null);
    parameters:
    - id: runId
      type: System.String
      description: The String to use.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response CancelScan (string runId, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CancelScan : string * Azure.RequestContext -> Azure.Response

      override this.CancelScan : string * Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function CancelScan (runId As String, Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">runId</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">runId</code> is an empty string, and was expected to be non-empty.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(System.String,Azure.RequestContext)
  id: CancelScanAsync(System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CancelScanAsync(String, RequestContext)
  nameWithType: PurviewScanClient.CancelScanAsync(String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(String, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Cancels a scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      scanResultId: OperationResponseScanResultId,
      startTime: string (ISO 8601 Format),
      endTime: string (ISO 8601 Format),
      status: "Accepted" | "InProgress" | "TransientFailure" | "Succeeded" | "Failed" | "Canceled",
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorInfo]
          }
        ]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CancelScanAsync (string runId, Azure.RequestContext context = null);
    parameters:
    - id: runId
      type: System.String
      description: The String to use.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CancelScanAsync (string runId, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CancelScanAsync : string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.CancelScanAsync : string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function CancelScanAsync (runId As String, Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">runId</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">runId</code> is an empty string, and was expected to be non-empty.
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdate(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdate(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates an instance of a scan.
  remarks: "<p>\n   Below is the JSON schema for the request and response payloads.\n</p>\n<p>\n   Additional information can be found in the Purview service REST API\n   documentation: <a href=\"https://docs.microsoft.com/en-us/rest/api/purview/scanningdataplane/scans/create-or-update\"></a></p>\n<p>\n   This method takes one of the scan JSON object below as a payload. Please\n   select a scan JSON object to view the schema for this.\n</p>\n  \n   Request Body:\n<details><summary>AzureSubscriptionCredential</summary>\n   Schema for AzureSubscriptionCredential <code data-dev-comment-type=\"c\">Request Body</code>: \n<pre><code>\n   {\n   # Base type properties\n     id: string, # Optional. &lt;Description&gt;Scan id.&lt;/Description&gt;\n     name: string, # Optional.\n     kind: # Required. \"AzureSubscriptionCredential\"\n     scanResults: [\n       {\n         parentId: string, # Optional.\n         id: string, # Optional.\n         resourceId: string, # Optional.\n         status: string, # Optional.\n         assetsDiscovered: number, # Optional.\n         assetsClassified: number, # Optional.\n         diagnostics: {\n           notifications: [\n             {\n               message: string, # Optional.\n               code: number # Optional.\n             }\n           ],\n           exceptionCountMap: # Optional. Dictionary&lt;string, number&gt;\n         },\n         startTime: string (ISO 8601 Format), # Optional.\n         queuedTime: string (ISO 8601 Format), # Optional.\n         pipelineStartTime: string (ISO 8601 Format), # Optional.\n         endTime: string (ISO 8601 Format), # Optional.\n         scanRulesetVersion: number, # Optional.\n         scanRulesetType: # Optional. \"Custom\" | \"System\",\n         scanLevelType: # Optional. \"Full\" | \"Incremental\",\n         errorMessage: string, # Optional.\n         error: {\n           code: string, # Optional.\n           message: string, # Optional.\n           target: string, # Optional.\n           details: [\n             {\n               code: string, # Optional.\n               message: string, # Optional.\n               target: string, # Optional.\n               details: [ErrorModel] # Optional.\n             }\n           ]\n         },\n         runType: string, # Optional.\n         dataSourceType: # Optional. \"None\" | \"AzureSubscription\" | \"AzureResourceGroup\" | \"AzureSynapseWorkspace\" | \"AzureSynapse\" | \"AdlsGen1\" | \"AdlsGen2\" | \"AmazonAccount\" | \"AmazonS3\" | \"AmazonSql\" | \"AzureCosmosDb\" | \"AzureDataExplorer\" | \"AzureFileService\" | \"AzureSqlDatabase\" | \"AmazonPostgreSql\" | \"AzurePostgreSql\" | \"SqlServerDatabase\" | \"AzureSqlDatabaseManagedInstance\" | \"AzureSqlDataWarehouse\" | \"AzureMySql\" | \"AzureStorage\" | \"Teradata\" | \"Oracle\" | \"SapS4Hana\" | \"SapEcc\" | \"PowerBI\"\n         }\n     ]\n   # Derived type properties\n     properties: {\n       scanRulesetName: string, # Optional.\n       scanRulesetType: # Optional. \"Custom\" | \"System\",\n       collection: {\n           lastModifiedAt: string (ISO 8601 Format), # Optional.\n           referenceName: string, # Optional.\n           type: string, # Optional.\n         }\n       workers: number # Optional.\n       createdAt: string (ISO 8601 Format), # Optional.\n       lastModifiedAt: string (ISO 8601 Format), # Optional.\n       connectedVia: {\n           referenceName: string, # Optional.\n         }\n       resourceTypes: string # Optional.\n       credential: { # Required.\n           referenceName: string, # Required.\n           credentialType: # Required. \"AccountKey\" | \"ServicePrincipal\" | \"BasicAuth\" | \"SqlAuth\" | \"AmazonARN\",\n         }\n     },\n   }</code></pre></details><details><summary>AmazonS3Credential</summary>\n   Schema for AmazonS3Credential <code data-dev-comment-type=\"c\">Request Body</code>: \n<pre><code>\n   {\n   # Base type properties\n     id: string, # Optional. &lt;Description&gt;Scan id.&lt;/Description&gt;\n     name: string, # Optional.\n     kind: # Required. \"AmazonS3Credential\"\n     scanResults: [\n       {\n         parentId: string, # Optional.\n         id: string, # Optional.\n         resourceId: string, # Optional.\n         status: string, # Optional.\n         assetsDiscovered: number, # Optional.\n         assetsClassified: number, # Optional.\n         diagnostics: {\n           notifications: [\n             {\n               message: string, # Optional.\n               code: number # Optional.\n             }\n           ],\n           exceptionCountMap: # Optional. Dictionary&lt;string, number&gt;\n         },\n         startTime: string (ISO 8601 Format), # Optional.\n         queuedTime: string (ISO 8601 Format), # Optional.\n         pipelineStartTime: string (ISO 8601 Format), # Optional.\n         endTime: string (ISO 8601 Format), # Optional.\n         scanRulesetVersion: number, # Optional.\n         scanRulesetType: # Optional. \"Custom\" | \"System\",\n         scanLevelType: # Optional. \"Full\" | \"Incremental\",\n         errorMessage: string, # Optional.\n         error: {\n           code: string, # Optional.\n           message: string, # Optional.\n           target: string, # Optional.\n           details: [\n             {\n               code: string, # Optional.\n               message: string, # Optional.\n               target: string, # Optional.\n               details: [ErrorModel] # Optional.\n             }\n           ]\n         },\n         runType: string, # Optional.\n         dataSourceType: # Optional. \"None\" | \"AzureSubscription\" | \"AzureResourceGroup\" | \"AzureSynapseWorkspace\" | \"AzureSynapse\" | \"AdlsGen1\" | \"AdlsGen2\" | \"AmazonAccount\" | \"AmazonS3\" | \"AmazonSql\" | \"AzureCosmosDb\" | \"AzureDataExplorer\" | \"AzureFileService\" | \"AzureSqlDatabase\" | \"AmazonPostgreSql\" | \"AzurePostgreSql\" | \"SqlServerDatabase\" | \"AzureSqlDatabaseManagedInstance\" | \"AzureSqlDataWarehouse\" | \"AzureMySql\" | \"AzureStorage\" | \"Teradata\" | \"Oracle\" | \"SapS4Hana\" | \"SapEcc\" | \"PowerBI\"\n         }\n     ]\n   # Derived type properties\n     properties: {\n       scanRulesetName: string, # Optional.\n       scanRulesetType: # Optional. \"Custom\" | \"System\",\n       collection: {\n           lastModifiedAt: string (ISO 8601 Format), # Optional.\n           referenceName: string, # Optional.\n           type: string, # Optional.\n         }\n       workers: number # Optional.\n       createdAt: string (ISO 8601 Format), # Optional.\n       lastModifiedAt: string (ISO 8601 Format), # Optional.\n       connectedVia: {\n           referenceName: string, # Optional.\n         }\n       credential: { # Required.\n           referenceName: string, # Required.\n           credentialType: # Required. \"AccountKey\" | \"ServicePrincipal\" | \"BasicAuth\" | \"SqlAuth\" | \"AmazonARN\",\n         }\n       roleARN: string # Optional.\n     },\n   }</code></pre></details>\n   ~+50 more JSON objects<br /><br />\n   \n   Response Body: \n<details><summary>AmazonS3Credential</summary>\n   Schema for AmazonS3Credential <code data-dev-comment-type=\"c\">Response Body</code>: \n<pre><code>\n   {\n   # Base type properties\n     id: string, # Optional. &lt;Description&gt;Scan id.&lt;/Description&gt;\n     name: string, # Optional.\n     kind: # Required. \"AmazonS3Credential\" \n     scanResults: [\n       {\n         parentId: string, # Optional.\n         id: string, # Optional.\n         resourceId: string, # Optional.\n         status: string, # Optional.\n         assetsDiscovered: number, # Optional.\n         assetsClassified: number, # Optional.\n         diagnostics: {\n           notifications: [\n             {\n               message: string, # Optional.\n               code: number # Optional.\n             }\n           ],\n           exceptionCountMap: # Optional. Dictionary&lt;string, number&gt;\n         },\n         startTime: string (ISO 8601 Format), # Optional.\n         queuedTime: string (ISO 8601 Format), # Optional.\n         pipelineStartTime: string (ISO 8601 Format), # Optional.\n         endTime: string (ISO 8601 Format), # Optional.\n         scanRulesetVersion: number, # Optional.\n         scanRulesetType: # Optional. \"Custom\" | \"System\",\n         scanLevelType:  # Optional. \"Full\" | \"Incremental\",\n         errorMessage: string, # Optional.\n         error: {\n           code: string, # Optional.\n           message: string, # Optional.\n           target: string, # Optional.\n           details: [\n             {\n               code: string, # Optional.\n               message: string, # Optional.\n               target: string, # Optional.\n               details: [ErrorModel] # Optional.\n             }\n           ]\n         },\n         runType: string, # Optional.\n         dataSourceType: # Optional. \"None\" | \"AzureSubscription\" | \"AzureResourceGroup\" | \"AzureSynapseWorkspace\" | \"AzureSynapse\" | \"AdlsGen1\" | \"AdlsGen2\" | \"AmazonAccount\" | \"AmazonS3\" | \"AmazonSql\" | \"AzureCosmosDb\" | \"AzureDataExplorer\" | \"AzureFileService\" | \"AzureSqlDatabase\" | \"AmazonPostgreSql\" | \"AzurePostgreSql\" | \"SqlServerDatabase\" | \"AzureSqlDatabaseManagedInstance\" | \"AzureSqlDataWarehouse\" | \"AzureMySql\" | \"AzureStorage\" | \"Teradata\" | \"Oracle\" | \"SapS4Hana\" | \"SapEcc\" | \"PowerBI\"\n       }\n     ]\n     # Derived type properties\n     properties: {\n       scanRulesetName: string, # Optional.\n       scanRulesetType: # Optional. \"Custom\" | \"System\",\n       collection: {\n           lastModifiedAt: string (ISO 8601 Format), # Optional.\n           referenceName: string, # Optional.\n           type: string, # Optional.\n         }\n       workers: number # Optional.\n       createdAt: string (ISO 8601 Format), # Optional.\n       lastModifiedAt: string (ISO 8601 Format), # Optional.\n       connectedVia: {\n           referenceName: string, # Optional.\n         }\n       credential: { # Required.\n           referenceName: string, # Required.\n           credentialType: # Required. \"AccountKey\" | \"ServicePrincipal\" | \"BasicAuth\" | \"SqlAuth\" | \"AmazonARN\",\n         }\n       roleARN: string # Optional.\n     },\n   }</code></pre></details><details><summary>AzureSubscriptionCredential</summary>\n   Schema for AzureSubscriptionCredential <code data-dev-comment-type=\"c\">Response Body</code>: \n<pre><code>\n   {\n   # Base type properties\n     id: string, # Optional. &lt;Description&gt;Scan id.&lt;/Description&gt;\n     name: string, # Optional.\n     kind: # Required. \"AzureSubscriptionCredential\"\n     scanResults: [\n       {\n         parentId: string, # Optional.\n         id: string, # Optional.\n         resourceId: string, # Optional.\n         status: string, # Optional.\n         assetsDiscovered: number, # Optional.\n         assetsClassified: number, # Optional.\n         diagnostics: {\n           notifications: [\n             {\n               message: string, # Optional.\n               code: number # Optional.\n             }\n           ],\n           exceptionCountMap: # Optional. Dictionary&lt;string, number&gt;\n         },\n         startTime: string (ISO 8601 Format), # Optional.\n         queuedTime: string (ISO 8601 Format), # Optional.\n         pipelineStartTime: string (ISO 8601 Format), # Optional.\n         endTime: string (ISO 8601 Format), # Optional.\n         scanRulesetVersion: number, # Optional.\n         scanRulesetType: # Optional. \"Custom\" | \"System\",\n         scanLevelType: # Optional. \"Full\" | \"Incremental\",\n         errorMessage: string, # Optional.\n         error: {\n           code: string, # Optional.\n           message: string, # Optional.\n           target: string, # Optional.\n           details: [\n             {\n               code: string, # Optional.\n               message: string, # Optional.\n               target: string, # Optional.\n               details: [ErrorModel] # Optional.\n             }\n           ]\n         },\n         runType: string, # Optional.\n         dataSourceType: # Optional. \"None\" | \"AzureSubscription\" | \"AzureResourceGroup\" | \"AzureSynapseWorkspace\" | \"AzureSynapse\" | \"AdlsGen1\" | \"AdlsGen2\" | \"AmazonAccount\" | \"AmazonS3\" | \"AmazonSql\" | \"AzureCosmosDb\" | \"AzureDataExplorer\" | \"AzureFileService\" | \"AzureSqlDatabase\" | \"AmazonPostgreSql\" | \"AzurePostgreSql\" | \"SqlServerDatabase\" | \"AzureSqlDatabaseManagedInstance\" | \"AzureSqlDataWarehouse\" | \"AzureMySql\" | \"AzureStorage\" | \"Teradata\" | \"Oracle\" | \"SapS4Hana\" | \"SapEcc\" | \"PowerBI\"\n         }\n     ]\n   # Derived type properties\n     properties: {\n       scanRulesetName: string, # Optional.\n       scanRulesetType: # Optional. \"Custom\" | \"System\",\n       collection: {\n           lastModifiedAt: string (ISO 8601 Format), # Optional.\n           referenceName: string, # Optional.\n           type: string, # Optional.\n         }\n       workers: number # Optional.\n       createdAt: string (ISO 8601 Format), # Optional.\n       lastModifiedAt: string (ISO 8601 Format), # Optional.\n       connectedVia: {\n           referenceName: string, # Optional.\n         }\n       resourceTypes: string # Optional.\n       credential: { # Required.\n           referenceName: string, # Required.\n           credentialType: # Required. \"AccountKey\" | \"ServicePrincipal\" | \"BasicAuth\" | \"SqlAuth\" | \"AmazonARN\",\n         }\n     },\n   }</code></pre></details>\n   ~+50 more JSON objects<br /><br />\n   \n   Error Response: \n<p>\n   We throw <a href=\"RequestFailedException\"></a> in case of error response. \n</p>"
  example:
  - "This sample shows how to call CreateOrUpdate with required parameters <pre><code class=\"C#\">\nvar credential = new DefaultAzureCredential();\nvar endpoint = new Uri(\"https://my-account-name.scan.purview.azure.com\");\nvar client = new PurviewScanClient(endpoint, \"dataSourceName\", \"scanName\", credential);\n \nvar data = new\n{\n    kind = \"AmazonS3Credential\",\n    properties = new\n    {\n        credential = new\n        {\n            referenceName = \"test-credential-s3\",\n            credentialType = \"AmazonARN\"\n        }\n     }\n};\nResponse createResponse = await client.CreateOrUpdateAsync(RequestContent.Create(data));\nJsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;\nConsole.WriteLine(result.GetProperty(\"kind\").GetString());\nConsole.WriteLine(result.GetProperty(\"properties\").GetProperty(\"credential\").GetProperty(\"referenceName\").ToString());\nConsole.WriteLine(result.GetProperty(\"properties\").GetProperty(\"credential\").GetProperty(\"credentialType\").ToString());</code></pre>\nThis sample shows how to call CreateOrUpdate with all the parameters <pre><code class=\"C#\">\nvar credential = new DefaultAzureCredential();\nvar endpoint = new Uri(\"https://my-account-name.scan.purview.azure.com\");\nvar client = new PurviewScanClient(endpoint, \"dataSourceName\", \"scanName\", credential);\n \nvar data = new\n{\n    id = \"test-id\",\n    name = \"test-name\",\n    kind = \"AmazonS3Credential\",\n    scanResults = new[]\n    {\n            new\n            {\n                parentId = \"test-scanResults-parentId\",\n                id = \"test-scanResults-Id\",\n                resourceId = \"test-scanResults-resourceId\",\n                status = \"test-scanResults-status\",\n                assetsDiscovered = 4513,\n                assetsClassified = 5423,\n                diagnostics = new\n                {\n                    notifications = new[]\n                    {\n                        new\n                        {\n                            message = \"test-scanResults-diagnostics-message\",\n                            code =  3423\n                        }\n                    },\n                    exceptionCountMap = new Dictionary&lt;string, int&gt;(){{ \"exceptionCountMapKey1\", 4243}},\n                },\n                startTime = \"2022-05-10T13:57:31.2311892-04:00\",\n                queuedTime = \"2022-05-10T14:57:31.2311892-04:00\",\n                pipelineStartTime = \"2022-05-10T15:57:31.2311892-04:00\",\n                endTime = \"2022-05-10T16:57:31.2311892-04:00\",\n                scanRulesetVersion = 9284,\n                scanRulesetType = \"Custom\",\n                scanLevelType = \"Full\",\n                errorMessage = \"test-scanResults-errorMessage\",\n                error = new\n                {\n                    code = \"test-scanResults-error-code\",\n                    message = \"test-scanResults-error-message\",\n                    target = \"test-scanResults-error-target\",\n                    details = new[]\n                    {\n                        new\n                        {\n                            code = \"test-scanResults-error-details-code\",\n                            message = \"test-scanResults-error-details-message\",\n                            target = \"test-scanResults-error-details-target\",\n                            details = new[]\n                            {\n                                new\n                                {\n                                }\n                            }\n                        }\n                    }\n                },\n                runType = \"test-scanResults-runType\",\n                dataSourceType = \"AzureSubscription\"\n            },\n        }\n    properties = new\n     {\n         scanRulesetName = \"properties-scanRulesetName\",\n         scanRulesetType = \"Customquot\",\n         collection = new\n         {\n             lastModifiedAt = \"2022-05-10T16:57:31.2311892-04:00\",\n             referenceName = \"properties-referenceName\",\n             type = \"properties-type\"\n         },\n         workers = 434,\n         createdAt = \"2022-05-10T16:57:31.2311892-04:00\",\n         lastModifiedAt = \"2022-05-10T16:57:31.2311892-04:00\"\n         connectedVia = new\n         {\n             referenceName = \"properties-connectedVia-referenceName\"\n         },\n         credential = new\n         {\n             referenceName = \"properties-credential-referenceName\",\n             credentialType = \"AmazonARN\",\n         },\n         roleARN = \"roleRn\"\n     },\n};\nResponse createResponse = await client.CreateOrUpdateAsync(RequestContent.Create(data));\nJsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;\nConsole.WriteLine(result.GetProperty(\"id\").GetString());\nConsole.WriteLine(result.GetProperty(\"name\").GetString());\nConsole.WriteLine(result.GetProperty(\"kind\").GetString());\n....\n</code></pre>"
  syntax:
    content: public virtual Azure.Response CreateOrUpdate (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: >-
        The content to send as the body of the request. The
                     details of the content are below in the remarks.
    - id: context
      type: Azure.RequestContext
      description: >-
        The request context, which can override default behaviors
                     on the request on a per-call basis.
    return:
      type: Azure.Response
      description: The details of the response are below in the remarks.
    content.csharp: public virtual Azure.Response CreateOrUpdate (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdate : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response

      override this.CreateOrUpdate : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function CreateOrUpdate (content As RequestContent, Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">content</code> is null.
  - type: Azure.RequestFailedException
    commentId: T:Azure.RequestFailedException
    description: Thrown in case of error response.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdateAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates an instance of a scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Request Body</code>: <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi" (required),
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }</code></pre>
     Schema for <code data-dev-comment-type="c">Response Body</code>: <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi",
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }</code></pre>
     Schema for <code data-dev-comment-type="c">Response Error</code>: <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }</code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: The content to send as the body of the request.
    - id: context
      type: Azure.RequestContext
      description: >-
        The request context, which can override default behaviors
                    on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.CreateOrUpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function CreateOrUpdateAsync (content As RequestContent, Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      <code data-dev-comment-type="paramref">content</code> is
        null.
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdateFilter(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdateFilter(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateFilter(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates or updates a filter.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Request Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response CreateOrUpdateFilter (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: The content to send as the body of the request.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response CreateOrUpdateFilter (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdateFilter : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response

      override this.CreateOrUpdateFilter : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function CreateOrUpdateFilter (content As RequestContent, Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdateFilterAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates or updates a filter.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Request Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateFilterAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: The content to send as the body of the request.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateFilterAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdateFilterAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.CreateOrUpdateFilterAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function CreateOrUpdateFilterAsync (content As RequestContent, Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdateTrigger(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdateTrigger(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateTrigger(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates an instance of a trigger.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Request Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response CreateOrUpdateTrigger (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: The content to send as the body of the request.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response CreateOrUpdateTrigger (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdateTrigger : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response

      override this.CreateOrUpdateTrigger : Azure.Core.RequestContent * Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function CreateOrUpdateTrigger (content As RequestContent, Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">content</code> is null.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(Azure.Core.RequestContent,Azure.RequestContext)
  id: CreateOrUpdateTriggerAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Creates an instance of a trigger.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Request Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateTriggerAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    parameters:
    - id: content
      type: Azure.Core.RequestContent
      description: The content to send as the body of the request.
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateTriggerAsync (Azure.Core.RequestContent content, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member CreateOrUpdateTriggerAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.CreateOrUpdateTriggerAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function CreateOrUpdateTriggerAsync (content As RequestContent, Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">content</code> is null.
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(Azure.RequestContext)
  id: Delete(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: Delete(RequestContext)
  nameWithType: PurviewScanClient.Delete(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Deletes the scan associated with the data source.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi",
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response Delete (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response Delete (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member Delete : Azure.RequestContext -> Azure.Response

      override this.Delete : Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function Delete (Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(Azure.RequestContext)
  id: DeleteAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: DeleteAsync(RequestContext)
  nameWithType: PurviewScanClient.DeleteAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Deletes the scan associated with the data source.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi",
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member DeleteAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.DeleteAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function DeleteAsync (Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(Azure.RequestContext)
  id: DeleteTrigger(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: DeleteTrigger(RequestContext)
  nameWithType: PurviewScanClient.DeleteTrigger(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Deletes the trigger associated with the scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response DeleteTrigger (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response DeleteTrigger (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member DeleteTrigger : Azure.RequestContext -> Azure.Response

      override this.DeleteTrigger : Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function DeleteTrigger (Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(Azure.RequestContext)
  id: DeleteTriggerAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: DeleteTriggerAsync(RequestContext)
  nameWithType: PurviewScanClient.DeleteTriggerAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Deletes the trigger associated with the scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> DeleteTriggerAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> DeleteTriggerAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member DeleteTriggerAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.DeleteTriggerAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function DeleteTriggerAsync (Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(Azure.RequestContext)
  id: GetFilter(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetFilter(RequestContext)
  nameWithType: PurviewScanClient.GetFilter(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Get a filter.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response GetFilter (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response GetFilter (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetFilter : Azure.RequestContext -> Azure.Response

      override this.GetFilter : Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function GetFilter (Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(Azure.RequestContext)
  id: GetFilterAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetFilterAsync(RequestContext)
  nameWithType: PurviewScanClient.GetFilterAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Get a filter.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        excludeUriPrefixes: [string],
        includeUriPrefixes: [string]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetFilterAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetFilterAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetFilterAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.GetFilterAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function GetFilterAsync (Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(Azure.RequestContext)
  id: GetProperties(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetProperties(RequestContext)
  nameWithType: PurviewScanClient.GetProperties(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Gets a scan information.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi",
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response GetProperties (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response GetProperties (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetProperties : Azure.RequestContext -> Azure.Response

      override this.GetProperties : Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function GetProperties (Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(Azure.RequestContext)
  id: GetPropertiesAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetPropertiesAsync(RequestContext)
  nameWithType: PurviewScanClient.GetPropertiesAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Gets a scan information.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      kind: "AzureSubscriptionCredential" | "AzureSubscriptionMsi" | "AzureResourceGroupCredential" | "AzureResourceGroupMsi" | "AzureSynapseWorkspaceCredential" | "AzureSynapseWorkspaceMsi" | "AzureSynapseCredential" | "AzureSynapseMsi" | "AdlsGen1Credential" | "AdlsGen1Msi" | "AdlsGen2Credential" | "AdlsGen2Msi" | "AmazonAccountCredential" | "AmazonS3Credential" | "AmazonS3RoleARN" | "AmazonSqlCredential" | "AzureCosmosDbCredential" | "AzureDataExplorerCredential" | "AzureDataExplorerMsi" | "AzureFileServiceCredential" | "AzureSqlDatabaseCredential" | "AzureSqlDatabaseMsi" | "AmazonPostgreSqlCredential" | "AzurePostgreSqlCredential" | "SqlServerDatabaseCredential" | "AzureSqlDatabaseManagedInstanceCredential" | "AzureSqlDatabaseManagedInstanceMsi" | "AzureSqlDataWarehouseCredential" | "AzureSqlDataWarehouseMsi" | "AzureMySqlCredential" | "AzureStorageCredential" | "AzureStorageMsi" | "TeradataTeradataCredential" | "TeradataTeradataUserPass" | "TeradataUserPass" | "OracleOracleCredential" | "OracleOracleUserPass" | "SapS4HanaSapS4HanaCredential" | "SapS4HanaSapS4HanaUserPass" | "SapEccSapEccCredential" | "SapEccSapEccUserPass" | "PowerBIDelegated" | "PowerBIMsi",
      scanResults: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ]
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetPropertiesAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetPropertiesAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetPropertiesAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.GetPropertiesAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function GetPropertiesAsync (Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(Azure.RequestContext)
  id: GetRuns(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetRuns(RequestContext)
  nameWithType: PurviewScanClient.GetRuns(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Lists the scan history of a scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      value: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ],
      nextLink: string,
      count: number
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Pageable<BinaryData> GetRuns (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Pageable{System.BinaryData}
      description: ''
    content.csharp: public virtual Azure.Pageable<BinaryData> GetRuns (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetRuns : Azure.RequestContext -> Azure.Pageable<BinaryData>

      override this.GetRuns : Azure.RequestContext -> Azure.Pageable<BinaryData>
    content.vb: Public Overridable Function GetRuns (Optional context As RequestContext = null) As Pageable(Of BinaryData)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(Azure.RequestContext)
  id: GetRunsAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetRunsAsync(RequestContext)
  nameWithType: PurviewScanClient.GetRunsAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Lists the scan history of a scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      value: [
        {
          parentId: string,
          id: string,
          resourceId: string,
          status: string,
          assetsDiscovered: number,
          assetsClassified: number,
          diagnostics: {
            notifications: [
              {
                message: string,
                code: number
              }
            ],
            exceptionCountMap: Dictionary&lt;string, number&gt;
          },
          startTime: string (ISO 8601 Format),
          queuedTime: string (ISO 8601 Format),
          pipelineStartTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          scanRulesetVersion: number,
          scanRulesetType: "Custom" | "System",
          scanLevelType: "Full" | "Incremental",
          errorMessage: string,
          error: {
            code: string,
            message: string,
            target: string,
            details: [
              {
                code: string,
                message: string,
                target: string,
                details: [ErrorModel]
              }
            ]
          },
          runType: string,
          dataSourceType: "None" | "AzureSubscription" | "AzureResourceGroup" | "AzureSynapseWorkspace" | "AzureSynapse" | "AdlsGen1" | "AdlsGen2" | "AmazonAccount" | "AmazonS3" | "AmazonSql" | "AzureCosmosDb" | "AzureDataExplorer" | "AzureFileService" | "AzureSqlDatabase" | "AmazonPostgreSql" | "AzurePostgreSql" | "SqlServerDatabase" | "AzureSqlDatabaseManagedInstance" | "AzureSqlDataWarehouse" | "AzureMySql" | "AzureStorage" | "Teradata" | "Oracle" | "SapS4Hana" | "SapEcc" | "PowerBI"
        }
      ],
      nextLink: string,
      count: number
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.AsyncPageable<BinaryData> GetRunsAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.AsyncPageable{System.BinaryData}
      description: ''
    content.csharp: public virtual Azure.AsyncPageable<BinaryData> GetRunsAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetRunsAsync : Azure.RequestContext -> Azure.AsyncPageable<BinaryData>

      override this.GetRunsAsync : Azure.RequestContext -> Azure.AsyncPageable<BinaryData>
    content.vb: Public Overridable Function GetRunsAsync (Optional context As RequestContext = null) As AsyncPageable(Of BinaryData)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(Azure.RequestContext)
  id: GetTrigger(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetTrigger(RequestContext)
  nameWithType: PurviewScanClient.GetTrigger(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Gets trigger information.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response GetTrigger (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response GetTrigger (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetTrigger : Azure.RequestContext -> Azure.Response

      override this.GetTrigger : Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function GetTrigger (Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(Azure.RequestContext)
  id: GetTriggerAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: GetTriggerAsync(RequestContext)
  nameWithType: PurviewScanClient.GetTriggerAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Gets trigger information.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      id: string,
      name: string,
      properties: {
        recurrence: {
          frequency: "Week" | "Month",
          interval: number,
          startTime: string (ISO 8601 Format),
          endTime: string (ISO 8601 Format),
          schedule: {
            additionalProperties: Dictionary&lt;string, AnyObject&gt;,
            minutes: [number],
            hours: [number],
            weekDays: ["Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"],
            monthDays: [number],
            monthlyOccurrences: [
              {
                additionalProperties: Dictionary&lt;string, AnyObject&gt;,
                day: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday",
                occurrence: number
              }
            ]
          },
          timeZone: string
        },
        recurrenceInterval: string,
        createdAt: string (ISO 8601 Format),
        lastModifiedAt: string (ISO 8601 Format),
        lastScheduled: string (ISO 8601 Format),
        scanLevel: "Full" | "Incremental",
        incrementalScanStartTime: string (ISO 8601 Format)
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetTriggerAsync (Azure.RequestContext context = null);
    parameters:
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> GetTriggerAsync (Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member GetTriggerAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.GetTriggerAsync : Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function GetTriggerAsync (Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync*
  exceptions: []
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  commentId: P:Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  id: Pipeline
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: Pipeline
  nameWithType: PurviewScanClient.Pipeline
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  type: Property
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: The HTTP pipeline for sending and receiving REST requests and responses.
  syntax:
    content: public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }
    return:
      type: Azure.Core.Pipeline.HttpPipeline
      description: ''
    content.csharp: public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }
    content.fsharp: 'member this.Pipeline : Azure.Core.Pipeline.HttpPipeline'
    content.vb: Public Overridable ReadOnly Property Pipeline As HttpPipeline
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(System.String,System.String,Azure.RequestContext)
  id: RunScan(System.String,System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: RunScan(String, String, RequestContext)
  nameWithType: PurviewScanClient.RunScan(String, String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(String, String, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Runs the scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      scanResultId: OperationResponseScanResultId,
      startTime: string (ISO 8601 Format),
      endTime: string (ISO 8601 Format),
      status: "Accepted" | "InProgress" | "TransientFailure" | "Succeeded" | "Failed" | "Canceled",
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorInfo]
          }
        ]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: public virtual Azure.Response RunScan (string runId, string scanLevel = null, Azure.RequestContext context = null);
    parameters:
    - id: runId
      type: System.String
      description: The String to use.
    - id: scanLevel
      type: System.String
      description: 'The ScanLevelType to use. Allowed values: "Full" | "Incremental".'
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: Azure.Response
      description: ''
    content.csharp: public virtual Azure.Response RunScan (string runId, string scanLevel = null, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member RunScan : string * string * Azure.RequestContext -> Azure.Response

      override this.RunScan : string * string * Azure.RequestContext -> Azure.Response
    content.vb: Public Overridable Function RunScan (runId As String, Optional scanLevel As String = null, Optional context As RequestContext = null) As Response
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">runId</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">runId</code> is an empty string, and was expected to be non-empty.
  modifiers.csharp:
  - public
  monikers:
  - my-api
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(System.String,System.String,Azure.RequestContext)
  id: RunScanAsync(System.String,System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  langs:
  - csharp
  - fsharp
  - vb
  name: RunScanAsync(String, String, RequestContext)
  nameWithType: PurviewScanClient.RunScanAsync(String, String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(String, String, RequestContext)
  type: Method
  assemblies:
  - Azure.Analytics.Purview.Scanning
  namespace: Azure.Analytics.Purview.Scanning
  summary: Runs the scan.
  remarks: >-
    Schema for <code data-dev-comment-type="c">Response Body</code>:

    <pre><code>{
      scanResultId: OperationResponseScanResultId,
      startTime: string (ISO 8601 Format),
      endTime: string (ISO 8601 Format),
      status: "Accepted" | "InProgress" | "TransientFailure" | "Succeeded" | "Failed" | "Canceled",
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorInfo]
          }
        ]
      }
    }

    </code></pre>

    Schema for <code data-dev-comment-type="c">Response Error</code>:

    <pre><code>{
      error: {
        code: string,
        message: string,
        target: string,
        details: [
          {
            code: string,
            message: string,
            target: string,
            details: [ErrorModel]
          }
        ]
      }
    }

    </code></pre>
  syntax:
    content: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> RunScanAsync (string runId, string scanLevel = null, Azure.RequestContext context = null);
    parameters:
    - id: runId
      type: System.String
      description: The String to use.
    - id: scanLevel
      type: System.String
      description: 'The ScanLevelType to use. Allowed values: "Full" | "Incremental".'
    - id: context
      type: Azure.RequestContext
      description: The request context, which can override default behaviors on the request on a per-call basis.
    return:
      type: System.Threading.Tasks.Task{Azure.Response}
      description: ''
    content.csharp: >-
      [System.Diagnostics.DebuggerStepThrough]

      public virtual System.Threading.Tasks.Task<Azure.Response> RunScanAsync (string runId, string scanLevel = null, Azure.RequestContext context = null);
    content.fsharp: >-
      abstract member RunScanAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

      override this.RunScanAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
    content.vb: Public Overridable Function RunScanAsync (runId As String, Optional scanLevel As String = null, Optional context As RequestContext = null) As Task(Of Response)
  overload: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">runId</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">runId</code> is an empty string, and was expected to be non-empty.
  attributes:
  - type: System.Diagnostics.DebuggerStepThroughAttribute
  modifiers.csharp:
  - public
  monikers:
  - my-api
references:
- uid: Azure.Analytics.Purview.Scanning
  commentId: N:Azure.Analytics.Purview.Scanning
  isExternal: false
  name: Azure.Analytics.Purview.Scanning
  nameWithType: Azure.Analytics.Purview.Scanning
  fullName: Azure.Analytics.Purview.Scanning
  type: namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Azure.RequestFailedException
  isExternal: true
  name: Azure.RequestFailedException
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: PurviewScanClient()
  nameWithType: PurviewScanClient.PurviewScanClient()
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient()
  type: constructor
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: PurviewScanClient(Uri, String, String, TokenCredential)
  nameWithType: PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential)
  type: constructor
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Azure.Core.TokenCredential
  parent: Azure.Core
  isExternal: true
  name: TokenCredential
  nameWithType: TokenCredential
  fullName: Azure.Core.TokenCredential
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  nameWithType: PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient(Uri, String, String, TokenCredential, PurviewScanningServiceClientOptions)
  type: constructor
- uid: Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions
  parent: Azure.Analytics.Purview.Scanning
  isExternal: false
  name: PurviewScanningServiceClientOptions
  nameWithType: PurviewScanningServiceClientOptions
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanningServiceClientOptions
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CancelScan(String, RequestContext)
  nameWithType: PurviewScanClient.CancelScan(String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan(String, RequestContext)
  type: method
- uid: Azure.Response
  parent: Azure
  isExternal: true
  name: Response
  nameWithType: Response
  fullName: Azure.Response
- uid: Azure.RequestContext
  parent: Azure
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: Azure.RequestContext
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CancelScanAsync(String, RequestContext)
  nameWithType: PurviewScanClient.CancelScanAsync(String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync(String, RequestContext)
  type: method
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task{Azure.Response}
  parent: System.Threading.Tasks
  name: Task<Response>
  nameWithType: Task<Response>
  fullName: System.Threading.Tasks.Task<Azure.Response>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: Azure.Response
    name: Response
    nameWithType: Response
    fullName: Azure.Response
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdate(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdate(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate(RequestContent, RequestContext)
  type: method
- uid: Azure.Core.RequestContent
  parent: Azure.Core
  isExternal: true
  name: RequestContent
  nameWithType: RequestContent
  fullName: Azure.Core.RequestContent
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync(RequestContent, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateFilter(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateFilter(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter(RequestContent, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync(RequestContent, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateTrigger(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateTrigger(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger(RequestContent, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(Azure.Core.RequestContent,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  nameWithType: PurviewScanClient.CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync(RequestContent, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: Delete(RequestContext)
  nameWithType: PurviewScanClient.Delete(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteAsync(RequestContext)
  nameWithType: PurviewScanClient.DeleteAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteTrigger(RequestContext)
  nameWithType: PurviewScanClient.DeleteTrigger(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteTriggerAsync(RequestContext)
  nameWithType: PurviewScanClient.DeleteTriggerAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetFilter(RequestContext)
  nameWithType: PurviewScanClient.GetFilter(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetFilterAsync(RequestContext)
  nameWithType: PurviewScanClient.GetFilterAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetProperties(RequestContext)
  nameWithType: PurviewScanClient.GetProperties(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetPropertiesAsync(RequestContext)
  nameWithType: PurviewScanClient.GetPropertiesAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetRuns(RequestContext)
  nameWithType: PurviewScanClient.GetRuns(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns(RequestContext)
  type: method
- uid: Azure.Pageable`1
  isExternal: true
  name: Pageable
  nameWithType: Pageable
  fullName: Azure.Pageable
- uid: System.BinaryData
  isExternal: true
  name: BinaryData
  nameWithType: BinaryData
  fullName: System.BinaryData
- uid: Azure.Pageable{System.BinaryData}
  parent: Azure
  name: Pageable<BinaryData>
  nameWithType: Pageable<BinaryData>
  fullName: Azure.Pageable<System.BinaryData>
  spec.csharp:
  - uid: Azure.Pageable`1
    name: Pageable
    nameWithType: Pageable
    fullName: Azure.Pageable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.BinaryData
    name: BinaryData
    nameWithType: BinaryData
    fullName: System.BinaryData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetRunsAsync(RequestContext)
  nameWithType: PurviewScanClient.GetRunsAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync(RequestContext)
  type: method
- uid: Azure.AsyncPageable`1
  isExternal: true
  name: AsyncPageable
  nameWithType: AsyncPageable
  fullName: Azure.AsyncPageable
- uid: Azure.AsyncPageable{System.BinaryData}
  parent: Azure
  name: AsyncPageable<BinaryData>
  nameWithType: AsyncPageable<BinaryData>
  fullName: Azure.AsyncPageable<System.BinaryData>
  spec.csharp:
  - uid: Azure.AsyncPageable`1
    name: AsyncPageable
    nameWithType: AsyncPageable
    fullName: Azure.AsyncPageable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.BinaryData
    name: BinaryData
    nameWithType: BinaryData
    fullName: System.BinaryData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetTrigger(RequestContext)
  nameWithType: PurviewScanClient.GetTrigger(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetTriggerAsync(RequestContext)
  nameWithType: PurviewScanClient.GetTriggerAsync(RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync(RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: Pipeline
  nameWithType: PurviewScanClient.Pipeline
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  type: property
- uid: Azure.Core.Pipeline.HttpPipeline
  parent: Azure.Core.Pipeline
  isExternal: true
  name: HttpPipeline
  nameWithType: HttpPipeline
  fullName: Azure.Core.Pipeline.HttpPipeline
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(System.String,System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: RunScan(String, String, RequestContext)
  nameWithType: PurviewScanClient.RunScan(String, String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan(String, String, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(System.String,System.String,Azure.RequestContext)
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: RunScanAsync(String, String, RequestContext)
  nameWithType: PurviewScanClient.RunScanAsync(String, String, RequestContext)
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync(String, String, RequestContext)
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.#ctor
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: PurviewScanClient
  nameWithType: PurviewScanClient.PurviewScanClient
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.PurviewScanClient
  monikers:
  - my-api
  type: constructor
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CancelScan
  nameWithType: PurviewScanClient.CancelScan
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScan
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CancelScanAsync
  nameWithType: PurviewScanClient.CancelScanAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CancelScanAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdate
  nameWithType: PurviewScanClient.CreateOrUpdate
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdate
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateAsync
  nameWithType: PurviewScanClient.CreateOrUpdateAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateFilter
  nameWithType: PurviewScanClient.CreateOrUpdateFilter
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilter
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateFilterAsync
  nameWithType: PurviewScanClient.CreateOrUpdateFilterAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateFilterAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateTrigger
  nameWithType: PurviewScanClient.CreateOrUpdateTrigger
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTrigger
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: CreateOrUpdateTriggerAsync
  nameWithType: PurviewScanClient.CreateOrUpdateTriggerAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.CreateOrUpdateTriggerAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: Delete
  nameWithType: PurviewScanClient.Delete
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Delete
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteAsync
  nameWithType: PurviewScanClient.DeleteAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteTrigger
  nameWithType: PurviewScanClient.DeleteTrigger
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTrigger
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: DeleteTriggerAsync
  nameWithType: PurviewScanClient.DeleteTriggerAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.DeleteTriggerAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetFilter
  nameWithType: PurviewScanClient.GetFilter
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilter
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetFilterAsync
  nameWithType: PurviewScanClient.GetFilterAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetFilterAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetProperties
  nameWithType: PurviewScanClient.GetProperties
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetProperties
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetPropertiesAsync
  nameWithType: PurviewScanClient.GetPropertiesAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetPropertiesAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetRuns
  nameWithType: PurviewScanClient.GetRuns
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRuns
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetRunsAsync
  nameWithType: PurviewScanClient.GetRunsAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetRunsAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetTrigger
  nameWithType: PurviewScanClient.GetTrigger
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTrigger
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: GetTriggerAsync
  nameWithType: PurviewScanClient.GetTriggerAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.GetTriggerAsync
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: Pipeline
  nameWithType: PurviewScanClient.Pipeline
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.Pipeline
  monikers:
  - my-api
  type: property
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: RunScan
  nameWithType: PurviewScanClient.RunScan
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScan
  monikers:
  - my-api
  type: method
- uid: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync*
  commentId: Overload:Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync
  parent: Azure.Analytics.Purview.Scanning.PurviewScanClient
  isExternal: false
  name: RunScanAsync
  nameWithType: PurviewScanClient.RunScanAsync
  fullName: Azure.Analytics.Purview.Scanning.PurviewScanClient.RunScanAsync
  monikers:
  - my-api
  type: method
